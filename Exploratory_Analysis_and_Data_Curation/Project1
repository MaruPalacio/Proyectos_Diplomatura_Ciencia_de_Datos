{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MaruPalacio/Proyectos_Diplomatura_Ciencia_de_Datos/blob/main/Exploratory_Analysis_and_Data_Curation/Project1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Integrantes: Mariel Palacio,Joel Kuperman, Juan David Ferreira y Valentina del Milagro Rodriguez"
      ],
      "metadata": {
        "id": "PZFJ22fmu1Ai"
      },
      "id": "PZFJ22fmu1Ai"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f5ac98f7-51f3-4f91-ac49-60ef5fe249be",
      "metadata": {
        "id": "f5ac98f7-51f3-4f91-ac49-60ef5fe249be"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy\n",
        "import pandas as pd\n",
        "\n",
        "import seaborn\n",
        "seaborn.set_context('talk')\n",
        "\n",
        "from sqlalchemy import create_engine, text"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e0ff301b-5595-4a0b-a2b8-3d5609a0485d",
      "metadata": {
        "id": "e0ff301b-5595-4a0b-a2b8-3d5609a0485d"
      },
      "source": [
        "**Diplomatura en Ciencia de Datos, Aprendizaje Automático y sus Aplicaciones**\n",
        "\n",
        "**Exploración y Curación de Datos**\n",
        "\n",
        "*Edición 2024*\n",
        "\n",
        "----\n",
        "\n",
        "# Trabajo práctico entregable - parte 1\n",
        "\n",
        "En esta notebook, vamos a cargar el conjunto de datos de [la compentencia Kaggle](https://www.kaggle.com/dansbecker/melbourne-housing-snapshot) sobre estimación de precios de ventas de propiedades en Melbourne, Australia.\n",
        "\n",
        "Utilizaremos el conjunto de datos reducido producido por [DanB](https://www.kaggle.com/dansbecker). Hemos subido una copia a un servidor de la Universidad Nacional de Córdoba para facilitar su acceso remoto."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ce478cbd-0f49-4f15-8dc5-1fe1a5b39f17",
      "metadata": {
        "id": "ce478cbd-0f49-4f15-8dc5-1fe1a5b39f17",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "2d342039-8e46-406b-d174-648238abb333"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'5.15.0'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "import plotly\n",
        "plotly.__version__\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5ba8bfd5-199a-4390-a5b4-11ec9669b3e1",
      "metadata": {
        "id": "5ba8bfd5-199a-4390-a5b4-11ec9669b3e1",
        "outputId": "2ff8f80a-8ee6-49c6-809f-78bad83209ce",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 262
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Suburb          Address  Rooms Type      Price Method SellerG  \\\n",
              "0  Abbotsford     85 Turner St      2    h  1480000.0      S  Biggin   \n",
              "1  Abbotsford  25 Bloomburg St      2    h  1035000.0      S  Biggin   \n",
              "2  Abbotsford     5 Charles St      3    h  1465000.0     SP  Biggin   \n",
              "\n",
              "        Date  Distance  Postcode  ...  Bathroom  Car  Landsize  BuildingArea  \\\n",
              "0  3/12/2016       2.5    3067.0  ...       1.0  1.0     202.0           NaN   \n",
              "1  4/02/2016       2.5    3067.0  ...       1.0  0.0     156.0          79.0   \n",
              "2  4/03/2017       2.5    3067.0  ...       2.0  0.0     134.0         150.0   \n",
              "\n",
              "   YearBuilt  CouncilArea Lattitude  Longtitude             Regionname  \\\n",
              "0        NaN        Yarra  -37.7996    144.9984  Northern Metropolitan   \n",
              "1     1900.0        Yarra  -37.8079    144.9934  Northern Metropolitan   \n",
              "2     1900.0        Yarra  -37.8093    144.9944  Northern Metropolitan   \n",
              "\n",
              "  Propertycount  \n",
              "0        4019.0  \n",
              "1        4019.0  \n",
              "2        4019.0  \n",
              "\n",
              "[3 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a5f64644-231f-4d34-95ec-38a122039334\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Address</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>SellerG</th>\n",
              "      <th>Date</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Postcode</th>\n",
              "      <th>...</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Car</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Regionname</th>\n",
              "      <th>Propertycount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>85 Turner St</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>1480000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>3/12/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>202.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.7996</td>\n",
              "      <td>144.9984</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>25 Bloomburg St</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>1035000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/02/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.8079</td>\n",
              "      <td>144.9934</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>5 Charles St</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>1465000.0</td>\n",
              "      <td>SP</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/03/2017</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>134.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.8093</td>\n",
              "      <td>144.9944</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5f64644-231f-4d34-95ec-38a122039334')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a5f64644-231f-4d34-95ec-38a122039334 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a5f64644-231f-4d34-95ec-38a122039334');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a9527287-4be6-451a-8a47-60610abedf20\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a9527287-4be6-451a-8a47-60610abedf20')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a9527287-4be6-451a-8a47-60610abedf20 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "melb_df = pd.read_csv(\n",
        "    'https://cs.famaf.unc.edu.ar/~mteruel/datasets/diplodatos/melb_data.csv')\n",
        "melb_df[:3]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "melb_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JaGvGM4b6B7a",
        "outputId": "a86c69b3-f340-4045-9bb8-2e40f7a88298"
      },
      "id": "JaGvGM4b6B7a",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG',\n",
              "       'Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car',\n",
              "       'Landsize', 'BuildingArea', 'YearBuilt', 'CouncilArea', 'Lattitude',\n",
              "       'Longtitude', 'Regionname', 'Propertycount'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6cffe5bf-2498-498c-aa06-3e61422d91e6",
      "metadata": {
        "id": "6cffe5bf-2498-498c-aa06-3e61422d91e6"
      },
      "source": [
        "## Ejercicio 1 SQL:\n",
        "\n",
        "1. Crear una base de datos en SQLite utilizando la libreria [SQLalchemy](https://stackoverflow.com/questions/2268050/execute-sql-from-file-in-sqlalchemy).\n",
        "https://docs.sqlalchemy.org/en/14/core/engines.html#sqlite\n",
        "\n",
        "2. Ingestar los datos provistos en 'https://cs.famaf.unc.edu.ar/~mteruel/datasets/diplodatos/melb_data.csv' en una tabla y el dataset generado en clase con datos de airbnb y sus precios por codigo postal en otra.\n",
        "\n",
        "3. Implementar consultas en SQL que respondan con la siguiente información:\n",
        "\n",
        "    - cantidad de registros totales por ciudad.\n",
        "    - cantidad de registros totales por barrio y ciudad.\n",
        "\n",
        "4. Combinar los datasets de ambas tablas ingestadas utilizando el comando JOIN de SQL  para obtener un resultado similar a lo realizado con Pandas en clase.  \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "engine = create_engine('sqlite:///melb_data.sqlite3', echo=True)"
      ],
      "metadata": {
        "id": "BR8W4-A4Gm9x"
      },
      "execution_count": null,
      "outputs": [],
      "id": "BR8W4-A4Gm9x"
    },
    {
      "cell_type": "code",
      "source": [
        "melb_df.to_sql('melb_data', con=engine, if_exists='replace', index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i8H5XHSJx1iz",
        "outputId": "865c38ff-1d4c-4277-98d5-6d1addf63cdd"
      },
      "id": "i8H5XHSJx1iz",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:39,611 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:BEGIN (implicit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:39,635 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"melb_data\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:PRAGMA main.table_info(\"melb_data\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:39,648 INFO sqlalchemy.engine.Engine [raw sql] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[raw sql] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:39,657 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"melb_data\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:PRAGMA temp.table_info(\"melb_data\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:39,663 INFO sqlalchemy.engine.Engine [raw sql] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[raw sql] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:39,669 INFO sqlalchemy.engine.Engine \n",
            "CREATE TABLE melb_data (\n",
            "\t\"Suburb\" TEXT, \n",
            "\t\"Address\" TEXT, \n",
            "\t\"Rooms\" BIGINT, \n",
            "\t\"Type\" TEXT, \n",
            "\t\"Price\" FLOAT, \n",
            "\t\"Method\" TEXT, \n",
            "\t\"SellerG\" TEXT, \n",
            "\t\"Date\" TEXT, \n",
            "\t\"Distance\" FLOAT, \n",
            "\t\"Postcode\" FLOAT, \n",
            "\t\"Bedroom2\" FLOAT, \n",
            "\t\"Bathroom\" FLOAT, \n",
            "\t\"Car\" FLOAT, \n",
            "\t\"Landsize\" FLOAT, \n",
            "\t\"BuildingArea\" FLOAT, \n",
            "\t\"YearBuilt\" FLOAT, \n",
            "\t\"CouncilArea\" TEXT, \n",
            "\t\"Lattitude\" FLOAT, \n",
            "\t\"Longtitude\" FLOAT, \n",
            "\t\"Regionname\" TEXT, \n",
            "\t\"Propertycount\" FLOAT\n",
            ")\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:\n",
            "CREATE TABLE melb_data (\n",
            "\t\"Suburb\" TEXT, \n",
            "\t\"Address\" TEXT, \n",
            "\t\"Rooms\" BIGINT, \n",
            "\t\"Type\" TEXT, \n",
            "\t\"Price\" FLOAT, \n",
            "\t\"Method\" TEXT, \n",
            "\t\"SellerG\" TEXT, \n",
            "\t\"Date\" TEXT, \n",
            "\t\"Distance\" FLOAT, \n",
            "\t\"Postcode\" FLOAT, \n",
            "\t\"Bedroom2\" FLOAT, \n",
            "\t\"Bathroom\" FLOAT, \n",
            "\t\"Car\" FLOAT, \n",
            "\t\"Landsize\" FLOAT, \n",
            "\t\"BuildingArea\" FLOAT, \n",
            "\t\"YearBuilt\" FLOAT, \n",
            "\t\"CouncilArea\" TEXT, \n",
            "\t\"Lattitude\" FLOAT, \n",
            "\t\"Longtitude\" FLOAT, \n",
            "\t\"Regionname\" TEXT, \n",
            "\t\"Propertycount\" FLOAT\n",
            ")\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:39,672 INFO sqlalchemy.engine.Engine [no key 0.00339s] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[no key 0.00339s] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,296 INFO sqlalchemy.engine.Engine INSERT INTO melb_data (\"Suburb\", \"Address\", \"Rooms\", \"Type\", \"Price\", \"Method\", \"SellerG\", \"Date\", \"Distance\", \"Postcode\", \"Bedroom2\", \"Bathroom\", \"Car\", \"Landsize\", \"BuildingArea\", \"YearBuilt\", \"CouncilArea\", \"Lattitude\", \"Longtitude\", \"Regionname\", \"Propertycount\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:INSERT INTO melb_data (\"Suburb\", \"Address\", \"Rooms\", \"Type\", \"Price\", \"Method\", \"SellerG\", \"Date\", \"Distance\", \"Postcode\", \"Bedroom2\", \"Bathroom\", \"Car\", \"Landsize\", \"BuildingArea\", \"YearBuilt\", \"CouncilArea\", \"Lattitude\", \"Longtitude\", \"Regionname\", \"Propertycount\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,308 INFO sqlalchemy.engine.Engine [generated in 0.50478s] [('Abbotsford', '85 Turner St', 2, 'h', 1480000.0, 'S', 'Biggin', '3/12/2016', 2.5, 3067.0, 2.0, 1.0, 1.0, 202.0, None, None, 'Yarra', -37.7996, 144.9984, 'Northern Metropolitan', 4019.0), ('Abbotsford', '25 Bloomburg St', 2, 'h', 1035000.0, 'S', 'Biggin', '4/02/2016', 2.5, 3067.0, 2.0, 1.0, 0.0, 156.0, 79.0, 1900.0, 'Yarra', -37.8079, 144.9934, 'Northern Metropolitan', 4019.0), ('Abbotsford', '5 Charles St', 3, 'h', 1465000.0, 'SP', 'Biggin', '4/03/2017', 2.5, 3067.0, 3.0, 2.0, 0.0, 134.0, 150.0, 1900.0, 'Yarra', -37.8093, 144.9944, 'Northern Metropolitan', 4019.0), ('Abbotsford', '40 Federation La', 3, 'h', 850000.0, 'PI', 'Biggin', '4/03/2017', 2.5, 3067.0, 3.0, 2.0, 1.0, 94.0, None, None, 'Yarra', -37.7969, 144.9969, 'Northern Metropolitan', 4019.0), ('Abbotsford', '55a Park St', 4, 'h', 1600000.0, 'VB', 'Nelson', '4/06/2016', 2.5, 3067.0, 3.0, 1.0, 2.0, 120.0, 142.0, 2014.0, 'Yarra', -37.8072, 144.9941, 'Northern Metropolitan', 4019.0), ('Abbotsford', '129 Charles St', 2, 'h', 941000.0, 'S', 'Jellis', '7/05/2016', 2.5, 3067.0, 2.0, 1.0, 0.0, 181.0, None, None, 'Yarra', -37.8041, 144.9953, 'Northern Metropolitan', 4019.0), ('Abbotsford', '124 Yarra St', 3, 'h', 1876000.0, 'S', 'Nelson', '7/05/2016', 2.5, 3067.0, 4.0, 2.0, 0.0, 245.0, 210.0, 1910.0, 'Yarra', -37.8024, 144.9993, 'Northern Metropolitan', 4019.0), ('Abbotsford', '98 Charles St', 2, 'h', 1636000.0, 'S', 'Nelson', '8/10/2016', 2.5, 3067.0, 2.0, 1.0, 2.0, 256.0, 107.0, 1890.0, 'Yarra', -37.806, 144.9954, 'Northern Metropolitan', 4019.0)  ... displaying 10 of 13580 total bound parameter sets ...  ('Williamstown', '96 Verdon St', 4, 'h', 2500000.0, 'PI', 'Sweeney', '26/08/2017', 6.8, 3016.0, 4.0, 1.0, 5.0, 866.0, 157.0, 1920.0, None, -37.85908, 144.89299, 'Western Metropolitan', 6380.0), ('Yarraville', '6 Agnes St', 4, 'h', 1285000.0, 'SP', 'Village', '26/08/2017', 6.3, 3013.0, 4.0, 1.0, 1.0, 362.0, 112.0, 1920.0, None, -37.81188, 144.88449, 'Western Metropolitan', 6543.0)]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[generated in 0.50478s] [('Abbotsford', '85 Turner St', 2, 'h', 1480000.0, 'S', 'Biggin', '3/12/2016', 2.5, 3067.0, 2.0, 1.0, 1.0, 202.0, None, None, 'Yarra', -37.7996, 144.9984, 'Northern Metropolitan', 4019.0), ('Abbotsford', '25 Bloomburg St', 2, 'h', 1035000.0, 'S', 'Biggin', '4/02/2016', 2.5, 3067.0, 2.0, 1.0, 0.0, 156.0, 79.0, 1900.0, 'Yarra', -37.8079, 144.9934, 'Northern Metropolitan', 4019.0), ('Abbotsford', '5 Charles St', 3, 'h', 1465000.0, 'SP', 'Biggin', '4/03/2017', 2.5, 3067.0, 3.0, 2.0, 0.0, 134.0, 150.0, 1900.0, 'Yarra', -37.8093, 144.9944, 'Northern Metropolitan', 4019.0), ('Abbotsford', '40 Federation La', 3, 'h', 850000.0, 'PI', 'Biggin', '4/03/2017', 2.5, 3067.0, 3.0, 2.0, 1.0, 94.0, None, None, 'Yarra', -37.7969, 144.9969, 'Northern Metropolitan', 4019.0), ('Abbotsford', '55a Park St', 4, 'h', 1600000.0, 'VB', 'Nelson', '4/06/2016', 2.5, 3067.0, 3.0, 1.0, 2.0, 120.0, 142.0, 2014.0, 'Yarra', -37.8072, 144.9941, 'Northern Metropolitan', 4019.0), ('Abbotsford', '129 Charles St', 2, 'h', 941000.0, 'S', 'Jellis', '7/05/2016', 2.5, 3067.0, 2.0, 1.0, 0.0, 181.0, None, None, 'Yarra', -37.8041, 144.9953, 'Northern Metropolitan', 4019.0), ('Abbotsford', '124 Yarra St', 3, 'h', 1876000.0, 'S', 'Nelson', '7/05/2016', 2.5, 3067.0, 4.0, 2.0, 0.0, 245.0, 210.0, 1910.0, 'Yarra', -37.8024, 144.9993, 'Northern Metropolitan', 4019.0), ('Abbotsford', '98 Charles St', 2, 'h', 1636000.0, 'S', 'Nelson', '8/10/2016', 2.5, 3067.0, 2.0, 1.0, 2.0, 256.0, 107.0, 1890.0, 'Yarra', -37.806, 144.9954, 'Northern Metropolitan', 4019.0)  ... displaying 10 of 13580 total bound parameter sets ...  ('Williamstown', '96 Verdon St', 4, 'h', 2500000.0, 'PI', 'Sweeney', '26/08/2017', 6.8, 3016.0, 4.0, 1.0, 5.0, 866.0, 157.0, 1920.0, None, -37.85908, 144.89299, 'Western Metropolitan', 6380.0), ('Yarraville', '6 Agnes St', 4, 'h', 1285000.0, 'SP', 'Village', '26/08/2017', 6.3, 3013.0, 4.0, 1.0, 1.0, 362.0, 112.0, 1920.0, None, -37.81188, 144.88449, 'Western Metropolitan', 6543.0)]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,412 INFO sqlalchemy.engine.Engine COMMIT\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:COMMIT\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13580"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = 'https://raw.githubusercontent.com/MarielPalacio/Famaf-DiploDatos2024/main/airbnb_price_by_zipcode.csv'\n",
        "airbnb_price_by_zipcode_df = pd.read_csv(url)"
      ],
      "metadata": {
        "id": "wOIFJ-CkANAG"
      },
      "id": "wOIFJ-CkANAG",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_price_by_zipcode_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 216
        },
        "id": "vubPpszEAkm9",
        "outputId": "760cb4b3-eba7-4732-8a56-847df1b302ef"
      },
      "id": "vubPpszEAkm9",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   zipcode  airbnb_price_mean  airbnb_record_count  airbnb_weekly_price_mean  \\\n",
              "0   2010.0          40.000000                    1                       NaN   \n",
              "1   2134.0          50.000000                    1                       NaN   \n",
              "2   2582.0         104.000000                    1                       NaN   \n",
              "3   3000.0         150.504307                 3367                918.738956   \n",
              "4   3001.0         132.500000                    2                       NaN   \n",
              "\n",
              "   airbnb_monthly_price_mean  \n",
              "0                        NaN  \n",
              "1                        NaN  \n",
              "2                        NaN  \n",
              "3                3407.204651  \n",
              "4                        NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88edd0d2-e305-4b54-9bc3-d1adc1cb6be2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>zipcode</th>\n",
              "      <th>airbnb_price_mean</th>\n",
              "      <th>airbnb_record_count</th>\n",
              "      <th>airbnb_weekly_price_mean</th>\n",
              "      <th>airbnb_monthly_price_mean</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2010.0</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2134.0</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2582.0</td>\n",
              "      <td>104.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3000.0</td>\n",
              "      <td>150.504307</td>\n",
              "      <td>3367</td>\n",
              "      <td>918.738956</td>\n",
              "      <td>3407.204651</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3001.0</td>\n",
              "      <td>132.500000</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88edd0d2-e305-4b54-9bc3-d1adc1cb6be2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-88edd0d2-e305-4b54-9bc3-d1adc1cb6be2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-88edd0d2-e305-4b54-9bc3-d1adc1cb6be2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4c8ff469-028b-45ea-a976-46e128cf6219\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4c8ff469-028b-45ea-a976-46e128cf6219')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4c8ff469-028b-45ea-a976-46e128cf6219 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "airbnb_price_by_zipcode_df",
              "summary": "{\n  \"name\": \"airbnb_price_by_zipcode_df\",\n  \"rows\": 247,\n  \"fields\": [\n    {\n      \"column\": \"zipcode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1903.9143903097424,\n        \"min\": 2010.0,\n        \"max\": 30122.0,\n        \"num_unique_values\": 247,\n        \"samples\": [\n          3039.0,\n          3003.0,\n          3338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_price_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84.87298814880268,\n        \"min\": 37.0,\n        \"max\": 759.0833333333334,\n        \"num_unique_values\": 243,\n        \"samples\": [\n          76.15044247787611,\n          130.20599250936328,\n          282.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_record_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 261,\n        \"min\": 1,\n        \"max\": 3367,\n        \"num_unique_values\": 113,\n        \"samples\": [\n          118,\n          267,\n          138\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_weekly_price_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 393.4605595824064,\n        \"min\": 133.0,\n        \"max\": 2236.6666666666665,\n        \"num_unique_values\": 172,\n        \"samples\": [\n          1340.6666666666667,\n          1187.4,\n          762.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_monthly_price_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1642.5599970763446,\n        \"min\": 527.0,\n        \"max\": 10060.0,\n        \"num_unique_values\": 158,\n        \"samples\": [\n          2345.0,\n          1449.2,\n          1650.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_price_by_zipcode_df.to_sql('airbnb_data', con=engine, if_exists='replace', index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_ntD7T0sD3VX",
        "outputId": "dd2ed757-1d16-403c-e9b1-602227331907"
      },
      "id": "_ntD7T0sD3VX",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,700 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:BEGIN (implicit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,709 INFO sqlalchemy.engine.Engine PRAGMA main.table_info(\"airbnb_data\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:PRAGMA main.table_info(\"airbnb_data\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,712 INFO sqlalchemy.engine.Engine [raw sql] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[raw sql] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,717 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info(\"airbnb_data\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:PRAGMA temp.table_info(\"airbnb_data\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,719 INFO sqlalchemy.engine.Engine [raw sql] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[raw sql] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,724 INFO sqlalchemy.engine.Engine \n",
            "CREATE TABLE airbnb_data (\n",
            "\tzipcode FLOAT, \n",
            "\tairbnb_price_mean FLOAT, \n",
            "\tairbnb_record_count BIGINT, \n",
            "\tairbnb_weekly_price_mean FLOAT, \n",
            "\tairbnb_monthly_price_mean FLOAT\n",
            ")\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:\n",
            "CREATE TABLE airbnb_data (\n",
            "\tzipcode FLOAT, \n",
            "\tairbnb_price_mean FLOAT, \n",
            "\tairbnb_record_count BIGINT, \n",
            "\tairbnb_weekly_price_mean FLOAT, \n",
            "\tairbnb_monthly_price_mean FLOAT\n",
            ")\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,728 INFO sqlalchemy.engine.Engine [no key 0.00390s] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[no key 0.00390s] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,747 INFO sqlalchemy.engine.Engine INSERT INTO airbnb_data (zipcode, airbnb_price_mean, airbnb_record_count, airbnb_weekly_price_mean, airbnb_monthly_price_mean) VALUES (?, ?, ?, ?, ?)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:INSERT INTO airbnb_data (zipcode, airbnb_price_mean, airbnb_record_count, airbnb_weekly_price_mean, airbnb_monthly_price_mean) VALUES (?, ?, ?, ?, ?)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,751 INFO sqlalchemy.engine.Engine [generated in 0.00564s] [(2010.0, 40.0, 1, None, None), (2134.0, 50.0, 1, None, None), (2582.0, 104.0, 1, None, None), (3000.0, 150.5043065043065, 3367, 918.7389558232932, 3407.204651162791), (3001.0, 132.5, 2, None, None), (3002.0, 200.9796954314721, 197, 956.3793103448276, 3712.714285714286), (3003.0, 130.20599250936328, 267, 760.2, 2629.5), (3004.0, 158.271978021978, 728, 1061.1714285714286, 3759.925925925926)  ... displaying 10 of 247 total bound parameter sets ...  (9540.0, 245.0, 1, None, None), (30122.0, 75.0, 1, 525.0, 2281.0)]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[generated in 0.00564s] [(2010.0, 40.0, 1, None, None), (2134.0, 50.0, 1, None, None), (2582.0, 104.0, 1, None, None), (3000.0, 150.5043065043065, 3367, 918.7389558232932, 3407.204651162791), (3001.0, 132.5, 2, None, None), (3002.0, 200.9796954314721, 197, 956.3793103448276, 3712.714285714286), (3003.0, 130.20599250936328, 267, 760.2, 2629.5), (3004.0, 158.271978021978, 728, 1061.1714285714286, 3759.925925925926)  ... displaying 10 of 247 total bound parameter sets ...  (9540.0, 245.0, 1, None, None), (30122.0, 75.0, 1, 525.0, 2281.0)]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,756 INFO sqlalchemy.engine.Engine COMMIT\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:COMMIT\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "247"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Buscamos:\n",
        "\n",
        "*Implementar consultas en SQL que respondan con la siguiente información:*\n",
        "\n",
        "\n",
        "\n",
        "*   *cantidad de registros totales por ciudad.*\n",
        "*   *cantidad de registros totales por barrio y ciudad.*\n",
        "\n",
        "Ademas de *combinar los datasets de ambas tablas ingestadas utilizando el comando JOIN de SQL  para obtener un resultado similar a lo realizado con Pandas en clase.*\n",
        "\n"
      ],
      "metadata": {
        "id": "j0dU_cyrTBke"
      },
      "id": "j0dU_cyrTBke"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Podemos hacer las siguientes consultas, teniendo en cuenta las siguientes observaciones:\n",
        "- Cuando hablamos de \"Ciudad\" tomaremos como \"Suburb\", ya que la ciudad principal en todos los registros es la cuidad de Melbourne, Australia.\n",
        "- Luego podriamos tener la confusion entre \"barrio\" y \"suburbio\", pero tomaremos como \"barrio al codigo postal,\"Postcode\" ya que estos representan geograficamente a un area más pequeña.\n",
        "\n",
        "Según como investigamos en la web del servicio [postal de Melbourne](https://auspost.com.au/postcode/melbourne)"
      ],
      "metadata": {
        "id": "hyte08giilLT"
      },
      "id": "hyte08giilLT"
    },
    {
      "cell_type": "code",
      "source": [
        "def run_query(query):\n",
        "  with engine.connect() as con:\n",
        "        rs = con.execute(text(query))\n",
        "        df_rs = pd.DataFrame(rs.fetchall())\n",
        "        #print(query)\n",
        "        #for row in rs:\n",
        "        #print(row)\n",
        "        return df_rs"
      ],
      "metadata": {
        "id": "AuEnTp6D-wp9"
      },
      "execution_count": null,
      "outputs": [],
      "id": "AuEnTp6D-wp9"
    },
    {
      "cell_type": "code",
      "source": [
        "query1 = \"\"\"\n",
        "SELECT Suburb, COUNT(*) AS record_count\n",
        "FROM melb_data\n",
        "GROUP BY Suburb\n",
        "\"\"\"\n",
        "query2 = \"\"\"\n",
        "SELECT Postcode, COUNT(*) AS record_count\n",
        "FROM melb_data\n",
        "GROUP BY Postcode\n",
        "\"\"\"\n",
        "query_join = \"\"\"\n",
        "SELECT *\n",
        "FROM melb_data\n",
        "LEFT JOIN airbnb_data\n",
        "  ON Postcode = zipcode\n",
        "\"\"\"\n",
        "queries = [query1,query2,query_join]"
      ],
      "metadata": {
        "id": "QOHg6RvfU4An"
      },
      "id": "QOHg6RvfU4An",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_queries = []\n",
        "for query in queries:\n",
        "  df_queries.append(run_query(query))"
      ],
      "metadata": {
        "id": "ORnkC02YK7m9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d3b3282c-5849-44b2-b85d-e8dce0facc27"
      },
      "id": "ORnkC02YK7m9",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,802 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:BEGIN (implicit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,807 INFO sqlalchemy.engine.Engine \n",
            "SELECT Suburb, COUNT(*) AS record_count\n",
            "FROM melb_data\n",
            "GROUP BY Suburb\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:\n",
            "SELECT Suburb, COUNT(*) AS record_count\n",
            "FROM melb_data\n",
            "GROUP BY Suburb\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,809 INFO sqlalchemy.engine.Engine [generated in 0.00770s] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[generated in 0.00770s] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,834 INFO sqlalchemy.engine.Engine ROLLBACK\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:ROLLBACK\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,839 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:BEGIN (implicit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,842 INFO sqlalchemy.engine.Engine \n",
            "SELECT Postcode, COUNT(*) AS record_count\n",
            "FROM melb_data\n",
            "GROUP BY Postcode\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:\n",
            "SELECT Postcode, COUNT(*) AS record_count\n",
            "FROM melb_data\n",
            "GROUP BY Postcode\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,846 INFO sqlalchemy.engine.Engine [generated in 0.00699s] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[generated in 0.00699s] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,881 INFO sqlalchemy.engine.Engine ROLLBACK\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:ROLLBACK\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,889 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:BEGIN (implicit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,892 INFO sqlalchemy.engine.Engine \n",
            "SELECT *\n",
            "FROM melb_data\n",
            "LEFT JOIN airbnb_data\n",
            "  ON Postcode = zipcode\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:\n",
            "SELECT *\n",
            "FROM melb_data\n",
            "LEFT JOIN airbnb_data\n",
            "  ON Postcode = zipcode\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:40,897 INFO sqlalchemy.engine.Engine [generated in 0.00805s] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:[generated in 0.00805s] ()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-05-22 20:39:41,104 INFO sqlalchemy.engine.Engine ROLLBACK\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:sqlalchemy.engine.Engine:ROLLBACK\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_total_record_by_suburb = df_queries[0]\n",
        "df_total_record_by_suburb"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 446
        },
        "id": "uteeG0wBiLNU",
        "outputId": "c7c97599-c48c-4544-d30e-1b26e47c6a8c"
      },
      "id": "uteeG0wBiLNU",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Suburb  record_count\n",
              "0      Abbotsford            56\n",
              "1      Aberfeldie            44\n",
              "2    Airport West            67\n",
              "3       Albanvale             6\n",
              "4     Albert Park            69\n",
              "..            ...           ...\n",
              "309    Wonga Park             1\n",
              "310  Wyndham Vale             4\n",
              "311     Yallambie            24\n",
              "312    Yarra Glen             1\n",
              "313    Yarraville           164\n",
              "\n",
              "[314 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a70c7644-b75b-48ac-971a-89b15878b35f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>record_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Aberfeldie</td>\n",
              "      <td>44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Airport West</td>\n",
              "      <td>67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Albanvale</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Albert Park</td>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>309</th>\n",
              "      <td>Wonga Park</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>310</th>\n",
              "      <td>Wyndham Vale</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>311</th>\n",
              "      <td>Yallambie</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>312</th>\n",
              "      <td>Yarra Glen</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>313</th>\n",
              "      <td>Yarraville</td>\n",
              "      <td>164</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>314 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a70c7644-b75b-48ac-971a-89b15878b35f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a70c7644-b75b-48ac-971a-89b15878b35f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a70c7644-b75b-48ac-971a-89b15878b35f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-231364c2-4522-4e73-9494-bc82e4f22f25\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-231364c2-4522-4e73-9494-bc82e4f22f25')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-231364c2-4522-4e73-9494-bc82e4f22f25 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_total_record_by_suburb",
              "summary": "{\n  \"name\": \"df_total_record_by_suburb\",\n  \"rows\": 314,\n  \"fields\": [\n    {\n      \"column\": \"Suburb\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 314,\n        \"samples\": [\n          \"Gardenvale\",\n          \"Blackburn\",\n          \"Oakleigh East\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"record_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": 1,\n        \"max\": 359,\n        \"num_unique_values\": 116,\n        \"samples\": [\n          42,\n          69,\n          51\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_total_record_by_postcode = df_queries[1]\n",
        "df_total_record_by_postcode"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 446
        },
        "id": "eWNoBwKphn1x",
        "outputId": "69a1f479-455c-4bb9-e0e8-d946226651e3"
      },
      "id": "eWNoBwKphn1x",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Postcode  record_count\n",
              "0      3000.0            46\n",
              "1      3002.0            22\n",
              "2      3003.0            31\n",
              "3      3006.0            41\n",
              "4      3008.0             3\n",
              "..        ...           ...\n",
              "193    3809.0             1\n",
              "194    3810.0             3\n",
              "195    3910.0             6\n",
              "196    3976.0             4\n",
              "197    3977.0             8\n",
              "\n",
              "[198 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c04a138f-1c67-4e8e-96d5-aec86b96587f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Postcode</th>\n",
              "      <th>record_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3000.0</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3002.0</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3003.0</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3006.0</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3008.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>193</th>\n",
              "      <td>3809.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>3810.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>3910.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>3976.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>3977.0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>198 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c04a138f-1c67-4e8e-96d5-aec86b96587f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c04a138f-1c67-4e8e-96d5-aec86b96587f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c04a138f-1c67-4e8e-96d5-aec86b96587f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-56160ef0-2f99-47a1-9e6a-8b6716647637\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-56160ef0-2f99-47a1-9e6a-8b6716647637')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-56160ef0-2f99-47a1-9e6a-8b6716647637 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_total_record_by_postcode",
              "summary": "{\n  \"name\": \"df_total_record_by_postcode\",\n  \"rows\": 198,\n  \"fields\": [\n    {\n      \"column\": \"Postcode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 235.8315046594931,\n        \"min\": 3000.0,\n        \"max\": 3977.0,\n        \"num_unique_values\": 198,\n        \"samples\": [\n          3082.0,\n          3149.0,\n          3024.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"record_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 75,\n        \"min\": 1,\n        \"max\": 359,\n        \"num_unique_values\": 115,\n        \"samples\": [\n          28,\n          3,\n          246\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "melb_data_extended = df_queries[2]\n",
        "melb_data_extended.sample(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "id": "ALux_sdOh6mD",
        "outputId": "94f6eb1f-701f-492c-fd53-961ed5014ef9"
      },
      "id": "ALux_sdOh6mD",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   Suburb          Address  Rooms Type      Price Method  \\\n",
              "8837   Heidelberg Heights     55 McEwan Rd      2    h   780000.0     VB   \n",
              "9782            Ashburton  103 Fakenham Rd      3    h  1850000.0      S   \n",
              "10781            Oakleigh   32 Stamford Rd      3    h  1365000.0      S   \n",
              "1385            Brunswick   69 Glenlyon Rd      3    h  1210000.0      S   \n",
              "699             Bentleigh     7 Marquis Rd      4    h  1420000.0      S   \n",
              "\n",
              "        SellerG        Date  Distance  Postcode  ...  CouncilArea  Lattitude  \\\n",
              "8837      Barry   1/07/2017       8.8    3081.0  ...      Banyule  -37.73764   \n",
              "9782   Marshall  24/06/2017      10.2    3147.0  ...   Boroondara  -37.86286   \n",
              "10781       Ray   8/07/2017      12.3    3166.0  ...       Monash  -37.89542   \n",
              "1385     Nelson  28/08/2016       5.2    3056.0  ...     Moreland  -37.77190   \n",
              "699    Woodards   3/12/2016      13.0    3204.0  ...    Glen Eira  -37.93050   \n",
              "\n",
              "       Longtitude             Regionname  Propertycount  zipcode  \\\n",
              "8837    145.05323   Eastern Metropolitan         2947.0   3081.0   \n",
              "9782    145.09228  Southern Metropolitan         3052.0   3147.0   \n",
              "10781   145.10055  Southern Metropolitan         3224.0   3166.0   \n",
              "1385    144.96610  Northern Metropolitan        11918.0   3056.0   \n",
              "699     145.04490  Southern Metropolitan         6795.0   3204.0   \n",
              "\n",
              "      airbnb_price_mean  airbnb_record_count  airbnb_weekly_price_mean  \\\n",
              "8837          83.657895                 38.0                291.428571   \n",
              "9782          82.758621                 29.0                520.000000   \n",
              "10781        113.142857                 70.0                459.285714   \n",
              "1385          94.672646                446.0                618.758065   \n",
              "699          114.612500                 80.0                719.222222   \n",
              "\n",
              "      airbnb_monthly_price_mean  \n",
              "8837                 937.500000  \n",
              "9782                        NaN  \n",
              "10781               1536.166667  \n",
              "1385                2308.978723  \n",
              "699                 2936.000000  \n",
              "\n",
              "[5 rows x 26 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d74fc4f4-9f7c-4da7-9b58-05dcd2e74b83\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Address</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>SellerG</th>\n",
              "      <th>Date</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Postcode</th>\n",
              "      <th>...</th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Regionname</th>\n",
              "      <th>Propertycount</th>\n",
              "      <th>zipcode</th>\n",
              "      <th>airbnb_price_mean</th>\n",
              "      <th>airbnb_record_count</th>\n",
              "      <th>airbnb_weekly_price_mean</th>\n",
              "      <th>airbnb_monthly_price_mean</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8837</th>\n",
              "      <td>Heidelberg Heights</td>\n",
              "      <td>55 McEwan Rd</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>780000.0</td>\n",
              "      <td>VB</td>\n",
              "      <td>Barry</td>\n",
              "      <td>1/07/2017</td>\n",
              "      <td>8.8</td>\n",
              "      <td>3081.0</td>\n",
              "      <td>...</td>\n",
              "      <td>Banyule</td>\n",
              "      <td>-37.73764</td>\n",
              "      <td>145.05323</td>\n",
              "      <td>Eastern Metropolitan</td>\n",
              "      <td>2947.0</td>\n",
              "      <td>3081.0</td>\n",
              "      <td>83.657895</td>\n",
              "      <td>38.0</td>\n",
              "      <td>291.428571</td>\n",
              "      <td>937.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9782</th>\n",
              "      <td>Ashburton</td>\n",
              "      <td>103 Fakenham Rd</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>1850000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Marshall</td>\n",
              "      <td>24/06/2017</td>\n",
              "      <td>10.2</td>\n",
              "      <td>3147.0</td>\n",
              "      <td>...</td>\n",
              "      <td>Boroondara</td>\n",
              "      <td>-37.86286</td>\n",
              "      <td>145.09228</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>3052.0</td>\n",
              "      <td>3147.0</td>\n",
              "      <td>82.758621</td>\n",
              "      <td>29.0</td>\n",
              "      <td>520.000000</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10781</th>\n",
              "      <td>Oakleigh</td>\n",
              "      <td>32 Stamford Rd</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>1365000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Ray</td>\n",
              "      <td>8/07/2017</td>\n",
              "      <td>12.3</td>\n",
              "      <td>3166.0</td>\n",
              "      <td>...</td>\n",
              "      <td>Monash</td>\n",
              "      <td>-37.89542</td>\n",
              "      <td>145.10055</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>3224.0</td>\n",
              "      <td>3166.0</td>\n",
              "      <td>113.142857</td>\n",
              "      <td>70.0</td>\n",
              "      <td>459.285714</td>\n",
              "      <td>1536.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1385</th>\n",
              "      <td>Brunswick</td>\n",
              "      <td>69 Glenlyon Rd</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>1210000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Nelson</td>\n",
              "      <td>28/08/2016</td>\n",
              "      <td>5.2</td>\n",
              "      <td>3056.0</td>\n",
              "      <td>...</td>\n",
              "      <td>Moreland</td>\n",
              "      <td>-37.77190</td>\n",
              "      <td>144.96610</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>11918.0</td>\n",
              "      <td>3056.0</td>\n",
              "      <td>94.672646</td>\n",
              "      <td>446.0</td>\n",
              "      <td>618.758065</td>\n",
              "      <td>2308.978723</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>699</th>\n",
              "      <td>Bentleigh</td>\n",
              "      <td>7 Marquis Rd</td>\n",
              "      <td>4</td>\n",
              "      <td>h</td>\n",
              "      <td>1420000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Woodards</td>\n",
              "      <td>3/12/2016</td>\n",
              "      <td>13.0</td>\n",
              "      <td>3204.0</td>\n",
              "      <td>...</td>\n",
              "      <td>Glen Eira</td>\n",
              "      <td>-37.93050</td>\n",
              "      <td>145.04490</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>6795.0</td>\n",
              "      <td>3204.0</td>\n",
              "      <td>114.612500</td>\n",
              "      <td>80.0</td>\n",
              "      <td>719.222222</td>\n",
              "      <td>2936.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d74fc4f4-9f7c-4da7-9b58-05dcd2e74b83')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d74fc4f4-9f7c-4da7-9b58-05dcd2e74b83 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d74fc4f4-9f7c-4da7-9b58-05dcd2e74b83');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7b75b183-b77f-411e-8f1d-d32efb9a6931\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7b75b183-b77f-411e-8f1d-d32efb9a6931')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7b75b183-b77f-411e-8f1d-d32efb9a6931 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c5468c4f-5cdf-4df4-a317-60e1fb0c00db",
      "metadata": {
        "id": "c5468c4f-5cdf-4df4-a317-60e1fb0c00db"
      },
      "source": [
        "## Ejercicio 2 - Pandas:\n",
        "\n",
        "1. Seleccionar un subconjunto de columnas que les parezcan relevantes al problema de predicción del valor de la propiedad. Justificar las columnas seleccionadas y las que no lo fueron.\n",
        " - Eliminar los valores extremos que no sean relevantes para la predicción de valores de las propiedades.\n",
        "\n",
        "\n",
        "2. Agregar información adicional respectiva al entorno de una propiedad a partir del [conjunto de datos de AirBnB](https://www.kaggle.com/tylerx/melbourne-airbnb-open-data?select=cleansed_listings_dec18.csv) utilizado en el práctico.\n",
        "  1. Seleccionar qué variables agregar y qué combinaciones aplicar a cada una. Por ejemplo, pueden utilizar solo la columna `price`, o aplicar múltiples transformaciones como la mediana o el mínimo.\n",
        "  1. Utilizar la variable zipcode para unir los conjuntos de datos. Sólo incluir los zipcodes que tengan una cantidad mínima de registros (a elección) como para que la información agregada sea relevante.\n",
        "  2. Investigar al menos otras 2 variables que puedan servir para combinar los datos, y justificar si serían adecuadas o no. Pueden asumir que cuentan con la ayuda de anotadores expertos para encontrar equivalencias entre barrios o direcciones, o que cuentan con algoritmos para encontrar las n ubicaciones más cercanas a una propiedad a partir de sus coordenadas geográficas. **NO** es necesario que realicen la implementación.\n",
        "\n",
        "Pueden leer otras columnas del conjunto de AirBnB además de las que están en `interesting_cols`, si les parecen relevantes."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Pandas 1"
      ],
      "metadata": {
        "id": "qMLs3mLyu8Zb"
      },
      "id": "qMLs3mLyu8Zb"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Recordemos que representan los campos que tenemos, segun las notas en Kaggle para los datos de \"Melbourne Housing Snapshot\":\n",
        "\n",
        ">Notes on Specific Variables\n",
        "\n",
        "- Rooms: Number of rooms\n",
        "\n",
        "- Price: Price in dollars\n",
        "\n",
        "- Method:\n",
        "  *   S - property sold\n",
        "  *   SP - property sold prior\n",
        "  *   PI - property passed in\n",
        "  *   PN - sold prior not disclosed\n",
        "  *   SN - sold not disclosed\n",
        "  *   NB - no bid\n",
        "  *   VB - vendor bid\n",
        "  *   W - withdrawn prior to auction\n",
        "  *   SA - sold after auction\n",
        "  *   SS - sold after auction price not disclosed\n",
        "  *   N/A - price or highest bid not available.\n",
        "\n",
        "- Type:\n",
        "\n",
        "  *   br - bedroom(s)\n",
        "  *   h - house,cottage,villa, semi,terrace\n",
        "  *   u - unit,duplex\n",
        "  *   t - townhouse\n",
        "  *   dev site - development site\n",
        "  *   o res - other residential\n",
        "\n",
        "- SellerG: Real Estate Agent\n",
        "\n",
        "- Date: Date sold\n",
        "\n",
        "- Distance: Distance from CBD\n",
        "\n",
        "- Regionname: General Region (West, North West, North, North east …etc)\n",
        "\n",
        "- Propertycount: Number of properties that exist in the suburb.\n",
        "\n",
        "- Bedroom2 : Scraped # of Bedrooms (from different source)\n",
        "\n",
        "- Bathroom: Number of Bathrooms\n",
        "\n",
        "- Car: Number of carspots\n",
        "\n",
        "- Landsize: Land Size\n",
        "\n",
        "- BuildingArea: Building Size\n",
        "\n",
        "- CouncilArea: Governing council for the area\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "HQi0BAhPj9Td"
      },
      "id": "HQi0BAhPj9Td"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Es decir, la lista de campos que tenemos es la siguiente. Ahora exploremos un poco algunos de estos de los cuales tenemos un interes previo en usarlos para la prediccion de precio."
      ],
      "metadata": {
        "id": "gZoO_uKMZoDD"
      },
      "id": "gZoO_uKMZoDD"
    },
    {
      "cell_type": "code",
      "source": [
        "melb_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tOnschpi6Qx9",
        "outputId": "257113c0-7b7b-4e88-87e9-34f9b088d8db"
      },
      "id": "tOnschpi6Qx9",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG',\n",
              "       'Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car',\n",
              "       'Landsize', 'BuildingArea', 'YearBuilt', 'CouncilArea', 'Lattitude',\n",
              "       'Longtitude', 'Regionname', 'Propertycount'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Primero observemos los campos que son directamente relacionados con la propiedad."
      ],
      "metadata": {
        "id": "ACCo558TbCFx"
      },
      "id": "ACCo558TbCFx"
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(13,10),sharey=True)\n",
        "\n",
        "seaborn.histplot(melb_df.Rooms.dropna(),ax=ax[0,0])\n",
        "\n",
        "seaborn.histplot(melb_df.Bedroom2.dropna(),ax=ax[0,1])\n",
        "\n",
        "seaborn.histplot(melb_df.Bathroom.dropna(),ax=ax[1,0])\n",
        "\n",
        "seaborn.histplot(melb_df.Car.dropna(),ax=ax[1,1])\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "4wYTaYEbFqTs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 876
        },
        "outputId": "e5143e40-7df2-43eb-c701-5de52004fb60"
      },
      "id": "4wYTaYEbFqTs",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1300x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Propiedades con mas de 6 Habitaciones:',len(melb_df[melb_df['Rooms']>6]))\n",
        "print('Propiedades con mas de 6 Dormitorios:',len(melb_df[melb_df['Bedroom2']>6]))\n",
        "print('Propiedades con mas de 6 Baños:',len(melb_df[melb_df['Bathroom']>6]))\n",
        "print('Propiedades con mas de 8 Garage:',len(melb_df[melb_df['Car']>8]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t4XdfsPUyh9u",
        "outputId": "ba707394-fcdc-413b-ed61-8da13383be02"
      },
      "id": "t4XdfsPUyh9u",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Propiedades con mas de 6 Habitaciones: 19\n",
            "Propiedades con mas de 6 Dormitorios: 20\n",
            "Propiedades con mas de 6 Baños: 4\n",
            "Propiedades con mas de 8 Garage: 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "seaborn.histplot(melb_df.Landsize.dropna())\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "outputId": "8f741ff2-d726-481b-e2b7-1257542ca893",
        "id": "2bp_WnqOM_Uq"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "id": "2bp_WnqOM_Uq"
    },
    {
      "cell_type": "code",
      "source": [
        "seaborn.histplot(melb_df.BuildingArea.dropna())\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "Wi-zKOFYO74l",
        "outputId": "40ff8e62-4fa2-4e55-c54d-52b7734322da"
      },
      "id": "Wi-zKOFYO74l",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Aca podemos observar que estas dos variables tienen un extremo maximo muy disperso de la media"
      ],
      "metadata": {
        "id": "d4L5AsQ5V7qR"
      },
      "id": "d4L5AsQ5V7qR"
    },
    {
      "cell_type": "code",
      "source": [
        "print('Landsize')\n",
        "print('Maximo:',melb_df.Landsize.dropna().max())\n",
        "print('Promedio:',melb_df.Landsize.dropna().mean())\n",
        "print('---------------------------------------')\n",
        "print('Building Area')\n",
        "print('Maximo:',melb_df.BuildingArea.dropna().max())\n",
        "print('Promedio:',melb_df.BuildingArea.dropna().mean())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O3i-r910WsKc",
        "outputId": "1961f822-ce22-4db9-edb8-dc30baf474f2"
      },
      "id": "O3i-r910WsKc",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Landsize\n",
            "Maximo: 433014.0\n",
            "Promedio: 558.4161266568483\n",
            "---------------------------------------\n",
            "Building Area\n",
            "Maximo: 44515.0\n",
            "Promedio: 151.96764988779805\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Por lo tanto si nos enfocamos en un subconjunto  "
      ],
      "metadata": {
        "id": "B6NvJHp4V7o3"
      },
      "id": "B6NvJHp4V7o3"
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10,6))\n",
        "seaborn.histplot(melb_df.Landsize.dropna(),ax=ax[0])\n",
        "ax[0].set_xlim(0,2000)\n",
        "seaborn.histplot(melb_df.BuildingArea.dropna(),ax=ax[1])\n",
        "ax[1].set_xlim(0,800)\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 568
        },
        "id": "8FxeamjKtfol",
        "outputId": "9a8fa75a-0ae8-4f71-e048-6e35b0f571b0"
      },
      "id": "8FxeamjKtfol",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Propiedades con mas de 1000 Landsize:',len(melb_df[melb_df['Landsize']>1000]))\n",
        "print('Propiedades con mas de 400 BuildingArea:',len(melb_df[melb_df['BuildingArea']>400]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cv15XQcx1xbI",
        "outputId": "23c686f5-8f73-4bbd-a636-93b9aca7b2a2"
      },
      "id": "Cv15XQcx1xbI",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Propiedades con mas de 1000 Landsize: 666\n",
            "Propiedades con mas de 400 BuildingArea: 111\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Podemos ver que hay alrededor de 1900 propiedades que no poseen tierra edificable y que hay menos de 100 propiedades que son solo lote de tierra, es decir que no tienen nada de edificacion."
      ],
      "metadata": {
        "id": "5rduraDub7XK"
      },
      "id": "5rduraDub7XK"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora revisemos esto, con la descripcion de que tipo de propiedad tenemos en los registros"
      ],
      "metadata": {
        "id": "oe0BiRHJl52P"
      },
      "id": "oe0BiRHJl52P"
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10,6),sharey=True)\n",
        "seaborn.histplot(melb_df.Type.dropna(),ax=ax[0])\n",
        "seaborn.histplot(melb_df.Method.dropna(),ax=ax[1])\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 568
        },
        "id": "3WR2uqtPtMxB",
        "outputId": "5b9d64f6-ac0a-4f99-c129-bb2b563ec864"
      },
      "id": "3WR2uqtPtMxB",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Al parecer, con el grafico podemos ver que no hay registros para los tipos :\n",
        "* br - bedroom(s)\n",
        "* dev site - development site\n",
        "* o res - other residential\n",
        "\n",
        "Ni para los metodos:\n",
        "\n",
        "* PN - sold prior not disclosed\n",
        "* SN - sold not disclosed\n",
        "* NB - no bid\n",
        "* W - withdrawn prior to auction\n",
        "* SS - sold after auction price not disclosed\n",
        "* N/A - price or highest bid not available."
      ],
      "metadata": {
        "id": "zkgrMIUKmRDr"
      },
      "id": "zkgrMIUKmRDr"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Corroboremos esto:"
      ],
      "metadata": {
        "id": "kz66CIn91Cww"
      },
      "id": "kz66CIn91Cww"
    },
    {
      "cell_type": "code",
      "source": [
        "counts_type = melb_df['Type'].value_counts()\n",
        "print(counts_type)\n",
        "print('--------------------')\n",
        "counts_method = melb_df['Method'].value_counts()\n",
        "print(counts_method)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PRS32nIpRvPs",
        "outputId": "4a2101a4-f975-4543-8700-d531e0505174"
      },
      "id": "PRS32nIpRvPs",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Type\n",
            "h    9449\n",
            "u    3017\n",
            "t    1114\n",
            "Name: count, dtype: int64\n",
            "--------------------\n",
            "Method\n",
            "S     9022\n",
            "SP    1703\n",
            "PI    1564\n",
            "VB    1199\n",
            "SA      92\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(melb_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7dNgPL4fSGsf",
        "outputId": "6eca2c33-13c6-4a22-f14d-9e23752940ab"
      },
      "id": "7dNgPL4fSGsf",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13580"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(sum(counts_type))\n",
        "print(sum(counts_method))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hVygVuwmSOL0",
        "outputId": "3882b098-0a2a-415b-9fb4-c3f6a6bf30ad"
      },
      "id": "hVygVuwmSOL0",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "13580\n",
            "13580\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Esto nos asegura que no hay valores NaN para estos campos."
      ],
      "metadata": {
        "id": "pwg0loxd3xVQ"
      },
      "id": "pwg0loxd3xVQ"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Luego podemos analizar las fechas de edificacion de las propiedades"
      ],
      "metadata": {
        "id": "Z-MKYEga1Hqr"
      },
      "id": "Z-MKYEga1Hqr"
    },
    {
      "cell_type": "code",
      "source": [
        "seaborn.histplot(melb_df.YearBuilt.dropna())\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "Uf-go3ZMtpAm",
        "outputId": "82e60d43-b5b4-4ec7-bb1e-da1a7f6d12bc"
      },
      "id": "Uf-go3ZMtpAm",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(melb_df.YearBuilt.dropna().min())\n",
        "print(melb_df.YearBuilt.dropna().max())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-y88Eb6u1P5x",
        "outputId": "7a026405-a6c9-4d6d-bd1e-eda4fc333ff2"
      },
      "id": "-y88Eb6u1P5x",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1196.0\n",
            "2018.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Propiedades con menos de 1800 YearBuilt:',len(melb_df[melb_df['YearBuilt']<1800]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RBbJdJHd4Q4T",
        "outputId": "fbeb81f7-b485-49f7-e35c-5fd1e5c8e243"
      },
      "id": "RBbJdJHd4Q4T",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Propiedades con menos de 1800 YearBuilt: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Es decir que la unica propiedad constrida antes de los 1800 es justo el minimo, 1196. Podemos eliminar este dato."
      ],
      "metadata": {
        "id": "DZeToFUv4__l"
      },
      "id": "DZeToFUv4__l"
    },
    {
      "cell_type": "code",
      "source": [
        "nan_count = melb_df['YearBuilt'].isna().sum()\n",
        "print(\"Numero de valores NaN en 'YearBuilt':\", nan_count)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cjZ4MvTn1oJn",
        "outputId": "f276ce2e-7ead-433a-9058-4cb49af79040"
      },
      "id": "cjZ4MvTn1oJn",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Numero de valores NaN en 'YearBuilt': 5375\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Estos datos en un futuro se podrian descartar, conservar o imputar."
      ],
      "metadata": {
        "id": "t0ykJsQ15mDB"
      },
      "id": "t0ykJsQ15mDB"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Estos seran registros sin especificar el año de construccion o seran las propiedades sin edificaciones, es decir con 0/NaN de BuildingArea?"
      ],
      "metadata": {
        "id": "Ft2KB19f4w1d"
      },
      "id": "Ft2KB19f4w1d"
    },
    {
      "cell_type": "code",
      "source": [
        "nan_count = melb_df['BuildingArea'].isna().sum()\n",
        "print(\"Numero de valores NaN en 'BuildingArea':\", nan_count)\n",
        "counts_BuildingArea = melb_df['BuildingArea'].value_counts()\n",
        "print(\"Numero de valores iguales a cero en 'BuildingArea':\", counts_BuildingArea[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8dsO_C-Y6f4_",
        "outputId": "e286d9b0-ccf2-4aea-c3ec-f12ba9f61f23"
      },
      "id": "8dsO_C-Y6f4_",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Numero de valores NaN en 'BuildingArea': 6450\n",
            "Numero de valores iguales a cero en 'BuildingArea': 17\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Esto significa quelos valores NaN de YearBuilt no son todos de propiedades sin edificacion. Seran todos faltantes? Solo los registros con BuildingArea igual a cero seran NaN en el campo YearBuilt?"
      ],
      "metadata": {
        "id": "NiWdec1798US"
      },
      "id": "NiWdec1798US"
    },
    {
      "cell_type": "code",
      "source": [
        "melb_df[melb_df['BuildingArea']==0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "oY8jxNPeTy_c",
        "outputId": "bfd83258-1d62-47a4-d8b2-dbfedf3814c5"
      },
      "id": "oY8jxNPeTy_c",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Suburb            Address  Rooms Type      Price Method  \\\n",
              "4344   North Melbourne       19 Shands La      2    t   841000.0      S   \n",
              "12226     Balwyn North      14 Wanbrow Av      5    h  1950000.0      S   \n",
              "12249         Bundoora      22 Moreton Cr      3    h   814000.0      S   \n",
              "12395    Roxburgh Park     16 Sandover Dr      4    h   570000.0      S   \n",
              "12412        Thornbury  19/337 Station St      3    t   900000.0     VB   \n",
              "13040          Prahran      6 Aberdeen Rd      3    h  1390000.0      S   \n",
              "13207      Huntingdale     33 Beauford St      3    h  1205000.0     SA   \n",
              "13348     Balwyn North        1 Hosken St      5    h  2800000.0      S   \n",
              "13370    Brighton East      60 Cummins Rd      3    h  1650000.0     SP   \n",
              "13380         Bundoora    37 Greenwood Dr      4    h   815000.0      S   \n",
              "13402      Craigieburn       28 Powell St      3    h   412500.0      S   \n",
              "13411           Epping      26 Lowalde Dr      3    h   595000.0      S   \n",
              "13434        Glen Iris          6 Viva St      4    h  2690000.0     PI   \n",
              "13468              Kew      16 Hodgson St      5    h  3450000.0     PI   \n",
              "13472          Kilsyth   17 Birkenhead Dr      3    h   803000.0      S   \n",
              "13499        Moorabbin         7 Walsh Av      3    h  1290000.0      S   \n",
              "13521   Port Melbourne       44 Garton St      4    t  2455000.0     SP   \n",
              "\n",
              "             SellerG        Date  Distance  Postcode  ...  Bathroom  Car  \\\n",
              "4344          Jellis   4/03/2017       2.3    3051.0  ...       1.0  1.0   \n",
              "12226             RT   3/09/2017       9.7    3104.0  ...       3.0  2.0   \n",
              "12249          Barry   3/09/2017      12.1    3083.0  ...       1.0  2.0   \n",
              "12395          Raine   3/09/2017      20.6    3064.0  ...       2.0  2.0   \n",
              "12412         Jellis   3/09/2017       7.0    3071.0  ...       2.0  2.0   \n",
              "13040       Marshall  19/08/2017       4.6    3181.0  ...       2.0  1.0   \n",
              "13207             FN  23/09/2017      12.3    3166.0  ...       2.0  4.0   \n",
              "13348       Marshall  26/08/2017       9.7    3104.0  ...       2.0  2.0   \n",
              "13370         Buxton  26/08/2017      10.3    3187.0  ...       2.0  2.0   \n",
              "13380            Ray  26/08/2017      12.1    3083.0  ...       2.0  1.0   \n",
              "13402             RE  26/08/2017      20.6    3064.0  ...       2.0  1.0   \n",
              "13411  hockingstuart  26/08/2017      19.6    3076.0  ...       1.0  2.0   \n",
              "13434       Marshall  26/08/2017       7.3    3146.0  ...       2.0  2.0   \n",
              "13468            Kay  26/08/2017       5.4    3101.0  ...       2.0  2.0   \n",
              "13472            Max  26/08/2017      26.0    3137.0  ...       1.0  2.0   \n",
              "13499            Ray  26/08/2017      14.3    3189.0  ...       1.0  1.0   \n",
              "13521       Marshall  26/08/2017       3.5    3207.0  ...       3.0  2.0   \n",
              "\n",
              "       Landsize  BuildingArea  YearBuilt  CouncilArea Lattitude  Longtitude  \\\n",
              "4344      215.0           0.0     2000.0    Melbourne -37.79530   144.94370   \n",
              "12226     743.0           0.0     1949.0          NaN -37.80235   145.09311   \n",
              "12249     542.0           0.0     1970.0          NaN -37.70861   145.05691   \n",
              "12395     504.0           0.0     2000.0          NaN -37.61419   144.93448   \n",
              "12412     120.0           0.0     2000.0          NaN -37.76343   145.02096   \n",
              "13040     125.0           0.0     2002.0          NaN -37.85257   145.00296   \n",
              "13207     622.0           0.0     1960.0          NaN -37.90823   145.10851   \n",
              "13348    1173.0           0.0     1960.0          NaN -37.80385   145.09094   \n",
              "13370     623.0           0.0     1920.0          NaN -37.92698   145.02673   \n",
              "13380     525.0           0.0     1965.0          NaN -37.70765   145.05556   \n",
              "13402     197.0           0.0     2012.0          NaN -37.57687   144.91100   \n",
              "13411     536.0           0.0     1980.0          NaN -37.64972   145.04086   \n",
              "13434     647.0           0.0     1910.0          NaN -37.86133   145.04167   \n",
              "13468     668.0           0.0     2006.0          NaN -37.80795   145.01474   \n",
              "13472     862.0           0.0     1970.0          NaN -37.79902   145.32092   \n",
              "13499     580.0           0.0     1970.0          NaN -37.94492   145.04938   \n",
              "13521     123.0           0.0     2010.0          NaN -37.83349   144.94840   \n",
              "\n",
              "                  Regionname Propertycount  \n",
              "4344   Northern Metropolitan        6821.0  \n",
              "12226  Southern Metropolitan        7809.0  \n",
              "12249  Northern Metropolitan       10175.0  \n",
              "12395  Northern Metropolitan        5833.0  \n",
              "12412  Northern Metropolitan        8870.0  \n",
              "13040  Southern Metropolitan        7717.0  \n",
              "13207  Southern Metropolitan         768.0  \n",
              "13348  Southern Metropolitan        7809.0  \n",
              "13370  Southern Metropolitan        6938.0  \n",
              "13380  Northern Metropolitan       10175.0  \n",
              "13402  Northern Metropolitan       15510.0  \n",
              "13411  Northern Metropolitan       10926.0  \n",
              "13434  Southern Metropolitan       10412.0  \n",
              "13468  Southern Metropolitan       10331.0  \n",
              "13472   Eastern Metropolitan        4654.0  \n",
              "13499  Southern Metropolitan        2555.0  \n",
              "13521  Southern Metropolitan        8648.0  \n",
              "\n",
              "[17 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-90be1378-3b29-43ce-a61b-86858305cc0b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Address</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>SellerG</th>\n",
              "      <th>Date</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Postcode</th>\n",
              "      <th>...</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Car</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Regionname</th>\n",
              "      <th>Propertycount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4344</th>\n",
              "      <td>North Melbourne</td>\n",
              "      <td>19 Shands La</td>\n",
              "      <td>2</td>\n",
              "      <td>t</td>\n",
              "      <td>841000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Jellis</td>\n",
              "      <td>4/03/2017</td>\n",
              "      <td>2.3</td>\n",
              "      <td>3051.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>215.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>Melbourne</td>\n",
              "      <td>-37.79530</td>\n",
              "      <td>144.94370</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>6821.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12226</th>\n",
              "      <td>Balwyn North</td>\n",
              "      <td>14 Wanbrow Av</td>\n",
              "      <td>5</td>\n",
              "      <td>h</td>\n",
              "      <td>1950000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>RT</td>\n",
              "      <td>3/09/2017</td>\n",
              "      <td>9.7</td>\n",
              "      <td>3104.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>743.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1949.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.80235</td>\n",
              "      <td>145.09311</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>7809.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12249</th>\n",
              "      <td>Bundoora</td>\n",
              "      <td>22 Moreton Cr</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>814000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Barry</td>\n",
              "      <td>3/09/2017</td>\n",
              "      <td>12.1</td>\n",
              "      <td>3083.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>542.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1970.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.70861</td>\n",
              "      <td>145.05691</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>10175.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12395</th>\n",
              "      <td>Roxburgh Park</td>\n",
              "      <td>16 Sandover Dr</td>\n",
              "      <td>4</td>\n",
              "      <td>h</td>\n",
              "      <td>570000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Raine</td>\n",
              "      <td>3/09/2017</td>\n",
              "      <td>20.6</td>\n",
              "      <td>3064.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>504.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.61419</td>\n",
              "      <td>144.93448</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>5833.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12412</th>\n",
              "      <td>Thornbury</td>\n",
              "      <td>19/337 Station St</td>\n",
              "      <td>3</td>\n",
              "      <td>t</td>\n",
              "      <td>900000.0</td>\n",
              "      <td>VB</td>\n",
              "      <td>Jellis</td>\n",
              "      <td>3/09/2017</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3071.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.76343</td>\n",
              "      <td>145.02096</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>8870.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13040</th>\n",
              "      <td>Prahran</td>\n",
              "      <td>6 Aberdeen Rd</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>1390000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Marshall</td>\n",
              "      <td>19/08/2017</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3181.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>125.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2002.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.85257</td>\n",
              "      <td>145.00296</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>7717.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13207</th>\n",
              "      <td>Huntingdale</td>\n",
              "      <td>33 Beauford St</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>1205000.0</td>\n",
              "      <td>SA</td>\n",
              "      <td>FN</td>\n",
              "      <td>23/09/2017</td>\n",
              "      <td>12.3</td>\n",
              "      <td>3166.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>622.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1960.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.90823</td>\n",
              "      <td>145.10851</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>768.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13348</th>\n",
              "      <td>Balwyn North</td>\n",
              "      <td>1 Hosken St</td>\n",
              "      <td>5</td>\n",
              "      <td>h</td>\n",
              "      <td>2800000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Marshall</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>9.7</td>\n",
              "      <td>3104.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1173.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1960.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.80385</td>\n",
              "      <td>145.09094</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>7809.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13370</th>\n",
              "      <td>Brighton East</td>\n",
              "      <td>60 Cummins Rd</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>1650000.0</td>\n",
              "      <td>SP</td>\n",
              "      <td>Buxton</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>10.3</td>\n",
              "      <td>3187.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>623.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1920.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.92698</td>\n",
              "      <td>145.02673</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>6938.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13380</th>\n",
              "      <td>Bundoora</td>\n",
              "      <td>37 Greenwood Dr</td>\n",
              "      <td>4</td>\n",
              "      <td>h</td>\n",
              "      <td>815000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Ray</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>12.1</td>\n",
              "      <td>3083.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>525.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1965.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.70765</td>\n",
              "      <td>145.05556</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>10175.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13402</th>\n",
              "      <td>Craigieburn</td>\n",
              "      <td>28 Powell St</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>412500.0</td>\n",
              "      <td>S</td>\n",
              "      <td>RE</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>20.6</td>\n",
              "      <td>3064.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>197.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.57687</td>\n",
              "      <td>144.91100</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>15510.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13411</th>\n",
              "      <td>Epping</td>\n",
              "      <td>26 Lowalde Dr</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>595000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>hockingstuart</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>19.6</td>\n",
              "      <td>3076.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>536.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1980.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.64972</td>\n",
              "      <td>145.04086</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>10926.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13434</th>\n",
              "      <td>Glen Iris</td>\n",
              "      <td>6 Viva St</td>\n",
              "      <td>4</td>\n",
              "      <td>h</td>\n",
              "      <td>2690000.0</td>\n",
              "      <td>PI</td>\n",
              "      <td>Marshall</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>7.3</td>\n",
              "      <td>3146.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>647.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1910.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.86133</td>\n",
              "      <td>145.04167</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>10412.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13468</th>\n",
              "      <td>Kew</td>\n",
              "      <td>16 Hodgson St</td>\n",
              "      <td>5</td>\n",
              "      <td>h</td>\n",
              "      <td>3450000.0</td>\n",
              "      <td>PI</td>\n",
              "      <td>Kay</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>5.4</td>\n",
              "      <td>3101.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>668.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2006.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.80795</td>\n",
              "      <td>145.01474</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>10331.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13472</th>\n",
              "      <td>Kilsyth</td>\n",
              "      <td>17 Birkenhead Dr</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>803000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Max</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>26.0</td>\n",
              "      <td>3137.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>862.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1970.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.79902</td>\n",
              "      <td>145.32092</td>\n",
              "      <td>Eastern Metropolitan</td>\n",
              "      <td>4654.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13499</th>\n",
              "      <td>Moorabbin</td>\n",
              "      <td>7 Walsh Av</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>1290000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Ray</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>14.3</td>\n",
              "      <td>3189.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>580.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1970.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.94492</td>\n",
              "      <td>145.04938</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>2555.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13521</th>\n",
              "      <td>Port Melbourne</td>\n",
              "      <td>44 Garton St</td>\n",
              "      <td>4</td>\n",
              "      <td>t</td>\n",
              "      <td>2455000.0</td>\n",
              "      <td>SP</td>\n",
              "      <td>Marshall</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>3.5</td>\n",
              "      <td>3207.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>123.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-37.83349</td>\n",
              "      <td>144.94840</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>8648.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>17 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90be1378-3b29-43ce-a61b-86858305cc0b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-90be1378-3b29-43ce-a61b-86858305cc0b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-90be1378-3b29-43ce-a61b-86858305cc0b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1487390b-e078-4935-9705-f0cbdcfc9fad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1487390b-e078-4935-9705-f0cbdcfc9fad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1487390b-e078-4935-9705-f0cbdcfc9fad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Al parecer todos los registros que tiene BuildingAre=0 tienen un año en YearBuilt, es decir que pueden corresponder a el año donde se \"escrituro\" el lote."
      ],
      "metadata": {
        "id": "GKVl4Y2vVvbG"
      },
      "id": "GKVl4Y2vVvbG"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Por lo tanto hay datos faltantes en ambos campos, en Building Area y en YearBuilt que no tienen relacion."
      ],
      "metadata": {
        "id": "XXzbtp7QVvZx"
      },
      "id": "XXzbtp7QVvZx"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Continuemos viendo mas a fondo el campo YearBuilt observando un subconjunto menor al rango original"
      ],
      "metadata": {
        "id": "PYyKsJ2tgB6y"
      },
      "id": "PYyKsJ2tgB6y"
    },
    {
      "cell_type": "code",
      "source": [
        "seaborn.histplot(melb_df.YearBuilt.dropna())\n",
        "plt.xlim(1850, 2024)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "BGZGr5vPTydX",
        "outputId": "425cf748-db49-49a5-aeef-2a4baa1c2df6"
      },
      "id": "BGZGr5vPTydX",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Luego podemos hacer diferentes analisis y elecciones que representen la localizacion de la propiedad. En este caso, elegiremos los \"Postcodes\" y los \"Suburb\"."
      ],
      "metadata": {
        "id": "a6HSj_q-bXV_"
      },
      "id": "a6HSj_q-bXV_"
    },
    {
      "cell_type": "code",
      "source": [
        "seaborn.histplot(melb_df.Postcode.dropna())\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "4vkRoNJYtYeV",
        "outputId": "5aab4e5a-d100-4957-e72c-19da3d8f6576"
      },
      "id": "4vkRoNJYtYeV",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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OlXsts7P50lSz549FR8frzVr1nhsu379ejkcDtntdnXt2tW1PDo6Wn5+fsrOztb69evdrhR2cm6zV69exR4bqgafAQQAVCfV/lSv86jatm3btGfPHo9t/vOf/0iS2rVr51o2YsQISVJ8fLzHo35xcXGSpEGDBikwMNC1vE6dOrr22mslyeOtWLZt26ZVq1a59YGLm/MzgCHh7V0BEACAS1G1D37XXHONQkNDlZOTo5EjR7rusyedv7jjscce08qVKyVJd955p2tdTEyMBg8erNzcXI0aNUrp6emSJGOM5s2bpwULFsjHx0dTp04t0Oe0adNks9m0YMECzZs3z/XkkPT0dN16663Ky8vT8OHDFRUVVZG7DgAA4KbaB7/atWvr448/Vu3atfXf//5XHTp0UKtWrRQVFaUGDRpo1qxZks5f+Tts2DC32vfee0+RkZFKSEhQRESEYmJiFB4errFjx8pms+nVV1/1eLuV7t27a/bs2ZLOX5kbHh6umJgYRUREKCEhQe3atdM777xT8TsPAACQT7UPfpI0cOBAbdq0SePHj1fbtm114MABpaSkqG7duho2bJi++uorvfHGGwXqGjZsqISEBE2ZMkXh4eHavHmzTp8+rUGDBmnlypWaMGGC1z4nTZqkb7/9VoMGDdLp06e1efNmhYeHa8qUKdqwYYMaNGhQkbsMAABQQLW/uMOpVatWmjNnTonr6tSpoxkzZmjGjBklrh0wYIAGDBhQ4joAAICKYIkjfgAAACD4AQAAWAbBDwAAwCIIfgAAABZB8AMAALAIgh8AAIBFEPwAAAAsguAHAABgEZa5gTMqj8PhUHJysuvnlJQUmTxThSMCAAASwQ8VIDk5WePmLlVQWEtJUnryT6rbumuVjgkAABD8UEGCwloqJLy9JCkjfXfVDgYAAEjiM34AAACWQfADAACwCIIfAACARRD8AAAALILgBwAAYBEEPwAAAIsg+AEAAFgEwQ8AAMAiCH4AAAAWQfADAACwCIIfAACARRD8AAAALILgBwAAYBEEPwAAAIsg+AEAAFgEwQ8AAMAiCH4AAAAWQfADAACwCIIfAACARRD8AAAALILgBwAAYBEEPwAAAIsg+AEAAFgEwQ8AAMAialb1AICSyss9p5SUFNfPnTt3lp+fXxWOCACASwPBD5eczEP79NLyLIWm5CgjfbfmjpNiY2OrelgAAFz0CH64JAU2aqGQ8PZVPQwAAC4pfMYPAADAIgh+AAAAFlGm4PfMM89o9uzZxW7/+uuv65lnnilLlwAAACilMgW/p59+Wi+99FKx27/yyiv6+9//XpYuAQAAUEqc6gUAALCISg1+x44dk91ur8wuAQAA8P+rtOC3aNEinTp1Si1atKisLgEAAJBPie7j99prr+m1115zW3b48GG1atXKa40xRidOnFBGRoZsNpuuv/760o0UAAAAZVKi4HfixAnt3r3bbVlubm6BZd4MGDBATz75ZEm6BCzF4XAoOTnZbRmPpAMAlJcSBb/hw4erZcuWks4fybvnnntUt25dvfrqq15rfHx8FBQUpMsuu0ytW7cuy1hRTVz4rN2UlBSZPFOFI7p4JCcna9zcpQoKaylJPJIOAFCuShT8oqKiFBUV5fr5nnvuUUBAgO66665yHxiqr/zP2pWk9OSfVLd116od1EUkKKwlj6MDAFSIMl3ckZeXp/3795fXWCrF8uXLdeONN6pJkyby9/dX48aN1bt3b02dOlXnzp0r0D4nJ0ezZs1SVFSUateureDgYPXr109Lliwpsq+kpCTdcsstaty4sex2u1q1aqWJEyfq8OHDFbFrlxTns3ZDwturdoMmVT0cAAAswTL38Tt37pxGjx6t66+/Xp9//rlq1qzpCnMbNmzQjBkzlJWV5VaTlZWl/v3767HHHtPvv/+uNm3aqH79+lq9erVuuukmPf744177W7JkiS6//HItXLhQxhh16tRJhw4d0uuvv66oqCjt3LmzoncZAADATYlO9RYmLy9P27Zt07Fjx5STk1No2z59+pRXt8X24IMP6h//+Ie6d++uuLg4RUdHu9adOXNG3333nfz9/d1qJk+erLVr1yoiIkIrVqxQu3btJElLly7VzTffrBdeeEG9e/fWkCFD3OrS0tI0evRo5eTkaNq0aXryySdVs2ZNnTx5UqNGjdLXX3+tW265RevXr5fNZqv4nQcAAFA5BL/09HQ98cQTWrx4sc6ePVtke5vN5vGUakWKj4/X/Pnz1bJlS61cuVJ16tRxW1+rVi0NHTrUbdnBgwf19ttvS5LeffddV+iTpKFDh+qxxx7T9OnT9fTTTxcIfrNmzdKZM2fUp08ft2cT161bV//85z8VERGhDRs26KuvvipQCwAAUFHKdKp3//796tGjhxYsWKAzZ87IGFPkV15eXnmNvdhefvllSdIjjzxSIPR5s3TpUjkcDkVGRqpfv34F1o8dO1aSlJiYqB07dritW7x4sSRpzJgxBeqCg4M1cuRISdLChQuLvxMAAABlVKbg9/TTTystLU2BgYF6/fXXtWfPHuXk5CgvL6/Qr8qUlZWl//znP5KkgQMHavPmzZo0aZKuueYaDRkyRE8++aT27NlToG7dunWSpCuvvNLjdps2baqIiAi3tpK0d+9epaWlSfJ+Stu5zfx1AAAAFa1Mp3pXrFghm82md999VyNGjCivMZWrX3/91fWZwzVr1mj8+PFyOByu9V999ZVefPFFvf/++7r11ltdy7du3SpJhd57sHXr1tq1a5e2bNlSoM7Pz0/NmjXzWidJO3fuVE5Ojnx9fUu5dwAAAMVXpuB3+PBh1axZU8OHDy+n4ZS/9PR01/fjxo1TTEyM5syZo6ioKKWmpur//u//tHDhQt11111q376966KPY8eOSZJCQkK8btu57vjx465lzrrg4GCvF2446/Ly8pSRkaH69et7bBcXF6d58+YVaz/z3xAZAADAkzIFv9DQUGVkZKhmzXK7OLjcZWZmur6vVauWVqxYoeDgYElSmzZt9Mknn2jr1q3auHGjZsyY4fp8nvPWLoU9Kst5FXD+i1pKUndh7YXS09OVmJjodT0AAEBJlCmxDRw4UB9++KG2bdumyMjI8hpTubLb7a7v7777blfoc/Lx8dHDDz+su+66S//5z3+Ul5cnHx8fV13+08IXys7OliQFBAQU6K84dRfWXigsLEwxMTFe1+eXkpJSrKuqAQCAdZUp+E2ZMkWLFy/W5MmTi/Uki6qQP+h16NDBYxvn8lOnTuno0aNq2LChq8556taT/Kd1L+zv+PHjMsZ4PN3rrHM+x9ibsWPHuq4eLkpsbCxHBwEAQKHKdFVvmzZttHTpUn3//fe6+uqrFR8fr9OnT5fX2MpF+/Z/PvPU2+nX/EcFnVcdt23bVpK0fft2r9t23sbF2Tb/9w6HQ3v37i20LiIiolpc2JGXe04pKSlKSEhQQkKCUlJSZPJMVQ8LAABcoExH/GrUqOH6ftWqVVq1alWRNZV9A+emTZsqPDxce/bs8fqYNGcQs9vtrgstevbsqffff19r1671WJOWlqZdu3a52jq1aNFCTZo00f79+7VmzRrdfvvtBWrXrFkjSerVq1fpd+wiknlon15anqXQlPNXT6cn/6S6rbtW7aAAAEABZTriV5wbNnv6qmy33HKLJOnjjz/2GDrfe+89SVLfvn1dF6oMGzZMvr6+2rZtm+Lj4wvUxMXFSZKio6PVpk0bt3U33XSTJHm8Ivf48eNatGiRJLlu5FwdBDZqoZDw9goJb6/aDZpU9XAAAIAHZTri5ykQXYz+9re/KS4uTrt27dL48eP16quvym63yxijOXPm6Msvv5TNZtPjjz/uqmnUqJHGjh2rN954Q/fee6/bs3q//PJLvfjii5Kkp556qkB/jz76qObPn68ffvhBTz75pJ566inVqFFDJ0+e1G233aaTJ08qOjqax7UBAIBKVabg17dv3/IaR4Vq2LChFi9erKFDhyouLk6ffvqp2rZtq3379ik9PV02m00vvviirrrqKre6F198UQkJCfr555/VqVMnXXbZZcrMzHSdGn7kkUc0bNiwAv01b95cH330kW699VZNnz5dcXFxat68uf744w+dPn1ajRo10sKFC73e5w8AAKAilOlU76Vk4MCB+vXXX3X33XerTp062rhxo3JycjR06FDFx8frb3/7W4GagIAArV69WjNnzlTHjh21detWHTlyRH379tXixYv10ksvee1vxIgR+uWXX1xPNElOTlbDhg01fvx4bdq0qcDpYQAAgIp28d55uQJERkbq/fffL1GNn5+fJk+erMmTJ5e4v5iYGNfn+QAAAKpamYLfDz/8UKq6Pn36lKVbAAAAlEKZgt9VV11V4s+pVfbtXAAAAHBemU/1lvT2LFVxOxcAAACU8eKOvLy8Qr9OnDihb775Rn379lX9+vX1/fffu56MAQAAgMpVoVf1BgUF6eqrr9aqVav0l7/8RUOHDnU97QIAAACVq1Ju5+K8T97Jkyc1ffr0yugSAAAAF6i0+/i1a9dOQUFB+vbbbyurSwAAAORTaffxy8nJ0dmzZ5WVlVVZXQIAACCfSjvi9+9//1s5OTkKDQ2trC4BAACQT4Ue8XM4HNq7d68+++wzPffcc7LZbBo0aFBFdgkAAAAvyhT8atSoUey2xhg1bdpUTz31VFm6BAAAQCmV6VSvMaZYX3a7XXfccYfWrVunJk2alNfYAQAAUAJlOuIXHx9f+MZr1lRwcLDatm2rmjUr7ToSAAAAeFCmNNa3b9/yGgcAAAAqGIfhUK05HA4lJye7LevcubP8/PyqaEQAAFSdcg9+e/bs0aFDhyRJoaGhCg8PL+8ugGJLTk7WuLlLFRTWUpKUkb5bc8dJsbGxVTswAACqQLkEv/T0dD3//PP69NNPdfToUbd19evX12233abJkycrLCysPLoDSiQorKVCwttX9TAAAKhyZb6B848//qguXbpo7ty5OnLkSIEreo8cOaI5c+YoKipKP/30U3mMGQAAAKVQpiN+hw4d0tChQ3X8+HEFBQXpgQce0NVXX61mzZpJkvbt26fvvvtOcXFxOnLkiIYOHarNmzfz9A4AAIAqUKbg9/LLL+v48eNq3769vv32WzVt2tRtfbt27TRgwABNmDBBAwcO1JYtWzR79mzNnDmzTIMGAABAyZXpVO+yZctks9n0zjvvFAh9+TVp0kTvvPOOjDH66quvytIlAAAASqlMwW/37t2qXbu2evfuXWTb3r17q3bt2tqzZ09ZugQAAEApVfp9/Iwxld0lUGm4byAA4GJWpuDXsmVLpaSkaN26derZs2ehbX/++WedPn1aHTt2LEuXwEWN+wYCAC5mZTrVO2jQIBljNGbMGB0+fNhru0OHDmnMmDGy2Wz6n//5n7J0CVz0nPcNDAlv7wqAAABcDMp0xO9vf/ub3n33Xf3+++/q0KGDHnzwQQ0YMMB1oce+ffu0cuVKxcXF6ejRo6pXr54eeeSRchk4AAAASqZMwa9Ro0b6/PPPdcMNN+jYsWN67rnn9NxzzxVoZ4xRvXr19O9//1uNGjUqS5cAAAAopTI/uaNv377atGmTxo4dq+Dg4AJP7ggODtaDDz6o5ORk9enTpzzGDAAAgFIol6t6mzVrprfeektvvfWWdu3apUOHDkmSQkNDFRERUR5dAAAAoIxKHPzOnTunM2fOSJKCgoIKrI+IiCgQ9jIyMiRJtWvXVo0aNUozTgAAAJRRiU/1jho1SsHBwbr77ruLXXPPPfeUuAYAAADlq0TB7/fff9eSJUsUFBSk9957r9h177zzjoKCgvTJJ59o27ZtJR4kAAAAyq5Ewe/jjz+WJP31r39VvXr1il0XHBysCRMmKC8vT//4xz9KNEAAAACUjxIFvzVr1shms+mmm24qcUc33nijJGn16tUlrgUAAEDZlSj4bd26VT4+PoqOji5xR126dJGPj4/++OOPEtcCAACg7EoU/E6cOKF69erJZrOVvCMfH9WrV08nT54scS0AAADKrkTBr1atWjp16lSpO8vMzFRAQECp6wEAAFB6JQp+oaGhysnJ0Y4dO0rc0Y4dO+RwOBQaGlriWgAAAJRdiYJfz549JUlLliwpcUefffaZJOnyyy8vcS0AAADKrkTBb/DgwTLGaNasWUpPTy923f79+/XSSy/JZrNp8ODBJR4kAAAAyq5Ewe+mm25SZGSkjh49qmuvvbZYp3y3b9+u6667TkeOHFGbNm00cuTIUg8WAAAApVei4Ofj46MPP/xQfn5++v3339WlSxeNHTtWK1as0IEDB+RwOORwOHTgwAGtWLFCY8aMUdeuXfXbb7/J399fH3zwQamuCAYAAEDZ1SxpQc+ePbVw4UKNHj1aGRkZmj9/vubPn++1vTFGgYGBWrBggXr16lWmwQIAAKD0SnTEz2nIkCHasGGDRo4cKZvNJmOMxy+bzaaRI0cqISFBw4YNK++xAwAAoARKfMTPqU2bNvrXv/6lQ4cOKT4+Xr///ruOHj0qSapfv746deqkfv36cfsWAACAi0Spg59TaGiobrnllvIYCwAAACpQqU71AgAA4NJD8AMAALAIgh8AAIBFWDL4LV++XDabTTabTS1btvTaLjMzU1OnTlX79u0VEBCghg0bavDgwVq9enWRfcTHx2vw4MFq2LChAgIC1L59e02bNk2nT58uvx0BAAAoAcsFv8zMTD344INFtjty5Ii6deumGTNmaPfu3erQoYPsdruWLVum/v3768033/RaO2fOHA0YMEDLli2T3W5Xhw4dtHv3bj377LPq3r27jh07Vp67BAAAUCyWC35TpkxRampqkfcVvPfee7VlyxbFxsZq586dSkxMVGpqquLi4mSM0UMPPaSNGzcWqEtISNCkSZMkSXFxcUpNTVViYqJ27typ2NhYpaSk6P7776+APQMAACicpYLfunXrNHfuXA0bNkzDhw/32i4pKUlLly6Vj4+PPv30UzVp0kSSZLPZNGbMGI0ePVq5ubmaPn16gdrp06crLy9Po0eP1pgxY1yPqGvSpIk++eQT+fj4aMmSJdq0aVOF7CMAAIA3lgl+OTk5uv/++1WrVi298cYbhbZdvHixJKl///5q06ZNgfVjx46VdP6zgvk/s5eZmamvv/5akjRmzJgCdZGRkerfv78kadGiRaXbEQAAgFKy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1VcbSSYoKMjjG7XV57y0r/H89uzZYwIDA01MTIzrjdNb8GO+Szfff/zxhwkMDDQ1a9Y0L7zwgjlz5ozb+pSUFPPLL78UqNu3b5+pVauWkWSmTZtmcnJyjDHGnDhxwlx33XVGkunWrZvr3yG/hx56yEgyERER5o8//nAt/+KLL1y/WJcuXVqqeagspZnvH374wRVUnn76abfaxMRE12v8zjvvLNCf1V/fF5owYYKRZIYNG1Zo8KtuvzMJftXUL7/84npz2Lx5s2t5YmKikWR8fHzMtm3bCtSNHj3a64vR+T+HpzeUrVu3Gh8fHyPJ/Prrr27rytLnpcTbnB85csRrzYkTJ0zDhg2NJPPKK68UWM+ce+dtvi/0P//zP6ZGjRpmw4YNJjw8vNDgx3x7V9h89+nTx0gyc+bMKdE2J06caCSZPn36FFh37NgxU7duXY8B7sCBA8bPz89IMqtWrSpQO23aNCPJxMTElGg8FxNv8+082te1a1ePdQsWLDCSTP369Qus4/X9p59//tn4+PiYYcOGmffff99r8KuOvzMJftVURkaG601jw4YNruVTpkwxkszAgQM91q1du9Z1qiYzM9O1/NSpU66/oteuXeuxduDAgUaSmTp1qtvy0vZ5qfE250Vx/mX3wAMPuC1nzgtXnPn++OOPjSQzceJEY4wpNPgx34XzNt///e9/jSTTqFEj1xG74mratKmRZP7xj394XH/fffcZSeaOO+5wWz5v3jwjyURGRnqs27dvn2us27dvL9GYLhbe5nvcuHFGkrnppps81v3888+uswj58fr+k8PhMJdddpkJDAw0e/fuLTT4VcffmVzcUU2tXbtWkhQYGKh27dq5lq9bt06S1KdPH491PXr0kL+/v7KysrRx40bX8qSkJGVnZ8vf3189evTwWHvllVe69VHWPi813ua8KGfPnpUk1apVy205c164oub76NGjmjRpkpo1a6bp06cXuT3mu3De5vuLL76QJF111VWSpHfffVcjR47UwIEDddddd2nRokXKy8srsL29e/cqLS1Nkvd5K2q+nesv1LRpU0VERHisvVR4m+/o6GhJUkJCgrKzs73WXfga5vX9p+eff16//fabpk+frmbNmhXatjr+ziT4VSN5eXnav3+/PvjgA919992SpJkzZyowMNDVZuvWrZKk1q1be9yGr6+vmjdvLknasmVLgboWLVrI19fXY61zm/nrytLnpaA4c16Y/fv36/vvv5dU8JcYc15QSeb74Ycf1uHDh/X666+rTp06RW6b+S6oOPO9YcMGSVJwcLCuvPJK3XfffVq8eLFWrlypjz76SDfffLP69eunEydOuG3bOWd+fn5ef/k653Pnzp3KyckpUOttvvOvq27zPXr0aF122WXavXu3RowYoaSkJJ09e1b79+/XG2+8oSeffFJBQUF64YUX3LbN6/u8lJQUPffcc4qJidGECROKbF8df2cS/KqBV199VTabTTVq1FDTpk31//7f/1PLli21YsUKjRs3zq3tsWPHJEkhISFet+dcd/z48TLXlbX2YlWSOS/M+PHj5XA41LFjRw0ZMsRtHXP+p5LO93/+8x8tWLBAQ4cO1Q033FCsPpjvP5VkvtPT0yWdP9K3YcMGvfzyyzpy5IgyMzP1r3/9SyEhIfrhhx903333udU55yw4OFg2m83jOJxzlpeXp4yMjAK1VpxvPz8/rV27VuPGjdMPP/ygmJgY1apVS02bNtWECRM0ZMgQrV+/XjExMW51vL4lY4zuv/9+5eTkKC4uTjVq1Ciypjr+ziT4VQNNmzZV7969dfnllyssLEw2m00bN27URx99VOCv7KysLEnn3zy88ff3l/TnKciy1JW19mJVkjn3ZubMmfr888/l6+urDz/8sMCbEHP+p5LM95kzZ/TAAw+odu3aeuONN4rdB/P9p5LMd2ZmpqTz99SbMmWK/vd//1f169dX7dq1dfPNN2v+/PmSpM8++0zJycmuupLMmVR+70cXo5K+nxw6dEj79+/X2bNnFRQUpK5du7qOmn799df6+OOPC5xe5/UtvfXWW/rxxx81fvx4devWrVg11fF3JsGvGhg5cqTWrl2rdevWaf/+/dq4caMuv/xyffLJJ+rXr59yc3Ndbe12uyTJ4XB43Z7zcyMBAQFlritr7cWqJHPuyYcffqgpU6bIZrPpvffe8/gmxJz/qSTzPXXqVO3atUvPPPOM63RIcTDffyrNe4okTZo0qcC2brjhBrVq1UqS9M033xSoK86cSeX3fnQxKsl8b9myRZdffrn+/e9/a9asWTp27JiSkpK0d+9erVu3Tg0aNND06dP18MMPu/Vh9dd3WlqannjiCTVt2lTPPvtsseuq4+9Mgl811KVLFy1btkwNGjTQxo0b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SZo4caIyMjL0zTffSJIeffRR1apVq0BtdHS0brzxRknSJ5984rbOeSuW9PT0ch/ze++9J0m67777FB0dXayaTZs2KSUlRZI0depU1ahRo0CbIUOGqEePHpLc98cYo3/961+SpAceeEChoaEFai+77DKNGDHCY99ZWVn65z//KUmaPHmy1zHeeeedkqRff/212J8ZBFA+CH4Aqq38F00EBwdr4MCBSkhIkCTdcccd+r//+z8lJia6buY8cOBAr9ty3gZm06ZNysnJcS0fPHiwJOmuu+7SI488ou+//15nzpwp89j37NnjCqhDhgwpdt2GDRskSTVr1lTfvn29tnPuj7O9JO3atUvHjh2TJPXv399rrbd1CQkJysrKkiRdc801aty4scevTp06uWr27NlTzD0DUB64gTOAaiv/DZz9/f3VoEEDRUdH6/bbb1e/fv0kSYcOHXK1adq0qddtNWvWTJJ07tw5HTt2zLXtF198Udu3b1d8fLxmz56t2bNnq0aNGuratauuv/56jRkzptDtenPgwAHX9+Hh4cWuc+5PgwYNCr05tXN/8u9/SefiQs6gKqnYR/LKIyQDKD6CH4BqK394qij16tXTqlWrtHbtWn355Zf68ccftWHDBiUkJCghIUGzZs3Su+++q1tvvbVE270Un4Obm5vr+v7s2bOy2+1VOBoAnnCqF4Cl5f8c2759+7y2c66rWbOmQkJCCqy/4oor9MILL2jt2rU6ceKEvvjiC3Xu3Flnz57VPffcU+LPsjVu3Nj1fUlOhzr358iRI4Xeq8+5P/n3P//3aWlpXmu9rSvtmAFUHoIfAEuLiYmRj8/5t8KVK1d6bffdd99JkqKiouTr61voNu12u4YOHaolS5ZIOn/Rw9q1a13rnf1Jcn2+8EItWrRwnW798ssvi7En53Xr1k3S+VPS33//vdd2zv3p3r27a1lERIQr1MbHx3utXbVqlcfl3bt3l5+fX4nHDKDyEPwAWFq9evV07bXXSpJmzZrl8TNnv/76qz777DNJcjtle+7cOeXl5XnddkBAgOv7/GEvKCjI9f2JEye81t97772SpPnz5yspKamIPTmvS5cu6tixoyTp2WefdTv96rR8+XL98ssvktz3x2az6eabb5Ykvf322zpy5EiB2s2bN2vx4sUe+65du7Zuu+02SdILL7yg1NTUQsfqvJAEQCWq4tvJAEC5Ks4NnC+U/wbOV1xxhdsNnJctW+a679+FN3DetWuXadWqlZk+fbpJTEw0OTk5rnW//vqrueqqq4wkU7t2bXP06FG3Pps2bWokmQkTJrjV5ZeRkVHgBs4nT550rd++fbv5+9//XuDegvlv4Dx8+HDXDZwdDof5xz/+4bpBs6cbOO/Zs8d1g+euXbua//73v8YYY/Ly8sw333xjWrRoUeQNnJ3z1aRJE/PRRx+ZjIwM1/pDhw6ZxYsXm+HDh5trrrnG+z8KgApB8ANQrZQm+BljzKeffmr8/PxctUFBQa7HlMnLI9vy34hZ//+jyUJCQty24+fnV+AmycYYM336dFcbf39/07x5cxMeHm5uueUWt3Y7duwwHTt2dLX18fExISEhJX5kW7169dzG1blzZ5OWluZxLr766qsCj69z3qi6OI9s27x5s2nbtm2BMdeuXdttvgYOHFjMfx0A5YXgB6BaKW3wM8aYbdu2mbFjx5rWrVsbf39/ExgYaLp27Wr+/ve/ux1pc3I4HGbp0qXm4YcfNj179jTNmjUzfn5+platWqZjx45m3LhxZuvWrR77ys3NNa+99prp1q2bCQwMdIW0vn37FmibnZ1t3nzzTXPVVVeZ+vXrG19fX9OkSRPTq1cvM336dLN7926PfSQkJJg77rjDNG/e3Pj5+Zm6deuanj17mldeecVkZWUVOhe///67GTVqlAkNDTX+/v6mZcuWZvz48ebAgQMmPj6+yDnOysoycXFx5pprrjGhoaGmZs2aplatWqZNmzZm5MiRZt68eebYsWOFjgFA+bMZ4+WTxQAAAKhWuLgDAADAIgh+AAAAFkHwAwAAsAiCHwAAgEUQ/AAAACyC4AcAAGARBD8AAACLIPgBAABYBMEPAADAIgh+AAAAFkHwAwAAsAiCHwAAgEUQ/AAAACzi/wPBWsloCW+RbAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se puede ver que hay una mayor concentracion de propiedades en la zona centrica y cercanas a Melbourne, que son los postcodes desde 3000 al 3200.(Recordando la fuente de esta informacion el [servicio postal de Melbourne](https://auspost.com.au/postcode/melbourne))\n",
        "\n",
        "Podemos analizar esta concentracion mas a fondo"
      ],
      "metadata": {
        "id": "Jdc_joKrbuj7"
      },
      "id": "Jdc_joKrbuj7"
    },
    {
      "cell_type": "code",
      "source": [
        "seaborn.histplot(melb_df.Postcode.dropna())\n",
        "plt.xlim(3000, 3200)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "n-q_jNc0ds92",
        "outputId": "b5557a11-904c-4721-fd21-e904a5eea299"
      },
      "id": "n-q_jNc0ds92",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAooAAAHLCAYAAABPmLnYAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABM/ElEQVR4nO3de1hVZf7//9dGhY0iCioKHhAVPGUIqGmWpnbyk6dKyywnP/UJarTTtynL0WpSy9LMqbHC7Og0NurYDKXWlGKjlZmASkmeFUPUPBIqbIT794e/vUfaayOHzUF4Pq6L68K11vu+78Ut7pdr73UvmzHGCAAAAPgNn+oeAAAAAGomgiIAAAAsERQBAABgiaAIAAAASwRFAAAAWCIoAgAAwBJBEQAAAJbqV/cA4B3t27fXkSNHZLfbFRERUd3DAQAApbB3717l5eUpJCRE+/btq+7huLGx4Hbt0LBhQ509e7a6hwEAAMrB399fZ86cqe5huOGKYi1ht9t19uxZ+fv7q2vXrtU9HAAAUAoZGRk6e/as7HZ7dQ/FEkGxloiIiNCJEyfUtWtXpaSkVPdwAABAKcTFxSk1NbXGfmyMm1kAAABgiaAIAAAASwRFAAAAWCIoAgAAwBJBEQAAAJYIigAAALBEUAQAAIAlgiIAAAAsERQBAABgiaAIAAAASwRFAAAAWCIoAgAAwBJBEQAAAJYIigAAALBUv7oHAKDucTgcSk9P93q7PXr0kK+vr9fbBYC6iqAIoMqlp6dr4vwkBYa291qbOdn7NH+iFBcX57U2AaCuIygCqBaBoe0VHN6luocBACgBn1EEAACAJYIiAAAALBEUAQAAYImgCAAAAEsERQAAAFgiKAIAAMASQREAAACWLpmgeOjQIS1atEgPPfSQ+vXrJ39/f9lsNl1zzTUXrS0oKNDs2bMVHR2tRo0aKSgoSIMGDdLy5csvWpuWlqbbb79drVq1kt1uV4cOHfTwww/rl19+qbQ+AQAAaoJLZsHtjz76SI8++miZ6/Ly8nTddddp/fr1qlevnrp3767Tp09r7dq1Wrt2rSZPnqxZs2ZZ1i5fvlxjx45VQUGBQkJC1L17d23fvl2vvvqqli5dqvXr16tDhw5e7RMAAKCmuGSuKAYGBuraa6/VU089peXLl2vatGmlqps8ebLWr1+viIgI/fjjj9qyZYt27dqlf/3rX/Lz89OLL76oTz75xK0uKytL48ePV0FBgaZNm6asrCylpKQoKytLN954o7Kzs3X77bfLGOO1PgEAAGqSSyYo3nPPPfriiy/0/PPP6+abb1ZISMhFaw4fPqw333xTkvT222+rc+fOrn0jRozQE088IUl69tln3Wpnz56tM2fOaMCAAXruuedUv/75i69NmjTR3/72NzVp0kSbNm3Sp59+6rU+AQAAapJLJiiWR1JSkhwOhyIjIzVo0CC3/QkJCZKk1NRU7d69u9i+ZcuWSZLi4+Pd6oKCgjRmzBhJ0pIlS7zWJwAAQE1Sq4Pihg0bJElXX3215f7WrVsrIiKi2LGSdODAAWVlZUmSBgwYYFnrbPPCuor0CQAAUNNcMjezlMeOHTskSR07dvR4TMeOHbV3715t377drc7X11dt2rTxWCdJe/bsUUFBgRo0aFChPq0kJiZqwYIFJR7jlJGRUarjAAAASqtWB8Xjx49LkoKDgz0e49x34sQJt7qgoCDZbLYS64qKipSTk6NmzZpVqE8r2dnZSk1NLfEYAACAylKrg2JeXp6k81cGPfHz85MknT17tlx1Fam9sM5KaGioYmNjSzzGKSMj46LtAQAAlEWtDop2u12S5HA4PB6Tn58vSfL39y9XXUVqL6yzkpCQ4Lr55WLi4uK4+ggAALyqVt/MEhQUJOm/bwdbufBt5t/WnThxwnKdxAvrfHx8FBgYWOE+AQAAappaHRSjoqIkSbt27fJ4jHOJGuexF37vcDh04MCBEusiIiJcN7JUpE8AAICaplYHxb59+0qS1q9fb7k/KytLe/fuLXasJLVr105hYWGSpHXr1lnWOrf369fPK30CAADUNLU6KI4cOVINGjTQzp07lZyc7LY/MTFRkhQTE6NOnToV23frrbdKkuXyNCdOnNDSpUslybXwtjf6BAAAqElqdVBs2bKl62aQe++9t9i6hZ988oleeuklSdIzzzzjVvv444/L399f//nPf/T000+rsLBQknTq1CmNGzdOp06dUkxMjIYPH+61PgEAAGqSS+au5wMHDigmJsb1Z+cyNF9//bWaN2/u2v7EE0+4nqcsSS+99JJSUlL07bffqnv37rrsssuUm5vr+pzgY489ppEjR7r117ZtW33wwQe64447NH36dCUmJqpt27b66aefdPr0abVs2VJLliyxXGexvH0CAADU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qeoFt1u3bq3w8HDt37/f42PznMHNbre7bizp27ev3n33Xa1fv96yJisrS3v37nUd69SuXTuFhYXp4MGDWrdune6880632nXr1kmS+vXrV/4Tu4TlHvlZc1bmKSSj5Cf4lEV2+jdq0rGn19oDAAAVXEexNAtsW31Vtdtvv12S9OGHH1qG1HfeeUeSNHDgQNeNOSNHjlSDBg20c+dOJScnu9UkJiZKkmJiYtSpU6di+2699VZJsrxj+cSJE1q6dKkkuRberosCWrZTcHgXr301ah5W3acEAECtU6ErilYBqib6wx/+oMTERO3du1eTJk3SvHnzZLfbZYzRa6+9pk8++UQ2m01PPvmkq6Zly5ZKSEjQX/7yF917773FnvX8ySef6KWXXpIkPfPMM279Pf7441q4cKH+85//6Omnn9YzzzyjevXq6dSpUxo3bpxOnTqlmJgYHt8HAABqtAoFxYEDB3prHJWqRYsWWrZsmUaMGKHExER99NFHioqK0s8//6zs7GzZbDa99NJLuuaaa4rVvfTSS0pJSdG3336r7t2767LLLlNubq7rrerHHntMI0eOdOuvbdu2+uCDD3THHXdo+vTpSkxMVNu2bfXTTz/p9OnTatmypZYsWeJxnUUAAICaoEJvPV9Krr32Wm3ZskUTJkxQ48aNtXnzZhUUFGjEiBFKTk7WH/7wB7caf39/rV27VrNmzVK3bt20Y8cOHT16VAMHDtSyZcs0Z84cj/2NHj1a3333neuJNenp6WrRooUmTZqkrVu3ur1dDQAAUNPU3JWyK0FkZKTefffdMtX4+vpq8uTJmjx5cpn7i42NdX0eEQAA4FJToaD4n//8p1x1AwYMqEi3AAAAqAIVCorXXHNNmT9nV9XL4wAAAKB8KvzWc1mXu6mO5XEAAABQdhW6maWoqKjEr5MnT+rzzz/XwIED1axZM3311VeuJ58AAACgZqvUu54DAwN13XXXac2aNbryyis1YsQI19NMAAAAULNVyfI4znUKT506penTp1dFlwAAAKigKltHsXPnzgoMDNQXX3xRVV0CAACgAqpsHcWCggKdPXtWeXl5VdUlAAAAKqDKrij+85//VEFBgUJCQqqqSwAAAFRApV5RdDgcOnDggP7xj3/o+eefl81m09ChQyuzSwAAAHhJhYJivXr1Sn2sMUatW7fWM888U5EuAQAAUEUq9NazMaZUX3a7XXfddZc2bNigsLAwb40dAAAAlahCVxSTk5NLbrx+fQUFBSkqKkr161fZfTMAAADwggqlt4EDB3prHAAAAKhhuMwHALWAw+FQenp6pbTdo0cP+fr6VkrbAGo2rwfF/fv368iRI5KkkJAQhYeHe7sLAMBvpKena+L8JAWGtvdquznZ+zR/ohQXF+fVdgFcGrwSFLOzs/XCCy/oo48+0rFjx4rta9asmcaNG6fJkycrNDTUG90BACwEhrZXcHiX6h4GgFqkwgtuf/3117r88ss1f/58HT161O2O56NHj+q1115TdHS0vvnmG2+MGQAAAFWgQlcUjxw5ohEjRujEiRMKDAzU/fffr+uuu05t2rSRJP3888/68ssvlZiYqKNHj2rEiBHatm0bT2cBAAC4BFQoKL788ss6ceKEunTpoi+++EKtW7cutr9z584aMmSIHnzwQV177bXavn275s6dq1mzZlVo0AAAAKh8FXrrecWKFbLZbHrrrbfcQuKFwsLC9NZbb8kYo08//bQiXQIAAKCKVCgo7tu3T40aNVL//v0vemz//v3VqFEj7d+/vyJdAgAAoIpU+TqKxpiq7hIAAJQD63OiQkGxffv2ysjI0IYNG9S3b98Sj/322291+vRpdevWrSJdAgCAKsL6nKhQUBw6dKi2bdum+Ph4rV69Wi1atLA87siRI4qPj5fNZtP//M//VKRLAABQhVifs26rUFD8wx/+oLfffls//vijunbtqgceeEBDhgxx3djy888/a/Xq1UpMTNSxY8fUtGlTPfbYY14ZOAAAACpXhYJiy5Yt9fHHH+vmm2/W8ePH9fzzz+v55593O84Yo6ZNm+qf//ynWrZsWZEuAQAAUEUq/GSWgQMHauvWrUpISFBQUJDbk1mCgoL0wAMPKD09XQMGDPDGmAEAAFAFvHLXc5s2bfTGG2/ojTfe0N69e3XkyBFJUkhIiCIiIrzRBQAAAKpYmYPiuXPndObMGUlSYGCg2/6IiAi3cJiTkyNJatSokerVq1eecQIAAKCKlfmt57FjxyooKEgTJkwodc0999xT5hoAAABUrzIFxR9//FHLly9XYGCg3nnnnVLXvfXWWwoMDNTixYu1c+fOMg8SAAAAVa9MQfHDDz+UJP3+979X06ZNS10XFBSkBx98UEVFRfrrX/9apgECAACgepQpKK5bt042m0233nprmTu65ZZbJElr164tcy0AAACqXpmC4o4dO+Tj46OYmJgyd3T55ZfLx8dHP/30U5lrAQAAUPXKFBRPnjyppk2bymazlb0jHx81bdpUp06dKnMtAAAAql6ZgmLDhg3166+/lruz3Nxc+fv7l7seAAAAVadMQTEkJEQFBQXavXt3mTvavXu3HA6HQkJCylwLAACAqlemoNi3b19J0vLly8vc0T/+8Q9J0hVXXFHmWgAAAFS9MgXFYcOGyRij2bNnKzs7u9R1Bw8e1Jw5c2Sz2TRs2LAyDxIAAABVr0xB8dZbb1VkZKSOHTumG264oVRvQe/atUs33nijjh49qk6dOmnMmDHlHiwAAACqTpmCoo+Pj95//335+vrqxx9/1OWXX66EhAStWrVKhw4dksPhkMPh0KFDh7Rq1SrFx8erZ8+e+uGHH+Tn56f33nuvXHdMAwAAoOrVL2tB3759tWTJEo0fP145OTlauHChFi5c6PF4Y4wCAgK0aNEi9evXr0KDBQAAQNUp0xVFp+HDh2vTpk0aM2aMbDabjDGWXzabTWPGjFFKSopGjhzp7bEDAACgEpX5iqJTp06d9Pe//11HjhxRcnKyfvzxRx07dkyS1KxZM3Xv3l2DBg1iORwAAIBLVLmDolNISIhuv/12b4wFAAAANUi53noGAABA7UdQBAAAgCWCIgAAACzVyaC4cuVK2Ww22Ww2tW/f3uNxubm5mjp1qrp06SJ/f3+1aNFCw4YN09q1ay/aR3JysoYNG6YWLVrI399fXbp00bRp03T69GnvnQgAAEAlqnNBMTc3Vw888MBFjzt69Kh69eqlmTNnat++feratavsdrtWrFihwYMH6/XXX/dY+9prr2nIkCFasWKF7Ha7unbtqn379mnGjBnq3bu3jh8/7s1TAgAAqBR1LihOmTJFmZmZF13X8d5779X27dsVFxenPXv2KDU1VZmZmUpMTJQxRg899JA2b97sVpeSkqJHHnlEkpSYmKjMzEylpqZqz549iouLU0ZGhu67775KODMAAADvqlNBccOGDZo/f75GjhypUaNGeTwuLS1NSUlJ8vHx0UcffaSwsDBJks1mU3x8vMaPH6/CwkJNnz7drXb69OkqKirS+PHjFR8f73pkYVhYmBYvXiwfHx8tX75cW7durZRzBAAA8JY6ExQLCgp03333qWHD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kizvWN65c6fWrFlTrA8AAICaqNYHxcLCQo0bN04rV65Uq1attGbNGnXo0OGidbGxsRo2bJgKCws1duxYZWdnSzr/7OgFCxZo0aJF8vHx0dSpU91qp02bJpvNpkWLFmnBggUyxkg6fxfzHXfcoaKiIo0aNUrR0dHePVkAAAAvqvU3syxZssT1OD673a577rnH47GvvfaaYmJiXH9+55131L9/f6WkpCgiIkLdunXT0aNHdeDAAdlsNs2bN8/yruTevXtr7ty5+n//7/8pISFBM2bMUPPmzbVt2zbl5+erc+fOeuutt7x/sgC8qqjwXKWsUZqRkSFTZLzeLgB4W60Pis6laCRp37592rdvn8djT506VezPLVq0UEpKimbNmqVly5Zp27ZtatSokYYOHarHH39cgwYN8tjWI488oh49eujll1/Wd999pyNHjig8PFyjR4/WU089VeztagA1U+6RnzVnZZ5CMqxvTCuv7PRv1KRjT6+2CQCVodYHxQkTJmjChAnlrm/cuLFmzpypmTNnlrl2yJAhGjJkSLn7BlD9Alq2U3B4F6+2mZO9z6vtAUBlqfWfUQQAAED5EBQBAABgiaAIAAAASwRFAAAAWCIoAgAAwBJBEQAAAJYIigAAALBEUAQAAIClWr/gdl1z5swZpaSkeKUtHjMGAEDdRlCsZbJOntVTy7d6pS0eMwYAQN1GUKxl6vvavfa4MR4zBgBA3cZnFAEAAGCJoAgAAABLBEUAAABYIigCAADAEkERAAAAlgiKAAAAsERQBAAAgCWCIgAAACwRFAEAAGCJoAgAAABLBEUAAABYIigCAADAEkERAAAAlgiKAAAAsERQBAAAgCWCIgAAACwRFAEAAGCJoAgAAABLBEUAAABYIigCAADAEkERAAAAlgiKAAAAsERQBAAAgCWCIgAAACwRFAEAAGCJoAgAAABLBEUAAABYIigCAADAEkERAAAAlgiKAAAAsERQBAAAgCWCIgAAACwRFAEAAGCJoAgAAABLBEUAAABYIigCAADAEkERAAAAlgiKAAAAsERQBAAAgCWCYiVLTk7WsGHD1KJFC/n7+6tLly6aNm2aTp8+Xd1DAwAAKBFBsRK99tprGjJkiFasWCG73a6uXbtq3759mjFjhnr37q3jx49X9xABAAA8IihWkpSUFD3yyCOSpMTERGVmZio1NVV79uxR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khkwYIDbvuPHj7uuXP028DHfla8y5ru8QdHhcJjmzZsbSeadd95x2//222+7rog5/7OBsvE030ePHvVYc/LkSdOiRQsjybzyyitu+2vi6zefUaxmXbt2dX1/5swZ1/fLli2TJA0ePFidOnVyq0tISJAkrVy5sthnFnJzc/XZZ59JOr/a+29FRkZq8ODBks5/9uJC5e0Tpeft+a6IpKQkORwORUZGatCgQR77TE1N1e7du73SZ13jab4rwvl3xer3OygoSGPGjJEkLVmypNg+5rvyVcZ8l9fatWt19OhRBQQEaNy4cW7777zzTgUEBOjIkSP66quvqmGElz5P892sWTOPNU2aNFG/fv0kSdu3by+2r6a+fhMUq9n69eslSQEBAercubNr+4YNGyRJAwYMsKzr06eP/Pz8lJeXp82bN7u2p6WlKT8/X35+furTp49l7dVXX12sj4r2idLz9nxfaMuWLRo3bpwGDx6skSNHatq0afrxxx89jsXZp/Pvw2+1bt1aERERxY5F2Xia7/I6cOCAsrKyJHn+u3Kx32/mu/J4e74vlJmZqQkTJmjIkCEaNmyYHn/88RLnybnP+W/Hb/n5+al3797FjkXZlHe+z549K0lq2LBhse019fWboFgNioqKdPDgQb333nuaMGGCJGnWrFkKCAhwHbNjxw5JUseOHS3baNCggdq2bSup+P9KnHXt2rVTgwYNLGudbf72fzPl7RMlq8z5vtDmzZu1ePFiJScnKykpSTNmzFCPHj306KOPqrCw0O34i/V54T7mu/RKM9/l5ZwzX19ftWnTxvIY55zt2bNHBQUFbrXMt3dV5nxfaO/evXr//fe1Zs0arVixQnPmzFG/fv10xx13WF69ZL4rR0Xn++DBg64ruL/9T1tNff0mKFahefPmyWazqV69emrdurX+93//V+3bt9eqVas0ceLEYsceP35ckhQcHOyxPee+EydOVLiuorVwVxXzLUlhYWF67rnn9N133+mXX35RXl6etm7dqvvvv1/GGM2bN09PPfWUW3vMt3eVZb7LyzlnQUFBstlslsc456yoqEg5OTlutcy3d1TFfEvn5/qJJ57QunXrlJ2drfz8fG3fvl1//OMfVb9+fX300UeuwHIh5tu7vDXfkyZNksPhULdu3TR8+PBi+2rq6zdBsQq1bt1a/fv31xVXXKHQ0FDZbDZt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igAAALBEUAQAAIAlgiIAAAAsERQBAABgiaAIAAAASwRFAAAAWCIoAgAAwBJBEQBQJmvXrpXNZpPNZqvuoQCoZARFALXKs88+6woxF37Z7Xa1adNGI0aM0JIlS1Sdj7k/efKknn32WT377LM6efJktY0DAC6mfnUPAAAqS8uWLV3fnzp1SllZWcrKytInn3yi9957Tx9//LH8/PyqfFwnT57Un/70J0nShAkT1LRp0yofAwCUBlcUAdRahw4dcn2dPn1aP/zwg6677jpJ0qpVqzR16tRqHiEA1GwERQB1go+Pj7p3766kpCR16tRJkpSYmKhz585V88gAoOYiKAKoU+x2u8aMGSNJ+vXXX/XTTz+59u3evVsPPPCAIiMj5e/vr8DAQMXGxuq5555TTk6OxzZ//vlnPfroo+revbsaNWokPz8/hYWFKS4uTo8++qi+//5717HXXHONIiIiXH+OiIgo9lnKa665xq19h8OhhQsX6sYbb1TLli3l5+en0NBQ9evXT88995z27t1rOa60tDT97ne/U3h4uOx2u4KCgnTllVdq3rx5ys/PL/Hn9NNPP+nOO+9Uq1atZLfb1aFDBz344IM6fPhwiXVOv/76q2bNmqV+/fopODhYfn5+atu2rcaOHatvv/22VG0AqAEMANQizzzzjJFkSvrnbf78+a5jvv76a2OMMX//+9+Nn5+fa3vjxo2L/blt27Zm27Ztbm1t3rzZBAUFuY6rV6+eCQoKMjabzbXt7rvvdh1/8803m+bNm7v2NW/e3LRs2dL1dfPNNxdrf8+ePeayyy5zHW+z2UxQUJBp2LCha9vDDz/sNq65c+cWG0OTJk1MgwYNXH++/PLLzcGDBy1/PqtWrSp27gEBAcZutxtJJjQ01Lzzzjsl/ozT0tJMmzZtiv1MGjduXOwcnn/+eY/zA6DmICgCqFVKExQff/xx1zEZGRkmJSXFFaL69+9vtm7daowxprCw0CQlJZnQ0FAjyXTs2NH8+uuvxdoaMmSIkWRiY2PNt99+a4qKiowxxuTn55sdO3aYOXPmmJdeeqlYzd69e13979271+M4T506ZSIjI40kExQUZBYsWGBOnjzp2r97927z8ssvm7lz5xar++STT1ztjxw50uzZs8c1pg8++MAV2q688kpz7ty5YrUHDhwwgYGBrjD53XffuX4Wq1atMm3atDFN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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "counts_postcode = melb_df['Postcode'].value_counts()\n",
        "print(counts_postcode)\n",
        "print(\"Promedio de registros en los Postcode:\", counts_postcode.mean())\n",
        "print(\"Mediana de registros en los Postcode:\",counts_postcode.median())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gsLQ8BCHd1EB",
        "outputId": "ecf59477-6b44-4479-d85b-ceaf688903ab"
      },
      "id": "gsLQ8BCHd1EB",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Postcode\n",
            "3073.0    359\n",
            "3020.0    306\n",
            "3121.0    292\n",
            "3040.0    290\n",
            "3046.0    284\n",
            "         ... \n",
            "3340.0      1\n",
            "3158.0      1\n",
            "3808.0      1\n",
            "3777.0      1\n",
            "3793.0      1\n",
            "Name: count, Length: 198, dtype: int64\n",
            "Promedio de registros en los Postcode: 68.58585858585859\n",
            "Mediana de registros en los Postcode: 41.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "postcode_above_100 = counts_postcode[counts_postcode > 100].index.tolist()\n",
        "\n",
        "# Filtrado\n",
        "melb_df_filtered = melb_df[melb_df['Postcode'].isin(postcode_above_100)]\n",
        "\n",
        "# Ploteo de histograma filtrado\n",
        "plt.figure(figsize=(15, 6))\n",
        "seaborn.histplot(melb_df_filtered['Postcode'].dropna())\n",
        "#plt.xticks(rotation=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 535
        },
        "id": "msbRNO_le_-U",
        "outputId": "dd7b32ea-5d38-48bb-89cd-e6151d9c8b07"
      },
      "id": "msbRNO_le_-U",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Podemos hacer una analisis similar para cada \"Suburb\""
      ],
      "metadata": {
        "id": "pCTqIEjVtAMx"
      },
      "id": "pCTqIEjVtAMx"
    },
    {
      "cell_type": "code",
      "source": [
        "counts_suburb = melb_df['Suburb'].value_counts()\n",
        "print(counts_suburb)\n",
        "print(\"Promedio de registros en los Suburb:\", counts_suburb.mean())\n",
        "print(\"Mediana de registros en los Suburb:\",counts_suburb.median())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fMJ9cVGX1Zjh",
        "outputId": "a1851ee9-f0cf-4f81-8e53-ddd25d0723c7"
      },
      "id": "fMJ9cVGX1Zjh",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Suburb\n",
            "Reservoir         359\n",
            "Richmond          260\n",
            "Bentleigh East    249\n",
            "Preston           239\n",
            "Brunswick         222\n",
            "                 ... \n",
            "Sandhurst           1\n",
            "Bullengarook        1\n",
            "Croydon South       1\n",
            "Montrose            1\n",
            "Monbulk             1\n",
            "Name: count, Length: 314, dtype: int64\n",
            "Promedio de registros en los Suburb: 43.2484076433121\n",
            "Mediana de registros en los Suburb: 20.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "suburbs_above_100 = counts_suburb[counts_suburb > 100].index.tolist()\n",
        "\n",
        "# Filtrado\n",
        "melb_df_filtered = melb_df[melb_df['Suburb'].isin(suburbs_above_100)]\n",
        "\n",
        "# Ploteo de histograma filtrado\n",
        "plt.figure(figsize=(15, 6))\n",
        "seaborn.histplot(melb_df_filtered['Suburb'].dropna(), bins=len(suburbs_above_100))  # Usamos bins=len(suburbs_above_100) para tener una barra para cada suburbio\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 691
        },
        "id": "45zEKMEZ8L6U",
        "outputId": "66f8897c-535c-41a7-9f69-edb159df5fdf"
      },
      "id": "45zEKMEZ8L6U",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABPkAAALFCAYAAACxsTbtAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdZ3hU1fr38d+e9EIgIAFCTehdQpdeFDmCKIIgiiIIeFQsxwPYACkqiN1joQpYUJoNPEdRQEBFpYlI6L0ICKGESULKel7wZP4ZUyeZSTLh+7muXEz27LXutZjMnpl7VrGMMUYAAAAAAAAAvJatqBsAAAAAAAAAoGBI8gEAAAAAAABejiQfAAAAAAAA4OVI8gEAAAAAAABejiQfAAAAAAAA4OVI8gEAAAAAAABejiQfAAAAAAAA4OV8i7oBcFajRg2dOnVKgYGBioqKKurmAAAAAAAAoIgcOHBAiYmJioiI0MGDB3M81zLGmMJpFvIiODhYCQkJRd0MAAAAAAAAFBNBQUGy2+05nsNIvmImMDBQCQkJCgoKUv369Yu6OQAAAAAAACgisbGxSkhIUGBgYK7nkuQrZqKiohQXF6f69etr06ZNRd0cAAAAAAAAFJHmzZtr8+bNeVrSjY03AAAAAAAAAC9Hkg8AAAAAAADwciT5AAAAAAAAAC9Hkg8AAAAAAADwciT5AAAAAAAAAC9Hkg8AAAAAAADwciT5AAAAAAAAAC9Hkg8AAAAAAADwciT5AAAAAAAAAC9Hkg8AAAAAAADwciT5AAAAAAAAAC9Hkg8AAAAAAADwciT5AAAAAAAAAC9Hkg8AAAAAAADwciT5AAAAAAAAAC9Hkg8AAAAAAADwciT5AAAAAAAAAC/nW9QNAAAAAAB4D2OM7HZ7ocULDg6WZVmFFg8AvBVJPgAAAABAntntdoWGhhZavPj4eIWEhBRaPADwVkzXBQAAAAAAALwcI/kAAAAAAPnSZ/py+QYEub3elKQEfT66l9vrBYCSjCQfAAAAACBffAOCPJLkAwC4jum6AAAAAAAAgJfzmiTf4sWLNWLECLVo0UKRkZEKCAhQqVKlFBMTo3HjxunMmTNZlrMsK8efihUr5hh3y5YtGjBggCpWrKjAwEBFR0frkUce0enTpz3RTQAAAAAAAMBlXjNd97nnntNvv/2mgIAAVapUSU2aNNGpU6e0ZcsWbdmyRTNnztQ333yjpk2bZlm+RYsWCggIyHS8XLly2cZctmyZBg4cqOTkZEVERKhhw4batWuX3njjDS1evFjr169XdHS02/oIAAAAAAAA5IfXJPkefPBB1a1bV23btpWfn5/j+O+//65BgwZp+/btGjRokP74448syy9evFg1atTIc7xjx45p8ODBSk5O1rhx4zR+/Hj5+vrq/PnzGjhwoP73v/9pwIAB+uWXX2RZVkG7BwAAAAAAAOSb10zXHT58uDp27OiU4JOkxo0ba86cOZKkHTt2KDY21i3xpk+fLrvdro4dO2rSpEny9b2SDy1durQ++ugjlS5dWhs3btTy5cvdEg8AAAAAAADIL69J8uWkfv36jtt2u90tdS5ZskSSNGLEiEz3hYeHq3///pKkRYsWuSUeAAAAAAAAkF9eM103J+vXr5ckhYaGqm7dulmeM3nyZB0/flwpKSmqXLmyunbtqgEDBmS5Tt+RI0d07NgxSVLHjh2zrK9Dhw6aPXu2NmzY4KZeAAAAAAAAAPnjtUm+tLQ0/fnnn/rmm280duxYSdLUqVMVGhqa5flz5851+n3+/PmaMGGCli5dqpiYGKf7du/eLUny9/dXlSpVsqyvZs2akqT9+/crOTk50zTijGbMmKGZM2fmqV/umm4MAAAAAACAq4fXJflee+01PfbYY07HWrVqpfnz5+vGG2/MdH6fPn00ePBgNW3aVFWqVFF8fLy+/fZbPf3009q/f79uuOEGbdmyRVWrVnWUOXv2rKQr03Kz21SjbNmykq4kGy9cuJDjLr0nTpzQ5s2bXe4rAAAAAAAAkBdel+SrXLmy2rVrp5SUFB0+fFh//vmntm7dqgULFqhNmzYqU6aM0/mfffaZ0++BgYEaOHCgunfvrubNm+vw4cOaOHGiZs+e7TgnMTFR0pWRfNnJOM03ISEhxzZXqlQp02jB7MTGxuZaHwAAAAAAAJCR1yX5+vfv79j0QpK2bdumhx56SAsXLlRsbKw2btwoHx+fXOu55ppr9OSTT+qf//ynPv30U82aNcsxai8wMFCSdPny5WzLJyUlOW4HBQXlGGvkyJEaOXJkrm2SpObNmzPqDwAAAAAAAC7x+t11mzRpohUrVuiaa67R1q1b9fHHH+e57HXXXSfpyvTc9Cm60pVpupIUFxcnY0yWZdPPt9lsCgsLy2/zAQAAAAAAgALz+iSfJJUqVUqdOnWSJG3atCnP5TJOx01JSXHcrlOnjqQrI/mOHDmSZdl9+/ZJkqKionLcdAMAAAAAAADwtBKR5JP+L0mXMVmXm+3bt0u6Mj0348YZ1apVU2RkpCRp3bp1WZZNP962bdt8tRcAAAAAAABwlxKR5Dt79qzWrFkjSWrWrFmeyqSkpOjll1+WJHXt2lW+vs7LE952222SpJkzZ2YqGxcXp8WLF0uS0/qAAAAAAAAAQFHwiiTf999/rylTpujgwYOZ7tu8ebN69Oih8+fPq3Llyk5JtyeeeELz58/XxYsXncocOXJE/fr104YNG+Tr66vx48dnqnf06NEKCgrS2rVrNX78eKWmpkqSzp8/r0GDBun8+fNq1qyZevfu7d7OAgAAAAAAAC7yiiRfXFycxo0bp6ioKFWqVEktWrRQ69atFRkZqebNm2vjxo2qXLmyli9frtDQUEe5nTt3asiQIQoPD1edOnXUpk0b1a9fX9WrV9fnn3+uwMBAzZs3T61bt84Us2rVqlqwYIF8fX01efJkRUZGqkWLFqpcubL+97//qUKFClq0aJFjR14AAAAAAACgqPjmfkrRu+666/TKK69ozZo1+uOPP7R7924lJiYqPDxcXbp0Ue/evXXfffepVKlSTuX++c9/qmLFitq4caOOHTumgwcPKiAgQA0bNlT37t310EMPqWbNmtnG7devn6Kjo/XCCy9o7dq1+v333xUZGal7771X48aNU0REhKe7DgAAAAAAAOTKK5J8EREReuyxx/TYY4+5VK5Hjx7q0aNHgWLHxMQ41t8DAAAAAAAAiiOvmK4LAAAAAAAAIHsk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HJek+RbvHixRowYoRYtWigyMlIBAQEqVaqUYmJiNG7cOJ05cybbsvHx8XrmmWdUr149BQUFqXz58urVq5fWrFmTa9zVq1erV69eKl++vIKCglSvXj2NGzdOly5dcmPvAAAAAAAAgPzzmiTfc889p1mzZmn79u0KCAhQkyZNVLZsWW3ZskVTpkxRgwYN9Ntvv2Uq99dff6lFixZ67rnndPDgQdWvX1+BgYFasWKFunbtqrfffjvbmG+++aa6deumFStWKDAwUPXr19fBgwc1ZcoUtWzZUmfPnvVklwEAAAAAAIA88Zok34MPPqjvv/9eFy9e1IEDB/Trr7/q0KFD2rZtmxo1aqRTp05p0KBBmcoNGzZMu3btUvPmzbV//35t3rxZhw8f1owZM2SM0cMPP6ytW7dmKrdp0yY9+uijkqQZM2bo8OHD2rx5s/bv36/mzZsrNjZWw4cP93CvAQAAAAAAgNx5TZJv+PDh6tixo/z8/JyON27cWHPmzJEk7dixQ7GxsY77tmzZoi+++EI2m00ff/yxIiMjJUmWZWnEiBEaPHiwUlNTNXny5EzxJk+erLS0NA0ePFgjRoyQZVmSpMjISC1cuFA2m03Lli3Ttm3bPNVlAAAAAAAAIE+8JsmXk/r16ztu2+12x+0lS5ZIkrp27apatWplKjdy5EhJ0ldffeW0xl58fLz+97//SZJGjBiRqVzt2rXVtWtXSVfWCgQAAAAAAACKUolI8q1fv16SFBoaqrp16zqOb9iwQZLUsWPHLMu1atVKAQEBSkxMdJqyu2XLFiUlJSkgIECtWrXKsmyHDh2cYgAAAAAAAABFxWuTfGlpaTp+/LjmzZunIUOGSJKmTp2q0NBQxzm7d++WJNWsWTPLOvz8/FS1alVJ0q5duzKVq1atWqbpwenS68xYDgAAAAAAACgKvkXdAFe99tpreuyxx5yOtWrVSvPnz9eNN97odDx999uyZctmW1/6fXFxcQUul50ZM2Zo5syZuZ4nyWlNQQAAAAAAACAvvC7JV7lyZbVr104pKSk6fPiw/vzzT23dulULFixQmzZtVKZMGce5iYmJkiR/f/9s6wsICJAkJSQkFLhcdk6cOKHNmzfneh4AAAAAAACQH16X5Ovfv7/69+/v+H3btm166KGHtHDhQsXGxmrjxo3y8fGRJAUGBsput+vy5cvZ1peUlCRJCgoKchwLDAyUJJfLZadSpUqKiYnJ9Tzpyki+vCQOAQAAAAAAgHRel+T7uyZNmmjFihWKjo7W1q1b9fHHH+vOO++UJIWHh8tutzum32Yl/b7w8HDHsfTbrpbLzsiRIx07+eamefPmjPoDAAAAAACAS7x2442MSpUqpU6dOkmSNm3a5Dhep04dSdLevXuzLJecnKzDhw87nZvx9uHDh5WcnJxl2X379mUqBwAAAAAAABSFEpHkk6SUlBSnfyWpTZs2kqR169ZlWeaXX37R5cuXFRgYqGuvvdZxvFmzZvL391dSUpJ++eWXLMum19m2bVt3NB8AAAAAAADItxKR5Dt79qzWrFkj6UqCLl2/fv0kSatXr85yNN+MGTMkST179lRoaKjjeKlSpdSjRw9JynJX3D179mjVqlVOMQAAAAAAAICi4hVJvu+//15TpkzRwYMHM923efNm9ejRQ+fPn1flypWdNuWIiYlRr169lJqaqoEDB+rEiROSJGOMZs6cqffff182m03PPPNMpnrHjRsny7L0/vvva+bMmTLGSLqyU+4dd9yhtLQ03XLLLWratKlnOg0AAAAAAADkkVck+eLi4jRu3DhFRUWpUqVKatGihVq3bq3IyEg1b95cGzduVOXKlbV8+XKnEXmSNHfuXNWuXVubNm1SVFSUYmJiVL16dY0cOVKWZem1117Lcufbli1b6pVXXpF0ZeOM6tWrKyYmRlFRUdq0aZPq1q2rWbNmFUr/AQAAAAAAgJx4RZLvuuuu0yuvvKKbb75ZISEh2r17t7Zs2aLU1FR16dJFr7zyimJjY53W1UtXvnx5bdq0SU899ZSqV6+uHTt26NKlS+rZs6e+++47jRo1Ktu4jz76qFauXKmePXvq0qVL2rFjh6pXr66nnnpKGzdu1DXXXOPBXgMAAAAAAAB5Y5n0eagoFpo3b67NmzcrJibGaadgAAAAACgOLl265JhBddsb38k3IMjtMVKSErT04W6SpPj4eIWEhLg9BgB4A1fyRF4xkg8AAAAAAABA9kjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5UjyAQAAAAAAAF6OJB8AAAAAAADg5XyLugEAAAAAAGRkjHHcvnTpksfjBQcHy7Isj8cBAE8iyQcAAAAAKFZSLyc6bleoUMHj8eLj4xUSEuLxOADgSUzXBQAAAAAAALwcI/kAAAAAAMVWr2lfKiAo2O31piQl6PPRvdxeLwAUFZJ8AAAAAIBiy9c/UL4BQUXdDAAo9piuCwAAAAAAAHg5knwAAAAAAACAl/OKJJ8xRj/++KOeeOIJtW/fXuXKlZOfn5/Kly+vG264QR9++KHTFusZWZaV40/FihVzjL1lyxYNGDBAFStWVGBgoKKjo/XII4/o9OnTnugqAAAAAAAA4DKvWJNv1apV6t69u+P36OhoRUVF6cCBA1q5cqVWrlyphQsXaunSpQoICMiyjhYtWmR5X7ly5bKNu2zZMg0cOFDJycmKiIhQw4YNtWvXLr3xxhtavHix1q9fr+jo6IJ3EAAAAAAAACgArxnJFxUVpddff10nT57Uvn37tHHjRp05c0YLFixQQECAVqxYofHjx2dbR3pS7u8/n3/+eZbnHzt2TIMHD1ZycrLGjRunY8eOadOmTTp27JhuvPFGnThxQgMGDMh2BCEAAAAAAABQWLwiydeqVSvt2rVLDz/8sCIiIpzuGzx4sCO5N3v2bKWlpbkl5vTp02W329WxY0dNmjRJvr5XBj2WLl1aH330kUqXLq2NGzdq+fLlbokHAAAAAAAA5JdXJPnCwsLk5+eX7f09e/aUJJ09e9Zta+UtWbJEkjRixIhM94WHh6t///6SpEWLFrklHgAAAAAAAJBfXrEmX24SEhIct4OCgrI8Z/LkyTp+/LhSUlJUuXJlde3aVQMGDMhynb4jR47o2LFjkqSOHTtmWV+HDh00e/ZsbdiwwQ09AAAAAAAAAPKvRCT5Fi5cKElq2rSpwsLCsjxn7ty5Tr/Pnz9fEyZM0NKlSxUTE+N03+7duyVJ/v7+qlKlSpb11axZU5K0f/9+JScn5zjScMaMGZo5c2ae+hIbG5un8wBXGGNkt9sLJVZwcLAsyyqUWAAAAAAA4AqvT/Jt2rRJ7777riTpiSeeyHR/nz59NHjwYDVt2lRVqlRRfHy8vv32Wz399NPav3+/brjhBm3ZskVVq1Z1lDl79qykK9Nys0tWlC1bVpKUlpamCxcu5LhL74kTJ7R58+Z89xEoKLvdrtDQ0EKJFR8fr5CQkEKJBQAAAAAArvDqJN/JkyfVt29fpaSk6NZbb9XAgQMznfPZZ585/R4YGKiBAweqe/fuat68uQ4fPqyJEydq9uzZjnMSExMlXRnJl52M03wzThfOSqVKlTKNFsxObGxsrvUBAAAAAAAAGXltku/8+fPq2bOnDh8+rObNm2vevHkulb/mmmv05JNP6p///Kc+/fRTzZo1yzFqLzAwUJJ0+fLlbMsnJSU5bme3DmC6kSNHauTIkXlqV/PmzRn1B4/qM325fANy/pt1VUpSgj4f3cutdQIAAAAAgLzzyiRffHy8brzxRm3ZskUNGzbU119/ne1afDm57rrrJF2Znnv27FnHlNvw8HBJUlxcnIwxWU7ZTZ/Sa7PZ8hUbKCq+AUFuT/IBAAAAAICiZSvqBrjKbrfrpptu0oYNG1S7dm19++23Oa6Hl5OM03FTUlIct+vUqSPpyki+I0eOZFl23759kqSoqKgcN90AAAAAAAAAPM2rknyJiYm6+eabtXbtWlWvXl3fffedKlasmO/6tm/fLunK9NyMicJq1aopMjJSkrRu3bosy6Yfb9u2bb7jAwAAAAAAAO7gNUm+5ORk3Xbbbfruu+9UuXJlrVq1ymlHXFelpKTo5ZdfliR17dpVvr7OM5dvu+02SdLMmTMzlY2Li9PixYslSf379893GwAAAAAAAAB38IokX2pqqgYNGqSvvvpKFStW1KpVqxQdHZ1ruSeeeELz58/XxYsXnY4fOXJE/fr104YNG+Tr66vx48dnKjt69GgFBQVp7dq1Gj9+vFJTUyVd2fBj0KBBOn/+vJo1a6bevXu7p5MAAAAAAABAPnnFxhuLFi3SkiVLJF2ZWjt06NBsz33zzTfVrFkzSdLOnTs1bdo0DRs2TNHR0SpbtqzOnz+vXbt2yRijwMBAzZ49W61bt85UT9WqVbVgwQLdcccdmjx5smbMmKGqVatq586dunTpkipUqKBFixZluSkHAAAAAAAAUJi8IsmXlJTkuH3w4EEdPHgw23PPnz/vuP3Pf/5TFStW1MaNG3Xs2DEdPHhQAQEBatiwobp3766HHnpINWvWzLaufv36KTo6Wi+88ILWrl2r33//XZGRkbr33ns1btw4RUREuKV/AAAAAAAAQEF4RZJvyJAhGjJkiMvlevTooR49ehQodkxMjGP9PQAAAAAAAKA48oo1+QAAAAAAAABkzytG8gEAAAAA8sYYI7vd7rH6L1265LG6AQD5R5IPAAAAAEoQu92u0NDQQomVmprGh0oAKCaYrgsAAAAAAAB4Ob50AQAAAIASqs/05fINCHJrnYkX47Ti6X5urRMAUHAk+QAAAACghPINCHJ7ks83KcGt9QEA3IPpugAAAAAAAICXI8kHAAAAAAAAeDmSfAAAAAAAAICXI8kHAAAAAAAAeDmSfAAAAAAAAICXI8kHAAAAAAAAeDmSfAAAAAAAAICXI8kHAAAAAAAAeDmSfAAAAAAAAICXI8kHAAAAAAAAeDmSfAAAAAAAAICXI8kHAAAAAAAAeDmSfAAAAAAAAICXI8kHAAAAAAAAeDmSfAAAAAAAAICX8y3qBgBAcWGMkd1uL5RYwcHBsiyrUGIBAAAAAEo+knwA8P/Z7XaFhoYWSqz4+HiFhIQUSiwAAAAAQMnHdF0AAAAAAADAyzGSDwCy0Gf6cvkGBLm1zpSkBH0+updb68TVi+nlAAAAADIiyQcAWfANCHJ7kg9wJ6aXAwAAAMiI6boAAAAAAACAl2MkHwAAXo7p5QAAAABI8gEA4OWYXg4AAACA6boAAAAAAACAlyPJBwAAAAAAAHi5AiX5Jk2apFdeeSXP57/xxhuaNGlSQUICAAAAAAAA+JsCJfmeffZZvfTSS3k+/9VXX9XEiRMLEhIAAAAAAADA3zBdFwAAAAAAAPByhZrkO3v2rAIDAwszJAAAAAAAAFDiFVqSb/Hixbp48aKqVatWWCEBAAAAAACAq4KvKye//vrrev31152OnT59WtHR0dmWMcbo3LlzunDhgizL0k033ZS/lgIAAAAAAADIkktJvnPnzungwYNOx1JTUzMdy063bt00fvx4V0ICAAAAAAAAyIVLSb5bbrlFNWrUkHRlhN7QoUNVunRpvfbaa9mWsdlsCgsLU6NGjVSzZs2CtBUAAAAAAABAFlxK8jVt2lRNmzZ1/D506FAFBQXpnnvucXvDAAAAAAAAAOSNS0m+v0tLS3NXOwAAAAAAAADkU6HtrgsAAAAAAADAMwo0ki+jtLQ07dmzR2fPnlVycnKO53bs2NFdYQEAAAAAAICrXoGTfCdOnNCTTz6pJUuWKCEhIdfzLctSSkqKSzGMMfrpp5/0xRdfaP369YqNjdWFCxdUpkwZNWvWTPfcc48GDRoky7KyLB8fH6+pU6dqyZIlOnTokEJDQ9W6dWv9+9//VufOnXOMvXr1ar388sv6+eefFR8fr+rVq6t///564oknFBIS4lI/AAAAAAAAAE8oUJLv+PHjat26tY4fPy5jTJ7K5PW8jFatWqXu3bs7fo+OjlZUVJQOHDiglStXauXKlVq4cKGWLl2qgIAAp7J//fWX2rdvr127dikgIEANGjTQ6dOntWLFCn311Vf6z3/+owceeCDLuG+++aYeeeQRGWNUpUoVVa1aVTt27NCUKVO0dOlSrV+/XmXLlnW5PwAAAAAAAIA7FWhNvmeffVbHjh1TaGio3njjDR06dEjJyclKS0vL8cdVxhhFRUXp9ddf18mTJ7Vv3z5t3LhRZ86c0YIFCxQQEKAVK1Zo/PjxmcoOGzZMu3btUvPmzbV//35t3rxZhw8f1owZM2SM0cMPP6ytW7dmKrdp0yY9+uijkqQZM2bo8OHD2rx5s/bv36/mzZsrNjZWw4cPd7kvAAAAAAAAgLsVaCTff//7X1mWpTlz5qhfv37ualMmrVq10q5du+Tn55fpvsGDB+vIkSN6+umnNXv2bL3wwguy2a7kLrds2aIvvvhCNptNH3/8sSIjIyVdmTI8YsQIrV+/Xu+//74mT56spUuXOtU7efJkpaWl6e6779aIESMcxyMjI7Vw4ULVq1dPy5Yt07Zt29SkSROP9R0AAAAA4H4ZZ5ldunTJo7GCg4OzXV4KANylQCP5Tp8+LV9fX91yyy1uak7WwsLCskzwpevZs6ck6ezZszp9+rTj+JIlSyRJXbt2Va1atTKVGzlypCTpq6++crqox8fH63//+58kOSX40tWuXVtdu3aVJC1evNjV7gAAAAAAiljq5UTH7QoVKig0NNRjP3a7vQh7CuBqUaAkX0REhIKCguTr67ZNevMl44YfQUFBjtsbNmyQlP1uvq1atVJAQIASExOdpuxu2bJFSUlJCggIUKtWrbIs26FDB6cYAAAAAAAAQFEpUHaue/fumj9/vvbs2aPatWu7q00uW7hwoSSpadOmCgsLcxzfvXu3JKlmzZpZlvPz81PVqlW1d+9e7dq1S+3atXMqV61atWxHEKbXuWvXrlzbN2PGDM2cOTNPfYmNjc3TeQAAAAAA9+g17UsFBAW7tc6UpAR9PrqXW+sEgJwUKMn31FNPacmSJRo7dqyWLVvmrja5ZNOmTXr33XclSU888YTTfWfPnpWkHHfATb8vLi6uwOWyc+LECW3evDnX8wAAAAAAhc/XP1C+AUG5nwgAxViBkny1atXSF198odtuu03XX3+9nnrqKbVq1UohISHual+OTp48qb59+yolJUW33nqrBg4c6HR/YuKVNRb8/f2zrSMgIECS85Tf/JbLTqVKlRQTE5PredKVkXx5qRMAAAAAAABIV6Akn4+Pj+P2qlWrtGrVqlzLWJallJSUgoSVJJ0/f149e/bU4cOH1bx5c82bNy/TOYGBgbLb7bp8+XK29SQlJUlyXssvMDBQklwul52RI0c6NvnITfPmzRn1BwAAAAAAAJcUKMmXccvxwhQfH68bb7xRW7ZsUcOGDfX11187rcWXLjw8XHa73TH9Nivp94WHhzuVy3hfXssBAAAAAAAARaFASb7Vq1e7qx15ZrfbddNNN2nDhg2qXbu2vv32W5UrVy7Lc+vUqaNjx45p7969Wd6fnJysw4cPO87NWE6SDh8+rOTk5Cw339i3b1+mcgAAIO+MMbLb7YUSKzg4WJZlFUosAAAAoCgUKMnXqVMnd7UjTxITE3XzzTdr7dq1ql69ur777jtVrFgx2/PbtGmj1atXa926dVne/8svv+jy5csKDAzUtdde6zjerFkz+fv7KykpSb/88otj192M0uts27ZtwToFAMBVym63KzQ0tFBixcfHF9qawQAAAEBRsBV1A/IqOTlZt912m7777jtVrlxZq1atUtWqVXMs069fP0lXRhxmNZpvxowZkqSePXs6fcgoVaqUevToIUmaOXNmpnJ79uxxrD+YHgMAAAAAAAAoKgUayVdYUlNTNWjQIH311VeqWLGiVq1apejo6FzLxcTEqFevXlq+fLkGDhyoL7/8UpUqVZIxRrNmzdL7778vm82mZ555JlPZcePGafny5Xr//ffVrl07DR8+XJZl6cSJE7rjjjuUlpamW265RU2bNvVElwEAuKr0mb5cvgG5b2blipSkBH0+updb6wQAAACKqwIl+dauXZuvch07dnTp/EWLFmnJkiWSrux8O3To0GzPffPNN9WsWTPH73PnzlW7du20adMmRUVFqUGDBvrrr7905MgRWZal1157TTExMZnqadmypV555RX961//0siRIzVlyhRdc8012rFjh5KSklS3bl3NmjXLpX4AAICs+QYEuT3JBwAAAFxNCpTk69y5s8uLWFuWpZSUFJfKJCUlOW4fPHhQBw8ezPbc8+fPO/1evnx5bdq0SVOnTtWSJUu0Y8cOhYSEqGfPnho9erS6dOmSbV2PPvqoGjdurJdfflk///yzTp06perVq6tfv3568sknC20dIQAAcHUqzM1JJDYoAQAA8GYFnq5rjPHo+ZI0ZMgQDRkyxOVy6UqVKqXnnntOzz33nMtlu3Xrpm7duuU7NgAAQH4V5uYkEhuUAAAAeLMCJfnS0tJyvP/ChQv6+eef9fzzz2v79u1atmyZOnToUJCQAIASrjBHLjFqCQAAAEBJ4dGNN8LCwnT99dere/fuuuWWW3TzzTdr8+bNioqK8mRYAIAXK8yRS4xagjfxxOYkEhuUAAAAlBSFsruuZVl68cUXVb9+fU2ePFlz584tjLAAAAAlBpuTwBswGhsAgKJTKEk+Sapbt67CwsK0cuXKwgoJAPBynhi5xKglAPAcRmMDAFB0Ci3Jl5ycrISEBCUmJhZWSACFJOOGOpcuXfJ4PL65v3owcgkAAAAA8qbQknyfffaZkpOTVaVKlcIKCaCQpF7+v+R9hQoVPB6Pb+4BACj+GI0NAEDh8miS7/Llyzpy5IiWLl2q559/XpZlqWfPnp4MCQAAAKAYYDQ2AACFq0BJPh8fnzyfa4xR5cqVNWHChIKEBFDM9Zr2pQKCgt1eL9/cAwAAAACQvQIl+TKuw5WToKAg3XbbbXrhhRcUGRlZkJAAijlf/0C+tQcAAAAAoJAVKMm3evXqnCv39VV4eLjq1KkjX99CW/4PAAAAAAAAuKoUKPPWqVMnd7UDAAAAAAAAQD7ZiroBAAAAAAAAAArG7XNoDx06pFOnTkmSIiIiVL16dXeHAAAAAAAAAJCBW0bynThxQg8//LAiIiIUHR2tNm3aqE2bNoqOjlZERIQeffRRnThxwh2hAAAAAAAAAPxNgZN8P/zwg5o0aaK33npLf/31l4wxTj9//fWX3nzzTTVt2lQ//vijO9oMAAAAAAAAIIMCTdc9deqUbr75ZsXFxSksLEz333+/rr/+elWpUkWSdPToUX377beaMWOG/vrrL918883asWOHIiIi3NJ4AAAAAAAAAAVM8r388suKi4tTvXr1tHLlSlWuXNnp/rp166pbt24aNWqUunfvrl27dumVV17R1KlTC9RoAAAAIJ0xRna7vdDiBQcHy7KsQosHAACQFwVK8q1YsUKWZWnWrFmZEnwZRUZGatasWerQoYOWL19Okg8AAABuY7fbFRoaWmjx4uPjFRISUmjxAAAA8qJAa/IdPHhQISEhateuXa7ntmvXTiEhITp06FBBQgIAAAAAAAD4mwKN5MsPY0xhhwQAAMBVos/05fINCHJ7vSlJCfp8dC+31wsAAOAuBUry1ahRQ7GxsdqwYYPatGmT47k//fSTLl26pAYNGhQkJAAAAJAt34AgjyT5AAAAirsCTdft2bOnjDEaMWKETp8+ne15p06d0ogRI2RZlv7xj38UJCQAAAAAAACAvynQSL5///vfmjNnjv744w/Vr19f//znP9WtWzfHJhxHjx7Vd999pxkzZujMmTMqU6aMHn/8cbc0HAAAAAAAAMAVBUryVahQQZ9++qluvfVWnT17Vs8//7yef/75TOcZY1SmTBl99tlnqlChQkFCAoXOGCO73V4osYKDg2VZVqHEAgAA8DYZ1/e+dOmSx+Px3gwA4E0KvPFGp06dtG3bNj333HNavHixzp4963R/2bJlNWDAAD311FOOEX6AN7Hb7QoNDS2UWPHx8QoJCSmUWAAAAN4m9XKi43ZhDB7gvRkAwJu4ZXfdKlWq6J133tE777yjAwcO6NSpU5KkiIgIRUVFuSMEAAAAAAAAgGy4nORLSUlxTF0MCwvLdH9UVFSmxN6FCxckSSEhIfLx8clPO4Fioc/05W7fsS8lKUGfj+7l1joBAABKul7TvlRAULDb6+W9GQDAW7m8u+7AgQMVHh6uIUOG5LnM0KFDXS4DFEe+AUEe+QEAAIBrfP0DeW8GAEAGLiX5/vjjDy1btkxhYWGaO3dunsvNmjVLYWFhWrhwofbs2eNyIwEAAAAAAABkz6Uk34cffihJeuCBB1SmTJk8lwsPD9eoUaOUlpamDz74wKUGAgAAAAAAAMiZS0m+devWybIs3XbbbS4H6tu3ryRpzZo1LpcFAAAAAAAAkD2XNt7YvXu3bDabmjVr5nKgJk2ayGazaefOnS6XBQAAAAAAKI6MMY4NSgtDcHCwLMsqtHjwHi4l+c6dO6cyZcrk64/JZrOpTJkyOn/+vMtlAQAAAAAAiiO73a7Q0NBCixcfH6+QkJBCiwfv4dJ03eDgYF28eDHfweLj4xUUxG5VAAAAAAAAgDu5NJIvIiJCe/fu1b59+1SzZk2XAu3bt0+XL19W9erVXSoHAAAAAIC3McY4bl+6dMnj8ZjCWTz0mb5cvgHuH9yUkpSgz0f3cnu9KFlcSvK1adNGe/fu1bJlyzR69GiXAi1dulSS1Lp1a5fKAQAAAADgbVIvJzpuV6hQwePxmMJZPPgGBHkkyQfkhUvTdXv16iVjjKZPn64TJ07kudzx48f10ksvybIs9epF5hkAAAAAAABwJ5dG8t12222qXbu29u7dqx49eujTTz/Nddru3r171bdvX/3111+qXbu2+vfvX6AGAwAAAADgTXpN+1IBQcFur5cpnAAycinJZ7PZNH/+fHXp0kV//PGHmjRporvuuku33HKLmjVrprJly0qSzp49qy1btujTTz/VRx99JLvdroCAAM2bN481AgAAQKFgLSQAQHHh6x/IFE4AHudSkk+6si7fokWLNHjwYF24cEGzZ8/W7Nmzsz3fGKPQ0FC9//77atu2bYEaCwAAkFeshQQAAICriUtr8qXr3bu3Nm7cqP79+8uyLBljsvyxLEv9+/fXpk2b1KdPH3e3HQAAAAAAAIDyMZIvXa1atfTJJ5/o1KlTWr16tf744w+dOXNGklSuXDk1bNhQXbp0UUREhNsaCwAAkB+shQQAAICSLt9JvnQREREaMGCAO9oCAADgEayFBAAAgJIuX9N1i8Kff/6p999/Xw8//LDatm2roKAgWZalzp0751iuRo0asiwrx5/ExMRsy+/fv19Dhw5VlSpVFBAQoKpVq2rYsGE6cOCAm3sIAAAAAAAA5E+BR/IVlo8//liPPfZYvss3atRIpUuXzvI+my3rXOdPP/2kG264QfHx8QoPD1fjxo21b98+zZ07V4sXL9a3336rVq1a5btNAAAAAAAAgDt4TZIvLCxM3bt3V8uWLdWyZUtt2bJFkydPznP5N998M9dRfxldunRJt912m+Lj4zV06FC99dZbCgwMVGJioh544AG99957uu2227R7924FBTH9BwAAACgJjDGO25cuXfJorODgYFmW5dEYAICrh9ck+YYOHaqhQ4c6fj927JhH482aNUsnTpxQrVq19O6778rPz0+SFBgYqHfffVdr167Vvn37NHv2bI0aNcqjbQEAAABQOFIv/99SPhUqVPBorPj4eIWEhHg0BgDg6uE1a/IVtsWLF0uShgwZ4kjwpfP399e9994rSVq0aFGhtw0AAAAAAADIyGtG8hXUu+++q5deekkJCQmqWLGiOnTooDvvvFOlSpXKdG5qaqo2btwoSerYsWOW9XXo0EGS9Ouvvyo1NVU+Pj6eazwAAACAQtdr2pcKCAp2a50pSQn6fHQvt9YJAIB0FSX5PvnkE6ffP/roI40bN04fffSRrr/+eqf7Dh48qMuXL0uSatasmWV96ceTkpJ06NAhRUdHe6DVAAAAAIqKr3+gfANYfxsA4B1KfJKvc+fO6tatm1q2bKlq1arp8uXLWr9+vcaPH68tW7bo5ptv1g8//KCYmBhHmbNnzzpuly1bNst6Mx6Pi4vLsQ0zZszQzJkz89Te2NjYPJ0HAACAksMYI7vdXmjx2PABAICSp8Qn+ebNm+f0e3BwsHr16qVu3bqpffv22rx5s8aMGaNvv/3WcU5i4v8ttuvv759lvQEBAY7bCQkJObbhxIkT2rx5cz5aDwAAgKuB3W5XaGhoocVjwwcAAEqeEp/ky05QUJCee+459ezZU6tXr1ZcXJzCw8MlXdlBN93ly5edfk+XlJTkVFdOKlWq5DRSMCexsbG5Jg0BAAAAAACAjK7aJJ8kXXfddZKktLQ07d+/X82bN5ckR7JPujJ1NzIyMlPZjFN6M56flZEjR2rkyJF5alPz5s0Z9QcAAHAV6zN9uUfWgWPDBwAASrarOsmXcSpuSkqK43aNGjXk7++vy5cva+/evVkm+fbt2yfpyrTd6tWre76xAFAMFMaaUZcuXfJo/QBQ3PkGBLHZAwAAcNlVneTbvn2743aVKlUct319fdW8eXP99NNPWrdunTp27Jip7Lp16yRJLVu2lI+Pj+cbCwDFQGGvGZWamnZ1v1ABAAAAQB7ZiroBRWnatGmSpAYNGqhy5cpO9/Xr10/SlY07kpOTne67fPmy3nvvPUlS//79C6GlAAAAAAAAQPZK9ACJl156SQEBARo0aJDKlSvnOH7mzBk99dRTWrJkiSRp0qRJmcqOHDlS06dP1969e3X//ffrrbfeUmBgoBITE/XAAw9o3759ioyM1H333Vdo/QGA4sRTa0YlXozTiqf7ub1eAAAAACjJvCbJd+TIETVr1szxe2JioiTphx9+0DXXXOM4PmbMGI0ZM0aSdPToUb3++ut65JFHVKNGDZUvX14JCQmKjY1VSkqKbDabXnjhBd12222Z4oWEhGjJkiXq0aOH5s6dq08//VTR0dHav3+/4uLiFBoaqqVLlyo4ONjDPQeA4slTa0b5JrHDOAAAAAC4ymuSfKmpqTpz5kym4ykpKU7HMy4IP3DgQEnSzz//rMOHD+u3336Tj4+PoqOj1alTJz3wwAO69tprs43Zrl07/fbbb5o8ebJWrlypbdu2qXz58urTp4/GjRun6Oho93UQAAAAAAAAyCevSfLVqFFDxhiXyrRp00Zt2rQpUNyaNWtq3rx5BaoDAAAAAAAA8KSreuMNAAAAAAAAoCTwmpF8QEmVcYTqpUuXPBLDU/UCAAAAQEEYY5yW3fKk4OBgWZZVKLGAokCSDyhiqZcTHbcrVKjg+XipaV75xCcZCgAAAJQ8drtdoaGhhRIrPj5eISEhhRILKAre+FkfwFWIZCgAAAAAANnjMyxQjPSa9qUCgoLdXm/ixTiteLqf2+sFAADeg1HxAIq7PtOXyzcgyK11piQl6PPRvdxaJ1BckeQDihFf/0C3v6hJkm9SgtvrLEokQwEAcB2j4gEUd74BQR75PARcLXjdBeB1SIYCAAAAAOCMJB8AAABwlWFUPAAAJQ9JPgAAAOAqw6h4AABKHltRNwAAAAAAAABAwTCSDwBKEGOM7Ha7x+pn18SrB7twAgAAAN6FJB8AlCB2u12hoaGFEotdE7Pn6WSr5PkEGbtwAgAAAN6F99PwqML4oJsuODhYlmUVSiwAyElhJlslEmRFydMjHhntCAAAgLziMwE8qjA/6MbHxyskJKRQYgHeoM/05W5fVJ1dE69O7MKZvcIc8UgyFwAAADnhvSIAlFC+AUFuT/Kxa6LrPJFslQo3QcYunAAAAEDxR5IPhcYTH3RTkhL0+ehebq0TANzJE8lWiQRZceSJEY8lYbQjAAAACgdJPhQaT33QBQCgOPDEiEeSuQAAAMgrW1E3AAAAAAAAAEDBMJIPAAAAAABkYoyR3W73aAx2kgfchyQfAAAAAADIxG63KzQ0tNDisZM8UDBM1wUAAAAAAAC8HElyAAAAACgkxhjHbU9NU2T6Izyhz/TlHtlIkZ3kAfchyQcAAAAAhST1cqLjdoUKFTwfj+mPcBPfgCCPJPnYSR5wH673AAAAV7HCGFWUUXBwsCzL8ngcAACAqw1JPgAAgKtYYY8qio+PV0hIiMfjAN6g17QvFRAU7PZ6mf4IAFcnknwAAAAAUAR8/QOZ/ggAcBuSfAAAAJDkuVFFKUkJ+nx0L7fXCwAA3MMYI7vdXmjxWL7DM0jyAQAAQJLnRhUBAIDizW63KzQ0tNDisXyHZ5DkAwAAgEd5enOPwtgwpCT0AQAAlGwk+QAAV5XC2EmUD+uAs8Lc3CM1Nc0jb3BLQh8AAMiLPtOXe2RkP8t3eB7vHwAAV5XC3kmUD+sAAADwJr4BQSzf4aX43AEAAIBC44nNPRIvxmnF0/3cWmdOSkIfAABAyUOSDwBw1fLUTqJ8WAey54nNPXyTEtxaX67xSkAfAABAyUOSDwBw1fLUTqJ8WAcAAABQ2GxF3QAAAAAAAAAABcNIPgAAAAAAvJAxxnH70qVLbq/fE3UC8BySfAAAAAAAeKHUy4mO2xUqVPBsrNQ0EghAMcdzFAAKiae/afVkvQAAAACA4o0kHwAUksL8plXi21YAAICrSa9pXyogKNitdSZejNOKp/u5tU4AnsPnPwAAAAAAvJyvf6B8A4LcW2dSglvrA+BZJPng1Zj+CG/liW9aJb5tBQAAADLiMyOuJiT54NWY/ghv5YlvWiW+bQUAAAAy4jMjria2om4AAAAAAAAAgILxmgTzn3/+qZUrV+rXX3/Vr7/+qq1btyoxMVGdOnXSmjVrciybnJys1157TR988IH27t0rf39/XXvttRo1apT69u2bY9ktW7Zo6tSp+v7773Xu3DlFRkaqd+/eeuaZZ1S+fHk39hAFxfRHAAAAAEB2+MxYtApj6nS64OBgWZbl0RjFkdck+T7++GM99thjLpdLTEzU9ddfr/Xr18vHx0cNGzbUpUuXtGbNGq1Zs0Zjx47V1KlTsyy7bNkyDRw4UMnJyYqIiFDDhg21a9cuvfHGG1q8eLHWr1+v6OjognYNbsL0RwAAAABAdvjMWLQKc+p0fHy8QkJCPBqjOPKa6bphYWHq3r27nnzySS1btkzjxo3LU7mxY8dq/fr1ioqK0h9//KHffvtNe/fu1eeff66AgABNmzZNX375ZaZyx44d0+DBg5WcnKxx48bp2LFj2rRpk44dO6Ybb7xRJ06c0IABA5wy0QAAAAAAAEBR8JqRfEOHDtXQoUMdvx87dizXMidPntS7774rSZozZ47q1q3ruO/mm2/WmDFjNHnyZD377LPq3bu3U9np06fLbrerY8eOmjRpkuN46dKl9dFHHykqKkobN27U8uXLM5UFAAAAAABwF09PdS3sHYI9MXU6JSlBn4/u5dY6vY3XJPny44svvtDly5dVu3ZtdenSJdP9I0eO1OTJk7V582bt27dPNWvWdNy3ZMkSSdKIESMylQsPD1f//v01e/ZsLVq0iCQfAAAAAADwmMKc6loYOwR7aur01c5rpuvmx4YNGyRJHTp0yPL+ypUrKyoqyulcSTpy5IhjpGDHjh2zLJteZ8ZyAAAAAAAAQFEo0SP5du/eLUlOI/T+rmbNmjpw4IB27dqVqZy/v7+qVKmSbTlJ2r9/v5KTk+Xn5+euZgMAAAAAAGTJE1Nd2SG4ZCjRSb6zZ89KksqWLZvtOen3xcXFZSoXHh6e7ZbL6eXS0tJ04cIFlStXLtsYM2bM0MyZM/PU5tjY2DydBwAAAAAArj6emOrKDsElQ4lO8iUmXpmz7u/vn+05AQEBkqSEhP/7g3al3N/LZuXEiRPavHlz7g0GAAAAAAAA8qFEJ/kCAwMlSZcvX872nKSkJElSUND/ZcFdKff3slmpVKmSYmJicm+wrozkyy1pCAAAAAAAAGRUopN84eHhkv5v+m1WMk7N/Xu5uLg4GWOynLKbXs5msyksLCzHdowcOVIjR47MU5ubN2/OqD8AAAAAAAC4pETvrlunTh1J0t69e7M9Z9++fU7nZrx9+fJlHTlyJMdyUVFRbLoBAAAAAACAIlWik3xt2rSRJK1fvz7L+48dO6YDBw44nStJ1apVU2RkpCRp3bp1WZZNP962bVu3tRcAAAAAAADIjxKd5OvTp4/8/Py0Z88erV69OtP9M2bMkCQ1a9ZMtWrVcrrvtttuk6Qsd8WNi4vT4sWLJUn9+/d3d7MBAAAAAAAAl5ToJF+FChUca+ENGzZMu3btctz35Zdf6sUXX5QkTZgwIVPZ0aNHKygoSGvXrtX48eOVmpoqSTp//rwGDRqk8+fPq1mzZurdu3ch9AQAAAAAAADIntdsvHHkyBE1a9bM8XtiYqIk6YcfftA111zjOD5mzBiNGTPG8fuLL76oTZs26aefflLDhg3VqFEjxcfHO9bUe/zxx9WnT59M8apWraoFCxbojjvu0OTJkzVjxgxVrVpVO3fu1KVLl1ShQgUtWrQoy005AAAAAAAAgMLkNSP5UlNTdebMGcfPpUuXJEkpKSlOx+12u1O5oKAgrVmzRlOnTlWDBg20e/du/fXXX+rUqZOWLFmil156KduY/fr1088//6x+/fpJkn7//XeVL19eDz30kLZt25Zpii8AAAAAAABQFLxmJF+NGjVkjMlXWX9/f40dO1Zjx451uWxMTIxj/T0AAAAAAACgOPKakXwAAAAAAAAAskaSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByJPkAAAAAAAAAL0eSDwAAAAAAAPByV0WS79lnn5VlWTn+vPvuu1mWTU5O1vTp09W0aVOFhIQoPDxcXbp00bJlywq5FwAAAAAAAEDWfIu6AYUpIiJCtWvXzvK+SpUqZTqWmJio66+/XuvXr5ePj48aNmyoS5cuac2aNVqzZo3Gjh2rqVOnerrZAAAAAAAAQI6uqiRfz549NW/evDyfP3bsWK1fv15RUVH673//q7p160qSvvjiC91+++2aNm2a2rVrp969e3uoxQAAAAAAAEDurorpuvlx8uRJxxTeOXPmOBJ8knTzzTdrzJgxkq5MBQYAAAAAAACKEkm+bHzxxRe6fPmyateurS5dumS6f+TIkZKkzZs3a9++fYXdPAAAAAAAAMDhqpqu+9tvv2nQoEH6888/VapUKTVp0kQDBw5Uw4YNM527YcMGSVKHDh2yrKty5cqKiorSgQMHtGHDBtWsWdOjbQcAAAAAAACyc1Ul+bZu3aqtW7c6fv/iiy/03HPP6ZFHHtFLL70kHx8fx327d++WpByTdzVr1tSBAwe0a9euHOPOmDFDM2fOzFMbY2Nj83QeAAAAAAAAkO6qSPJFRkZq0qRJ6tGjh6Kjo1WqVCnt3r1bb7/9tt5991299tpr8vPz04svvugoc/bsWUlS2bJls603/b64uLgc4584cUKbN292Q08AAAAAAACAzK6KJN+IESMyHWvcuLHeeecdRUVFaezYsXr11Vf1wAMPqEaNGpKkxMRESZK/v3+29QYEBEiSEhIScoxfqVIlxcTE5KmtsbGxudYHAAAAAAAAZHRVJPly8vjjj+v111/X8ePH9cUXX+jhhx+WJAUGBkqSLl++nG3ZpKQkSVJQUFCOMUaOHOnYqCM3zZs3Z9QfAAAAAAAAXHLV767r4+Oj1q1bS5L27NnjOB4eHi7p/6btZiX9vvRzAQAAAAAAgKJw1Sf5pP+bkpuSkuI4VqdOHUnS3r17sy23b98+p3MBAAAAAACAokCST9L27dslSVWqVHEca9OmjSRp/fr1WZY5duyYDhw44HQuAAAAAAAAUBSu+iTfihUr9Mcff0iSbrjhBsfxPn36yM/PT3v27NHq1aszlZsxY4YkqVmzZqpVq1bhNBYAAAAAAADIQolP8v3xxx8aOXKkfvvtN6fjaWlpWrhwoQYNGiRJ6tWrl1q2bOm4v0KFCo7NMoYNG6Zdu3Y57vvyyy/14osvSpImTJjg6S4AAAAAAAAAOSrxu+smJydr5syZmjlzpsqWLavq1avL19dXe/fuVVxcnCSpQ4cOev/99zOVffHFF7Vp0yb99NNPatiwoRo1aqT4+HjHWnyPP/64+vTpU6j9AQAAAAAAAP6uxI/kq1GjhqZMmaKbbrpJZcqU0d69e7V161b5+/urZ8+eev/997V69WqVKVMmU9mgoCCtWbNGU6dOVYMGDbR792799ddf6tSpk5YsWaKXXnqp8DsEAAAAAAAA/E2JH8lXpkwZPf300/ku7+/vr7Fjx2rs2LFubBUAAAAAAADgPiV+JB8AAAAAAABQ0pHkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5HkAwAAAAAAALwcST4AAAAAAADAy5Hky4PVq1erV69eKl++vIKCglSvXj2NGzdOly5dKuqmAQAAAAAAACT5cvPmm2+qW7duWrFihQIDA1W/fn0dPHhQU6ZMUcuWLXX27NmibiIAAAAAAACuciT5crBp0yY9+uijkqQZM2bo8OHD2rx5s/bv36/mzZsrNjZWw4cPL9pGAgAAAAAA4KpHki8HkydPVlpamgYPHqwRI0bIsixJUmRkpBYuXCibzaZly5Zp27ZtRdxSAAAAAAAAXM1I8mUjPj5e//vf/yRJI0aMyHR/7dq11bVrV0nS4sWLC7VtAAAAAAAAQEa+Rd2A4mrLli1KSkpSQECAWrVqleU5HTp00LfffqsNGzYUcuu8U0pSgvvrvJzodNvHx/15a0/HoA9XTwz6UDxilIQ+FEYM+lA8YpSEPhRGDPpw9cSgD8UjRknoQ2HEoA/FI0ZJ6ENhxCgRffBAzsHbWMYYU9SNKI7mzJmj++67T7Vr19bu3buzPOfDDz/UXXfdpapVq+rw4cPZ1jVjxgzNnDkzT3F/++03paamKigoSPXr189X24uTtLQ0bd26taibAQAAAAAArhLXXnutbLaSMXk1NjZWCQkJCg8Pz3XzV0byZSP9P65s2bLZnpN+X1xcXI51nThxQps3b3YpfkJCgstlAAAAAAAArnYlcbBRYmJirueQ5MtG+n+ev79/tucEBARIupKQy0mlSpUUExOTp7jbt2+XMUahoaGKiorKY2tLlvQstadGM3q6/pISgz4UjxgloQ+FEYM+FI8YJaEPhRGDPhSPGCWhD4URgz5cPTHoQ/GIURL6UBgx6EPxiFES+uANDhw4oMTEREVEROR+skGWXnzxRSPJtG7dOttzvvrqKyPJhIaGFmLLSr6YmBgjycTExHhl/SUlBn0oHjFKQh8KIwZ9KB4xSkIfCiMGfSgeMUpCHwojBn24emLQh+IRoyT0oTBi0IfiEaMk9KGkKRkTlD0gPDxcknKc75x+X/q5AAAAAAAAQFEgyZeNOnXqSJIOHz6s5OTkLM/Zt2+f07kAAAAAAABAUSDJl41mzZrJ399fSUlJ+uWXX7I8Z926dZKktm3bFmbTAAAAAAAAACck+bJRqlQp9ejRQ5I0c+bMTPfv2bNHq1atkiT169evUNsGAAAAAAAAZESSLwfjxo2TZVl6//33NXPmTBljJEknTpzQHXfcobS0NN1yyy1q2rRpEbcUAAAAAAAAVzOSfDlo2bKlXnnlFUnSyJEjVb16dcXExCgqKkqbNm1S3bp1NWvWrCJuJQAAAAAAAK52JPly8eijj2rlypXq2bOnLl26pB07dqh69ep66qmntHHjRl1zzTVF3UQAAAAAAABc5XyLugHeoFu3burWrVtRNwMAAAAAAADIEiP5AAAAAAAAAC9Hkg8AAAAAAADwckzXRbEzYsQInThxQpUqVfLK+ktKDPpQPGKUhD4URgz6UDxilIQ+FEYM+lA8YpSEPhRGDPpw9cSgD8UjRknoQ2HEoA/FI0ZJ6ENJYxljTFE3AgAAAAAAAED+MV0XAAAAAAAA8HIk+QAAAAAAAAAvR5IPAAAAAAAA8HIk+QAAAAAAAAAvR5IPuModPnxYp06dytO5p06d0uHDhz3cItfRBwBAUVqwYIG+/vrrPJ37zTffaMGCBR5uEQAA7rN27Vr99ttveTp327ZtWrt2rcsxkpKSXC6DzNhdF8WCMUZnzpyR3W5XtWrViro5VxWbzaYOHTro+++/z/XcLl26aN26dUpJSSmEluUdfQCuPmlpaTpz5ozKly9f1E0p0Xx8fNS+fXuuTblw9Rq+du1apaamuiX2oUOH9MEHH+j48eNq0aKF7rnnHtlsfI9//PhxrV27VkePHpXdbtf48eO9qn7AG1y4cEEHDx5UuXLlVLlyZaf7li5dqnfffddxbZoyZYqqVq3qcoz69etr2LBhuvvuuxUREeGupheZDRs2aM2aNTp69KgSEhI0Z84cx30nTpxQcnJysfw8XBifVcqWLatBgwZp6NChiomJyW9Tr3q+Rd0AXN2+++47TZ8+XevXr1dCQoIsy3K6GEybNk27du3SSy+9pLJlyxZhS3N2/vx57d+/X/Hx8copb96xY8dCbFXeuZLrL67fC9AHuNOFCxckSWFhYUXckqvXrl279PXXX6tZs2bq0KGD4/jly5f1+OOPa86cOUpKSlK1atU0Y8YM3XDDDS7H2LBhg9q0aePOZpc4xhiuTXmU177n5//o3Xff1VNPPaUJEybokUcecRz/+eefdcMNNzjef1iWpYULF+p///vfVZvoO3/+vEaNGqWFCxcqLS3NcTxjEu7222/XsmXLtGnTJjVt2rRY1Y/ixxijPXv26MyZM0pOTs72vIK8z//111+1ZcuWHGNYlqVx48blO4YnvPrqq5o0aZJmzZqloUOHOo4vWLBA9957r+N6t3PnTn3//ffaunWrypQp41KMXbt2aezYsXr66ad10003adiwYerZs6fXXeMOHz6su+66Sz/88IMkOa7ZGZN848eP19y5c7V+/Xq1bdu2qJqaLU+/Hzh37pzeeecdvfPOO2ratKmGDRumQYMGKTw83OW6rmoGKCITJ040NpvNWJbl+LHZbE7nvPPOO8Zms5n33nuvaBqZix9//NG0b9/e2Gy2XH98fHyKurlZsizLdOjQIU/nxsTEmMDAQA+3yHXFuQ9paWl5Oq849yG/kpKSzE8//WQWL15s5s+fX9TNcYllWaZ8+fImOTm5qJty1Xr44YeNzWYzy5cvdzr+1FNPOb1uWJZlgoKCTGxsrMsxLMsyDRs2NK+88oo5ffq0u5peorhybWrZsqXx9/f3cIuKJ1f+n+rWrWtCQ0Ndqv+mm24yNpvNHDp0yOl4u3btjGVZplmzZua+++4z5cuXNzabzcycOdOl+jOaOHFint93zZ8/30ycODHfsdzNbrebmJgYY7PZTKlSpUzXrl1NREREpveXX3/9tbEsyzz77LPFqv6S5tZbbzW33367SUxMLOqm5EtcXJy5//77TalSpTz2Pv/nn3829evXd6or/TNRVseKm/bt2xs/Pz9z4cIFp+NRUVHGZrOZBx54wHzwwQemdevWxmazmfHjx7scY9myZaZXr17Gz8/P8f8QGRlpnnzySbN79253dcUYY8y3335rHnvsMXPzzTebrl27mi5dumT507VrV5fqPXv2rImKijKWZZmqVauaoUOHmqpVq2Z6TNetW2csyzJjxozJdx8+//xz8/nnn5ukpKR815EVV17nGjdubIKDg12OsWXLFvPQQw+ZcuXKOR7rwMBAc8cdd5iVK1e6XN/Vium6KBJff/21evbsqVKlSmnKlCm65ZZbdMcdd+inn35ymr5y6tQpVaxYUTfffLM+++yzomtwFn788Ud169ZNSUlJ8vf3V40aNVShQoUcv1VavXq1W2LHxcXlOmowr8O8bTab2rdvn+O6CUlJSfr+++910003KSoqSrt373a5zX/nrX345JNPNGDAgDydm5aWpiFDhuRp7SVP9CE6OjpP7cyJZVnat2+fS2VSUlI0adIkvfnmm44RcZKcntsjRozQt99+q2+++Ua1atVyqf6M3xTnxsfHR2FhYapRo4Y6dOiga6+9Nk/lSpcurfr162vDhg0uta24c+fzTpLuv/9+3XfffWrRooU7muekWbNm2r17ty5cuCAfHx9JV0bxVahQQXa7XR9++KHatm2ryZMna+bMmRo+fLhmzJjhUozy5cvrzJkzsixLfn5+6t27t4YOHaobb7xRlmW5vU/eKC/XJunKSItmzZopIiJCBw8eLJzGuWjYsGHq0qWLOnXqlK8pYxkdPnzYqZ+dO3dW48aN9eabb2ZbJiEhQd9//72mTp2qmJgYbdy4Mc/xoqOjZbfb9eeffzq1oUaNGqpZs6ZiY2Pl6+urn3/+WW3btlXHjh21Zs2a/HQtz4+55J6px5cvX9bmzZsd017vvvvufNc1depUPfXUU2rXrp0WLVqkSpUqqUOHDvrxxx+d2picnKxSpUopJiZGP/74Y7Gpv6QJCAhQw4YNtXnz5qJuissuXLig1q1ba/fu3apcubIuXLigixcvqn379jpz5ox2796tlJQUBQUFqVWrVpJcf5+/b98+xcTEyG63a+DAgY7p388884zOnDmjDRs2aPPmzQoKCtIDDzyg0NBQTZgwId992rlzp1577TXHVNHExESnGVRz587V0aNH9a9//UuhoaF5qrNq1aqy2Ww6dOiQ49jWrVsVExOj6667TuvXr5d0ZXp79erV1bhx43z/PZw8eVLz5s3Te++9p927dztepzt06KBhw4apX79+CgoKylfdSUlJuv3227V8+XJJuY9CsyzLpevek08+qWnTpqlPnz768MMPFRwcnOW1Iy0tTaVKlVL9+vVdeo3IyMfHR9WqVdOBAwfyVT7dhQsXdO7cOcfvNWrUUMuWLbV48eJsy6S/zt1///1q0KCBtm/fnq/Yly9f1qeffqq5c+fqu+++U1pamizLUrVq1TR06FANGTKkwK/jJRnTdVEk3njjDVmWpXnz5unWW2+VpCw/UEVERKhq1araunVrgeKlpKRo/vz5WrFihfbt25fjh9y8JjUmTJigpKQk9evXT//5z388vkbE/v37NWHCBH311VdOF9ys/H3ac0YTJ07UpEmTnI798MMPjg/RuenTp0+ezstKSejDPffco3Llyql79+45nmeM0d13362FCxdmmeQrjD6444O2q4mO1NRU9e7dW998842kK28I/vrrL8XHxzud17NnT82ePVuffvqpRo8e7VKMefPmObUtq+fy3+9L/71t27aaO3eu6tSpk2OM+vXr6/jx4y61KydFlXCV3Pe8y8rMmTM1a9YsNWrUSMOGDdNdd93ltqUVTpw4ocqVKzs9J3788UedP39effv2Vb9+/SRdmSr04YcfatWqVfmK8fnnn2vu3Ln65ptvtHTpUi1btkyRkZEaMmSI7r33Xrc8dpJnXoeyU5AlJF5//XW9/vrrTsc2btyY4/9DQkKCY+OgHj165LPVzrZt25br/5MklxJC7733nuP6ERUVpc6dO6tz587q0qVLprWk8lLX36/h27dvV5cuXfJU/r777nMp3unTp1W3bl2nY+kJhQEDBsjX98pb+tatW6tGjRr5/mDlqvQPXvmR3RdCGR9TV78Q+uSTT+Tr66sPP/xQlSpVyvY8Pz8/1axZ0+Uv/Dxdf1b27t2rr776Kk/XjYzT/vLKk9emypUru23tSUnq2rVrgeuwLEvfffddrue9/PLL2rVrl+6//369/fbbjoRM+npk586d0yuvvKIXXnhBNWvW1OzZs11uy7Rp0xQfH6+3335bI0eOVIcOHXT06FFNnDjRcc6qVat0xx136Ntvv3VM88yPefPm6Z///KcuX76c6b1Ruri4OE2cOFH16tXT7bffnqd6//rrr0xT0tetWydJjs94khQZGak6depo7969+e5DhQoVNHbsWI0dO1Y//vij5syZo8WLF2vt2rVat26dRo0apYEDB2ro0KGOxGteTZo0SV9++aVCQkI0bNgwtWnTJtfBG6747LPP5O/vrzlz5ig4ODjb82w2m2rWrFmg9wDlypVzy+fS9KnYGW3cuFFRUVF5Kj9o0KB8x/b399eAAQM0YMAAHT16VO+9957mz5/veE87ceJEdevWTffdd59uueUW+fn55TtWiVT4gwcBY6655hpToUIFp2Pp017/rlWrVgWamhgXF2eaN2+eaWpwdj95HQofFhZmSpcuXShTEP744w8THh7u6ENgYKCpVq2aqVGjRrY/2Xn22Wcz9Tcv/y9hYWFmxIgRxm63X7V9MMaYgIAAExYWZn755Zdsz0lLSzN33XWXsSzLVK9evcj6cPDgQbf8uOLtt982lmWZ+vXrm99++80Yk/Vz2263G19fX9O5c2eX6jfGmHnz5pkJEyYYf39/U7p0aXPPPfeYV1991cyePdu8+uqrZsiQIaZMmTImICDATJgwwbz11lvmwQcfNBUrVjSWZZnKlSubU6dO5Rhj9uzZxrIs89lnn7ncvqzk5bF117UpI3c+77Ly8MMPm2uuucZpSsXtt99uvv76a5fb+nd+fn6mVatWTscmT55sbDabmT17ttPxa6+9tsBT2I8fP26ef/55U6dOHaepUl27djUffPCBSUhIyHfdnnod+jt3LCGR32uTZVnmhhtuMH/99Ve+/5+MMWbJkiWmevXqeeqDq/9Pr776qunTp48pW7asU/9sNpupVauWue+++8yHH35ojh07lmtdr732mtPzJv3vP7vnVVRUlGnQoIHp3bu3+eijj1z+fwkICDCNGzd2OjZixAhjs9nMN99843S8TZs2BZo27cqUrBo1apjSpUu7HCMlJcXceOONjv//6OhoExYWlukxXbZsmbEsy7z44ot5qjckJMTUrVvX6Vh27y/btm1r/Pz8XGq3p+vPKC0tzYwaNcr4+Pjk6XmYn+uGp69No0aNMr6+vubIkSMuty0rubUtu37kZ8pr06ZNTWBgoDl79qwxJvvH+T//+Y+x2Wxm1qxZLvcnOjralC5d2rE0SHYxVq9ebSzLMk8//bTLMYy5MiXY19fX+Pr6mn/9619m7dq1pkWLFpliHTp0yFiWZe6444481x0cHGzq1avndOz22283NpvN/Pzzz07H27Rp4/blZi5dumTmzZtnOnbs6PRYN27c2Lz++usmLi4uT/VER0cbHx8fs3btWre2L11QUJBp1KiR0zFPXTv+8Y9/mLJly5qUlJR812GMMRMmTHD5/UBwcLBp3Lixef755wscPytr1qwxd999t/Hz83M81tdcc4157LHHzK5du9wez1sxXRdFIjAwUI0aNXIahpzVkGVJatGihWJjY3Xp0qV8xXrooYf09ttvq1KlSho9enSevpmpXr16rvWGhYWpbt26+vXXX/PVLlfceuut+vzzz9WhQwe9/vrreZ5ymJXz5887RvMYYxQdHa2WLVtq0aJFWZ5vWZaCgoIKvINlSeiDdGWnsAEDBqhs2bJat25dppEVxhgNHjxYH330kapVq6bVq1dn+Y1XUfbBk9q0aaONGzdqy5Ytaty4saTsn9v16tVTXFycTp486VKMo0ePKiYmRo0bN9aiRYtUrly5TOecPXtW/fv31++//66NGzeqWrVqio+PV58+fbRmzRqNHj1aU6dOzTHOgw8+qPnz52vy5Mm6++67s4yTVxmnsWS0dOlSPfnkk6pVq5ZGjRqlBg0aqEKFCjp58qR27Nih//znP9q7d69eeOEF9e3bN0/Xpozc+bzLTnJysj777DPNnTtXK1eudIzsqVKliu69914NGTJENWrUcLne8PBwhYWFOf3f3XDDDfruu++0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8OFc6/PU61BGhbmEhKeEhISYcuXK5XlXcndIS0szv/76q3nxxRdNz549TalSpRyPd353y/SEXbt2OT2X0hPoq1atcjrv888/N5ZlmQcffDDPdc+bN8907tzZ8ZP+vMt4LONPly5dzD/+8Q8zatQo88MPP+SrP576QujJJ580NpvNjB07Nsd605Om06ZNc6ndnq4/o/TlFTzJ09emrKb45ZY0dlXfvn1NSEhIpt1d/+78+fMmJCTE3HbbbXmqt06dOk5LrjzwwAPGZrOZFStWOJ2XmppqIiIi8pWAa9y4salUqZLj97FjxxqbzZZpd+tz586Z0NBQEx4e7nIMY4zx9/c3zZs3dzqW3fOtZcuWLiX54uLinJa5sCzLlCtXLtMX3TNnzjSWZZlnnnkmX30w5srU3Llz55p27do5/d20bdvWzJkzJ8sk75o1a4yvr6+JiorKse7777/fBAQEmDNnzuS7fTl5/vnnjWVZZsiQIY5jf38MUlJSHMnkd955J9+x8rrcRcbXkuLmwIEDZvz48aZatWqOxzl9l93vvvsuyzKxsbEmKCjIVK5cuZBbW/yw8QaKxMMPP6xFixZp5MiRKl26dJaLfy9btkyPPPKIfHx8NGrUqHzH+vvC7e5y++23a/v27br77rs1fvx4jRgxQmFhYW6PI0l169bNdcF8Tzh06JA++OADHT9+XC1atNA999yT7wVoS0IfMnr66ad16tQpvfnmm+rZs6eio6P1ySefqGrVqtlO0c2v/PbBlV1os2O5uJB31apVtXfvXqWkpDhNZ/m7c+fOadeuXWrSpInLbTp79qxKly6dp3PtdrvOnj3rdKxMmTK5ThVx107YOfn1119Vu3Zt+fv753iev7+/6tSpo19++cXlGEX1vJOubOrQqFEj1axZU5MnT1ZKSori4uL0n//8R2+99ZbatWunF154Qe3atcuy/IgRI/T999/rk08+0aeffipJat++vZ5++mmn8z744ANJUrdu3Qrc5r1792ru3LlasGCBTpw4IWOMQkJCdOedd2r48OFq06aNUlJS9Pnnn2vixInavn27/vWvf+W405zkudehjIwxqlOnTqFOUTl//ryWL1+u48ePq3nz5gVeFN/Pz0/R0dEe39l469atWr16tVavXq1169bpwoULjoXo69ev79iMo3Pnznmu88KFCzp48KDKlSuXaROPpUuX6t1333Vcw6dMmeLyroB16tTRmjVrNGnSJO3evVvVqlXTv//970wbfXz00UcqXbq0brzxxjzXfc899zhN87TZbGrcuLFHr4MpKSkqVapUns6Nj4/P846Zjz/+uGbPnq3p06fr1KlTGj58uGMzobNnz+r333/XK6+8oi+//FJVq1bVP//5T5fa7en6MypTpowqVKiQ7/J54elr09133+3x5/P69evVoEGDXP+ewsLC1KBBA8emELlp1KiRVqxYoaSkJAUEBKh79+565513NGHCBLVt21bh4eGSpGeffVanT59W69atXW57q1atNG/ePJ05c0blypXTLbfcohdffFFjx45VxYoV1aFDB504cUKPPvqo7Ha7evXq5XIMSSpbtqyOHj2ap3P37dvn0t9dmTJltHHjRs2ZM0e7du1y7H769zoOHjyoPn36qG/fvi61XbqyMd3cuXO1ePFiXbp0ScYYhYeHa/DgwRo+fLgaNmyYbdlOnTqpWbNm2rJlS44xJk6cqC+//FJDhw7Vhx9+6LQEgjs8/PDDmjNnjhYsWKAjR45o2LBhjk3pNm/erN9//11vvvmmNm/erEaNGhXoPbxxcTW2vJ6fmpqqS5cuyd/fX4GBgU73/fLLL5o1a5bjde7f//53nq/xGX344YeaO3euvv/+e5krA9JUv359DR8+XHfffXeOm7vVq1dP1157rX7++WeX45Y4RZdfxNVu/Pjxjm996tSpY8qVK2dsNpvp1auXiYqKcmTt87rYcnbGjBljfH198zTaIjvZTdGLiopymsbl7ul86dJHtKRPW3Ond955x4SHh5vXXnvN6fiGDRsci2CnP07XX3+9SU1NzXccb+9DVgYNGuSou2rVqmbv3r35qscTfXB1NJo7Rqg99NBDxmazmZdfftlxLKtvi8eMGWNsNpsZN26cS/Ubc+XbdZvNZjZu3Jjjeb/++quxLMvUqVPH6XiNGjVM1apVXY7rbiEhIXn+trFy5cq5jj7Miiefd9lJS0sz//3vf03//v1NQECA42+3Xr165sUXXzT/+te/TPny5R0jpXLb3GTLli3m448/Nj/++GOWI7w++OAD89prrzlNnXeF3W53LNqdcWRAixYtzIwZM7IdHXLx4kVzzTXXZFp6IivueB3KjaeWkPj4449Ns2bNMi0qv3PnTlO1alWn0QAZRyjkR7du3fI8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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Y finalmente analicemos un poco el rango de la variable a predecir"
      ],
      "metadata": {
        "id": "TFycWmuMtJlM"
      },
      "id": "TFycWmuMtJlM"
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15, 6))\n",
        "seaborn.histplot(melb_df.Price.dropna())\n",
        "plt.ticklabel_format(style='plain', axis='x')\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 541
        },
        "id": "W2YcTWPpttpn",
        "outputId": "fe122f4b-4514-41e8-9598-1ccadea48077"
      },
      "id": "W2YcTWPpttpn",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(melb_df.Price.dropna().min())\n",
        "print(melb_df.Price.dropna().max())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yu3zagHuWazy",
        "outputId": "e2a93e18-c94a-4d8a-f05b-a8892f6279ed"
      },
      "id": "Yu3zagHuWazy",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "85000.0\n",
            "9000000.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nan_count = melb_df['Price'].isna().sum()\n",
        "print(\"Numero de valores NaN en 'Price':\", nan_count)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_XDNMV7mWtkm",
        "outputId": "34dcf16e-9136-460e-e0f0-a3372f928161"
      },
      "id": "_XDNMV7mWtkm",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Numero de valores NaN en 'Price': 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Propiedades con mas de 4 millones de Precio:',len(melb_df[melb_df['Price']>4000000]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r1UwGo62xFh9",
        "outputId": "78c5d7a7-ffd9-4945-ba53-cd52b7e766ec"
      },
      "id": "r1UwGo62xFh9",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Propiedades con mas de 4 millones de Precio: 55\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Y si en esta oportunidad nos quedamos con estas variables, tendriamos la siguiente seleccion de campos de interes."
      ],
      "metadata": {
        "id": "mOvo0h4WtizV"
      },
      "id": "mOvo0h4WtizV"
    },
    {
      "cell_type": "code",
      "source": [
        "interesting_cols = ['Suburb', 'Rooms', 'Type', 'Price', 'Method',\n",
        "                    'Bedroom2', 'Bathroom', 'Car',\n",
        "                    'Landsize', 'BuildingArea', 'YearBuilt','Postcode']"
      ],
      "metadata": {
        "id": "b_uTvmBe8fwv"
      },
      "id": "b_uTvmBe8fwv",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dejamos para un proximo analisis a las siguientes variables, porque buscamos simplificar la prediccion o no sobre cargar de variables que podrian representar lo mismo que otras.\n",
        "\n",
        "Las variables que quedan en duda son : SellerG: Real Estate Agent, Date: Date sold. A estas se le podria hacer mas analisis, con matrices de correlacion con la variable precio y determinar si es alta o no esta correlacion.**(duda en como realizarlo correctamente)**\n",
        "\n",
        "Las variables que pueden representar lo mismo que otra : Distance: Distance from CBD, Regionname: General Region (West, North West, North, North east …etc),Propertycount: Number of properties that exist in the suburb, CouncilArea:Governing council for the area"
      ],
      "metadata": {
        "id": "QzzdV4XuttXV"
      },
      "id": "QzzdV4XuttXV"
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color='green'>Por lo tanto un posible subconjunto para la prediccion de precio, puede ser:"
      ],
      "metadata": {
        "id": "fO-ZB3zJytzK"
      },
      "id": "fO-ZB3zJytzK"
    },
    {
      "cell_type": "code",
      "source": [
        "new_melb_df_filtered = melb_df[interesting_cols]"
      ],
      "metadata": {
        "id": "kgJfhMxVytXr"
      },
      "id": "kgJfhMxVytXr",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filtro = (new_melb_df_filtered['YearBuilt']>1800)\n",
        "new_melb_df_filtered = new_melb_df_filtered[filtro | new_melb_df_filtered['YearBuilt'].isna()]"
      ],
      "metadata": {
        "id": "uUVH_CZL9mjg"
      },
      "id": "uUVH_CZL9mjg",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_melb_df_filtered = new_melb_df_filtered[(new_melb_df_filtered['Price']<=4000000)]"
      ],
      "metadata": {
        "id": "Td9S-kmqzzQS"
      },
      "id": "Td9S-kmqzzQS",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_melb_df_filtered.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQvUd57Z1ORy",
        "outputId": "7d23f73e-f90e-401b-e55b-a61ff2e8bc26"
      },
      "id": "qQvUd57Z1ORy",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13524, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Con respecto a los valores, solo descartamos los outliers en las variables de `Price` y `YearBuilt`. las demas variables tenian o muy pocos datos o suficientes, y no queriamos descartar informacion para lugares con poca informacion para predecir en un futuro propiedades con las mismas caracteristicas unicas."
      ],
      "metadata": {
        "id": "HY7i0bT01QVa"
      },
      "id": "HY7i0bT01QVa"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Pandas 2"
      ],
      "metadata": {
        "id": "yJMl_mmavHyL"
      },
      "id": "yJMl_mmavHyL"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Recordemos que es lo que buscamos en este ejercicio:\n",
        "\n",
        " <font color='magenta'> *Agregar información adicional respectiva al entorno de una propiedad* </font> *a partir del [conjunto de datos de AirBnB](https://www.kaggle.com/tylerx/melbourne-airbnb-open-data?select=cleansed_listings_dec18.csv) utilizado en el práctico.*\n",
        "  * *1. Seleccionar qué variables agregar y qué combinaciones aplicar a cada una. Por ejemplo, pueden utilizar solo la columna `price`, o aplicar múltiples transformaciones como la mediana o el mínimo.*\n",
        "  * *2. Utilizar la variable zipcode para unir los conjuntos de datos. Sólo incluir los zipcodes que tengan una cantidad mínima de registros (a elección) como para que la información agregada sea relevante.*\n",
        "  * *3. Investigar al menos otras 2 variables que puedan servir para combinar los datos, y justificar si serían adecuadas o no. Pueden asumir que cuentan con la ayuda de anotadores expertos para encontrar equivalencias entre barrios o direcciones, o que cuentan con algoritmos para encontrar las n ubicaciones más cercanas a una propiedad a partir de sus coordenadas geográficas. **NO** es necesario que realicen la implementación.*\n",
        "\n",
        "*Pueden leer otras columnas del conjunto de AirBnB además de las que están en `interesting_cols`, si les parecen relevantes.*"
      ],
      "metadata": {
        "id": "RFHEEkJWiDnC"
      },
      "id": "RFHEEkJWiDnC"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Parte 2.1\n",
        "\n",
        "---\n",
        "\n",
        "Analicemos las columnas para elegir que variables/combinaciones podemos agregar en la base de datos del challenge de Melbourne.\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "9s177RKMLgNR"
      },
      "id": "9s177RKMLgNR"
    },
    {
      "cell_type": "code",
      "source": [
        "#Data Source:\n",
        "url = 'https://cs.famaf.unc.edu.ar/~mteruel/datasets/diplodatos/cleansed_listings_dec18.csv'\n",
        "airbnb_df = pd.read_csv(url)"
      ],
      "metadata": {
        "id": "JOMt9xO7bhJ6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fb832569-869b-4a87-b058-12f76471dbd4"
      },
      "id": "JOMt9xO7bhJ6",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-6537f4cc9548>:3: DtypeWarning: Columns (35,77) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  airbnb_df = pd.read_csv(url)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Observemos primero los campos originales de la base de datos de Airbnb"
      ],
      "metadata": {
        "id": "2teGSdoy6elH"
      },
      "id": "2teGSdoy6elH"
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g1FkDPpU6zC_",
        "outputId": "6b3a25de-653d-463c-9da2-4c2ccff4a3b6"
      },
      "id": "g1FkDPpU6zC_",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['id', 'listing_url', 'scrape_id', 'last_scraped', 'name', 'summary',\n",
              "       'space', 'description', 'neighborhood_overview', 'notes', 'transit',\n",
              "       'access', 'interaction', 'house_rules', 'picture_url', 'host_id',\n",
              "       'host_url', 'host_name', 'host_since', 'host_location', 'host_about',\n",
              "       'host_response_time', 'host_response_rate', 'host_is_superhost',\n",
              "       'host_thumbnail_url', 'host_picture_url', 'host_neighborhood',\n",
              "       'host_verifications', 'host_has_profile_pic', 'host_identity_verified',\n",
              "       'street', 'neighborhood', 'city', 'suburb', 'state', 'zipcode',\n",
              "       'smart_location', 'country_code', 'country', 'latitude', 'longitude',\n",
              "       'is_location_exact', 'property_type', 'room_type', 'accommodates',\n",
              "       'bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', 'price',\n",
              "       'weekly_price', 'monthly_price', 'security_deposit', 'cleaning_fee',\n",
              "       'guests_included', 'extra_people', 'minimum_nights', 'maximum_nights',\n",
              "       'calendar_updated', 'has_availability', 'availability_30',\n",
              "       'availability_60', 'availability_90', 'availability_365',\n",
              "       'calendar_last_scraped', 'number_of_reviews', 'first_review',\n",
              "       'last_review', 'review_scores_rating', 'review_scores_accuracy',\n",
              "       'review_scores_cleanliness', 'review_scores_checkin',\n",
              "       'review_scores_communication', 'review_scores_location',\n",
              "       'review_scores_value', 'requires_license', 'license',\n",
              "       'instant_bookable', 'cancellation_policy',\n",
              "       'require_guest_profile_picture', 'require_guest_phone_verification',\n",
              "       'calculated_host_listings_count', 'reviews_per_month'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Podemos separar estos campos en los siguientes subconjuntos:"
      ],
      "metadata": {
        "id": "zmItCL9DADSR"
      },
      "id": "zmItCL9DADSR"
    },
    {
      "cell_type": "markdown",
      "source": [
        "> Columnas con Informacion referente a la Ubicacion de la Propiedad"
      ],
      "metadata": {
        "id": "P4H4unEa4VDw"
      },
      "id": "P4H4unEa4VDw"
    },
    {
      "cell_type": "code",
      "source": [
        "#Columnas con Informacion referente a la Ubicacion de la Propiedad\n",
        "col_location= ['street', 'neighborhood', 'neighborhood_overview','city', 'suburb', 'state', 'zipcode',\n",
        "               'smart_location', 'country_code', 'country', 'latitude', 'longitude',\n",
        "               'is_location_exact']"
      ],
      "metadata": {
        "id": "BtiTIVt08jlx"
      },
      "id": "BtiTIVt08jlx",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_df[col_location].sample(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "kxu5iLOCJ6iI",
        "outputId": "04b6a8fa-4eb8-4db8-953d-6985dd272293"
      },
      "id": "kxu5iLOCJ6iI",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          street               neighborhood  \\\n",
              "2248   Southbank, VIC, Australia                  Southbank   \n",
              "10919  Truganina, VIC, Australia                        NaN   \n",
              "14802  Melbourne, VIC, Australia  Central Business District   \n",
              "\n",
              "      neighborhood_overview       city     suburb state zipcode  \\\n",
              "2248                    NaN  Melbourne  Southbank   VIC    3006   \n",
              "10919                   NaN    Wyndham  Truganina   VIC  3029.0   \n",
              "14802                   NaN  Melbourne  Melbourne   VIC  3000.0   \n",
              "\n",
              "             smart_location country_code    country   latitude   longitude  \\\n",
              "2248   Southbank, Australia           AU  Australia -37.825034  144.960501   \n",
              "10919  Truganina, Australia           AU  Australia -37.845600  144.743454   \n",
              "14802  Melbourne, Australia           AU  Australia -37.814649  144.953198   \n",
              "\n",
              "      is_location_exact  \n",
              "2248                  t  \n",
              "10919                 f  \n",
              "14802                 f  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b853a7ac-c9bb-48e9-b333-351c37f33e51\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>street</th>\n",
              "      <th>neighborhood</th>\n",
              "      <th>neighborhood_overview</th>\n",
              "      <th>city</th>\n",
              "      <th>suburb</th>\n",
              "      <th>state</th>\n",
              "      <th>zipcode</th>\n",
              "      <th>smart_location</th>\n",
              "      <th>country_code</th>\n",
              "      <th>country</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>is_location_exact</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2248</th>\n",
              "      <td>Southbank, VIC, Australia</td>\n",
              "      <td>Southbank</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Melbourne</td>\n",
              "      <td>Southbank</td>\n",
              "      <td>VIC</td>\n",
              "      <td>3006</td>\n",
              "      <td>Southbank, Australia</td>\n",
              "      <td>AU</td>\n",
              "      <td>Australia</td>\n",
              "      <td>-37.825034</td>\n",
              "      <td>144.960501</td>\n",
              "      <td>t</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10919</th>\n",
              "      <td>Truganina, VIC, Australia</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Wyndham</td>\n",
              "      <td>Truganina</td>\n",
              "      <td>VIC</td>\n",
              "      <td>3029.0</td>\n",
              "      <td>Truganina, Australia</td>\n",
              "      <td>AU</td>\n",
              "      <td>Australia</td>\n",
              "      <td>-37.845600</td>\n",
              "      <td>144.743454</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14802</th>\n",
              "      <td>Melbourne, VIC, Australia</td>\n",
              "      <td>Central Business District</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Melbourne</td>\n",
              "      <td>Melbourne</td>\n",
              "      <td>VIC</td>\n",
              "      <td>3000.0</td>\n",
              "      <td>Melbourne, Australia</td>\n",
              "      <td>AU</td>\n",
              "      <td>Australia</td>\n",
              "      <td>-37.814649</td>\n",
              "      <td>144.953198</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b853a7ac-c9bb-48e9-b333-351c37f33e51')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b853a7ac-c9bb-48e9-b333-351c37f33e51 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b853a7ac-c9bb-48e9-b333-351c37f33e51');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2918f258-b476-44ec-9ea3-77a665579d12\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2918f258-b476-44ec-9ea3-77a665579d12')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2918f258-b476-44ec-9ea3-77a665579d12 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "De estas columnas podemos resaltar los siguientes campos:\n",
        "* `neighborhood` : ya que en la base del challenge de Melbourne no esta presente este dato, podria sumar informacion (con cuidado tal vez, para que no sume \"mala\" informacion o incorrecta)\n",
        "* `neighborhood_overview`: este campo podria agregar buena informacion sobre el barrio, pero como proviene de el propietario que alquila en Airbnb, es decir el 'host', podria estar positivamente sesgada.\n",
        "*`city`: otro campo que suma informacion y que no esta presente en el challenge.\n",
        "* `state`: idem al anterior.\n",
        "* `suburb`: este campo si pertenece, podriamos utilizarlo como informacion de matcheo o no agregarlo\n",
        "* `zipcode`: idem al anterior, pero en este caso lo usaremos para mergear los datos."
      ],
      "metadata": {
        "id": "7wyZ6OBV4b__"
      },
      "id": "7wyZ6OBV4b__"
    },
    {
      "cell_type": "markdown",
      "source": [
        "* `smart_location` este campo es una intriga. En la fuente de la base de datos no se encuentra una description detallada de las columnas, pero buscando informacion sobre el nombre del campo encontre lo siguiente:\n",
        "\n",
        "\"El `Smart Location Database` es un recurso de datos geográficos a nivel nacional desarrollado por la Agencia de Protección Ambiental de EE. UU. (EPA) para medir la eficiencia de la ubicación y el entorno construido. Incluye más de 90 atributos que resumen características como densidad de vivienda, diversidad de uso del suelo, diseño de vecindarios, accesibilidad al destino, servicio de tránsito, empleo y demografía1.\n",
        "\n",
        "Básicamente, ayuda a evaluar qué tan bien una ubicación admite diversas opciones de transporte, como caminar, andar en bicicleta y el transporte público.\n",
        "\n",
        "Principalmente se usa en los Estados Unidos. Sin embargo, también existen iniciativas similares en otros países. Por ejemplo, en Europa, la Agencia Europea de Medio Ambiente proporciona datos sobre sostenibilidad y accesibilidad urbanas. Además, varias ciudades y regiones en todo el mundo tienen sus propias bases de datos localizadas o estudios relacionados con la eficiencia de la ubicación y las opciones de transporte.\"\n",
        "\n",
        "**Conclusion: se podria agregar como referencia para una busqueda de estos datos.Por el momento la descartaremos.**"
      ],
      "metadata": {
        "id": "zgJcJeCW6yl8"
      },
      "id": "zgJcJeCW6yl8"
    },
    {
      "cell_type": "markdown",
      "source": [
        "> Columnas con informacion de la Propiedad"
      ],
      "metadata": {
        "id": "s2R7vZ18EfoO"
      },
      "id": "s2R7vZ18EfoO"
    },
    {
      "cell_type": "code",
      "source": [
        "#Columnas con informacion de la Propiedad\n",
        "col_property= [ 'description','property_type', 'room_type', 'accommodates','bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities']"
      ],
      "metadata": {
        "id": "hvyImBO-8P-X"
      },
      "id": "hvyImBO-8P-X",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_df[col_property].sample(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "D47CGAwWNzim",
        "outputId": "1c8e5d18-0c58-427e-de0e-c18b1907c17d"
      },
      "id": "D47CGAwWNzim",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                             description property_type  \\\n",
              "20632  McKenzie's Place is a single storey mid-centur...         House   \n",
              "22350  Unfurnished - pictures from real estate agent ...         House   \n",
              "15917  Many places claim to be near the beach but you...   Condominium   \n",
              "\n",
              "             room_type  accommodates  bathrooms  bedrooms  beds  bed_type  \\\n",
              "20632     Private room             2        1.0       1.0   1.0  Real Bed   \n",
              "22350  Entire home/apt             4        1.0       3.0   1.0  Real Bed   \n",
              "15917  Entire home/apt             2        1.0       1.0   1.0  Real Bed   \n",
              "\n",
              "                                               amenities  \n",
              "20632  {TV,Wifi,\"Air conditioning\",Breakfast,\"Free st...  \n",
              "22350  {Kitchen,\"Free parking on premises\",\"Smoke det...  \n",
              "15917  {TV,Wifi,\"Air conditioning\",Kitchen,\"Free park...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-32e00f67-ca8a-48e9-b377-9b7d9d889263\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>description</th>\n",
              "      <th>property_type</th>\n",
              "      <th>room_type</th>\n",
              "      <th>accommodates</th>\n",
              "      <th>bathrooms</th>\n",
              "      <th>bedrooms</th>\n",
              "      <th>beds</th>\n",
              "      <th>bed_type</th>\n",
              "      <th>amenities</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20632</th>\n",
              "      <td>McKenzie's Place is a single storey mid-centur...</td>\n",
              "      <td>House</td>\n",
              "      <td>Private room</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Real Bed</td>\n",
              "      <td>{TV,Wifi,\"Air conditioning\",Breakfast,\"Free st...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22350</th>\n",
              "      <td>Unfurnished - pictures from real estate agent ...</td>\n",
              "      <td>House</td>\n",
              "      <td>Entire home/apt</td>\n",
              "      <td>4</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Real Bed</td>\n",
              "      <td>{Kitchen,\"Free parking on premises\",\"Smoke det...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15917</th>\n",
              "      <td>Many places claim to be near the beach but you...</td>\n",
              "      <td>Condominium</td>\n",
              "      <td>Entire home/apt</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Real Bed</td>\n",
              "      <td>{TV,Wifi,\"Air conditioning\",Kitchen,\"Free park...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-32e00f67-ca8a-48e9-b377-9b7d9d889263')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-32e00f67-ca8a-48e9-b377-9b7d9d889263 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-32e00f67-ca8a-48e9-b377-9b7d9d889263');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7d0cc0c8-246b-47e2-bfe2-fec5a31cc37d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7d0cc0c8-246b-47e2-bfe2-fec5a31cc37d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7d0cc0c8-246b-47e2-bfe2-fec5a31cc37d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"airbnb_df[col_property]\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"McKenzie's Place is a single storey mid-century house close to Black Rock Village and Half Moon Bay.  Half Moon Bay has a fantastic beach kiosk and top class restaurant with the best views ever of the Bay and the city on the horizon,  it's just a 4 minute walk.   The Village is an 8 minute walk to the restaurants, bars and boutique shops. Sandringham train station is 2km away.  Buses run regularly, just around the corner to our house regularly to Sandringham and the bus stop is a 2 minute walk from the house.  Trains from Sandringham run to the City, which is a 25 minute journey.   One of the  train stops is Richmond Station, which is close to  Melbourne's world class sports and entertainment venues, including the MCG, Rod Laver Tennis Arena, the Grand Final and Australian Open. There is free wifi and Netflix and Stan available.   You just need to log into your own account.  Please don't forget to log off when you leave us.  There is also a Bose bluetooth speaker for your use. A kettle\",\n          \"Unfurnished - pictures from real estate agent website. 3 bedrooms, 1 bathroom, kitchen. Parking via ROW at back. Available Dec 22 through until late Feb (negotiable).\",\n          \"Many places claim to be near the beach but you really can\\u2019t get much closer than our cool, light & comfortable \\\"Beach Front Beauty\\\". Situated across the road from famous St. Kilda Beach, 300 metres from Luna Park and 400 metres from Acland Street, with Cake shops, Cafes, Bars, Restaurants, Boutique shops and the Sunday Esplanade Market just a few steps away. The tram stop is a quick 5 minute walk which will take you directly into the city in around 15 minutes. Facing fabulous Port Phillip Bay & St. Kilda Beach, this recently renovated, secure, first floor apartment (1 flight of stairs) has fantastic ocean views so you can enjoy the beautiful scenery and setting sun. With an abundance of natural light, this tastefully decorated seaside abode is the perfect base to explore the surrounding area as well as the rest of Melbourne and beyond. Featuring an oversize Bedroom with built-in robe, small ensuite & Queen Bed plus modern Kitchen, this place has everything you need for a relaxing stay.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"property_type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Condominium\",\n          \"House\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"room_type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Entire home/apt\",\n          \"Private room\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"accommodates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bathrooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bedrooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1547005383792517,\n        \"min\": 1.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"beds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bed_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Real Bed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amenities\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"{TV,Wifi,\\\"Air conditioning\\\",Breakfast,\\\"Free street parking\\\",Heating,\\\"Smoke detector\\\",\\\"First aid kit\\\",Essentials,\\\"Lock on bedroom door\\\",Hangers,\\\"Hair dryer\\\",Iron,\\\"Laptop friendly workspace\\\",\\\"Private living room\\\",\\\"Private entrance\\\",\\\"Hot water\\\",\\\"Luggage dropoff allowed\\\",\\\"Host greets you\\\"}\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Estos campos no nos aportarian mucha informacion, ya que se refieren a la publicacion de una propiedad especifica en la pagina web de Airbnb."
      ],
      "metadata": {
        "id": "YDfkPyKkEmGP"
      },
      "id": "YDfkPyKkEmGP"
    },
    {
      "cell_type": "markdown",
      "source": [
        "> Columnas con informacion de Precios"
      ],
      "metadata": {
        "id": "Magd1U6gFxGG"
      },
      "id": "Magd1U6gFxGG"
    },
    {
      "cell_type": "code",
      "source": [
        " #Columnas con informacion de Precios\n",
        " col_price = ['price','weekly_price', 'monthly_price']"
      ],
      "metadata": {
        "id": "cf2QOsyE_d91"
      },
      "id": "cf2QOsyE_d91",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_df[col_price].sample(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 150
        },
        "id": "M9jnt_iSOkd1",
        "outputId": "7073ee1f-757e-4523-c115-a9db10ac46ab"
      },
      "id": "M9jnt_iSOkd1",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      price  weekly_price  monthly_price\n",
              "121     132         895.0         3763.0\n",
              "2328    100         630.0         1750.0\n",
              "9137    130           NaN            NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d67c422f-da8e-48fa-b857-6e4dbd2345c2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>weekly_price</th>\n",
              "      <th>monthly_price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>121</th>\n",
              "      <td>132</td>\n",
              "      <td>895.0</td>\n",
              "      <td>3763.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2328</th>\n",
              "      <td>100</td>\n",
              "      <td>630.0</td>\n",
              "      <td>1750.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9137</th>\n",
              "      <td>130</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d67c422f-da8e-48fa-b857-6e4dbd2345c2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d67c422f-da8e-48fa-b857-6e4dbd2345c2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d67c422f-da8e-48fa-b857-6e4dbd2345c2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fec960aa-c3a6-4b67-addb-337043001df4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fec960aa-c3a6-4b67-addb-337043001df4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fec960aa-c3a6-4b67-addb-337043001df4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"airbnb_df[col_price]\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 100,\n        \"max\": 132,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          132,\n          100,\n          130\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekly_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 187.3832970144351,\n        \"min\": 630.0,\n        \"max\": 895.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          630.0,\n          895.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"monthly_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1423.4059505285202,\n        \"min\": 1750.0,\n        \"max\": 3763.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1750.0,\n          3763.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Este `price` es por la estadia de una noche, por lo tanto podemos agregar esta informacion como un promedio de los precios de esta estadias por barrio/zipcode/suburb/ o cualquier distincion de ubicacion. En este caso veremos si podemos crear y agregar esta informacion por **zipcode-postcode** .\n",
        "\n",
        "Ademas podemos analizar cuantos datos NaN hay en esta y las otras dos columnas."
      ],
      "metadata": {
        "id": "3AmQhliWO5M7"
      },
      "id": "3AmQhliWO5M7"
    },
    {
      "cell_type": "code",
      "source": [
        "nan_count = airbnb_df['weekly_price'].isna().sum()\n",
        "print(\"Numero de valores NaN en 'weekly_price':\", nan_count)\n",
        "percentage = nan_count / len(airbnb_df)*100\n",
        "print(f\"Porcentaje de valores NaN en weekly_price':{percentage:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M4Epssh7Y6r1",
        "outputId": "3ce62aea-1107-412a-bb32-ffd0adf7d961"
      },
      "id": "M4Epssh7Y6r1",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Numero de valores NaN en 'weekly_price': 20371\n",
            "Porcentaje de valores NaN en weekly_price':88.98%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nan_count = airbnb_df['monthly_price'].isna().sum()\n",
        "print(\"Numero de valores NaN en 'monthly_price':\", nan_count)\n",
        "percentage = nan_count / len(airbnb_df)*100\n",
        "print(f\"Porcentaje de valores NaN en 'monthly_price':{percentage:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WppuNJ-eZAgA",
        "outputId": "e0a9ef43-b150-4424-cc4b-07443dbad0e7"
      },
      "id": "WppuNJ-eZAgA",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Numero de valores NaN en 'monthly_price': 21004\n",
            "Porcentaje de valores NaN en 'monthly_price':91.74%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Estos valores son muy altos, por lo tanto no agragarian mucha informacion a la base de datos de ventas de Melbourne"
      ],
      "metadata": {
        "id": "QHwIoxy5c3Im"
      },
      "id": "QHwIoxy5c3Im"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k3Z2vxNHJfJK"
      },
      "source": [
        "#Columnas \"interesantes\" vistas en clase\n",
        "interesting_cols = ['description', 'neighborhood_overview',\n",
        "                    'street', 'neighborhood', 'city', 'suburb', 'state', 'zipcode',\n",
        "                    'price', 'weekly_price', 'monthly_price','latitude', 'longitude']"
      ],
      "execution_count": null,
      "outputs": [],
      "id": "k3Z2vxNHJfJK"
    },
    {
      "cell_type": "code",
      "source": [
        "#Columnas con informacion extra, respectivas a datos relevantes para los alquileres temporales de Airbnb\n",
        "extra = ['id', 'listing_url', 'scrape_id', 'last_scraped', 'name', 'summary',\n",
        "         'space', 'notes', 'transit','access', 'interaction', 'house_rules',\n",
        "         'picture_url', 'host_id','host_url', 'host_name', 'host_since',\n",
        "         'host_location', 'host_about','host_response_time', 'host_response_rate',\n",
        "         'host_is_superhost','host_thumbnail_url', 'host_picture_url', 'host_neighborhood',\n",
        "         'host_verifications', 'host_has_profile_pic', 'host_identity_verified',\n",
        "         'security_deposit', 'cleaning_fee','maximum_nights',\n",
        "         'guests_included', 'extra_people', 'minimum_nights',\n",
        "         'calendar_updated', 'has_availability', 'availability_30',\n",
        "         'availability_60', 'availability_90', 'availability_365',\n",
        "         'calendar_last_scraped', 'number_of_reviews', 'first_review',\n",
        "         'last_review', 'review_scores_rating', 'review_scores_accuracy',\n",
        "         'review_scores_cleanliness', 'review_scores_checkin',\n",
        "         'review_scores_communication', 'review_scores_location',\n",
        "         'review_scores_value', 'requires_license', 'license',\n",
        "         'instant_bookable', 'cancellation_policy',\n",
        "         'require_guest_profile_picture', 'require_guest_phone_verification',\n",
        "         'calculated_host_listings_count', 'reviews_per_month']"
      ],
      "metadata": {
        "id": "SigUIgfU-0L4"
      },
      "id": "SigUIgfU-0L4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_df[extra].sample(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 583
        },
        "id": "i1TqgEMBPFZ8",
        "outputId": "6d22c2b4-abb6-4a1b-b9e7-bd9b8588f159"
      },
      "id": "i1TqgEMBPFZ8",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             id                            listing_url     scrape_id  \\\n",
              "12555  21320532  https://www.airbnb.com/rooms/21320532  2.018120e+13   \n",
              "19783  28389919  https://www.airbnb.com/rooms/28389919  2.018120e+13   \n",
              "9848   18319330  https://www.airbnb.com/rooms/18319330  2.018120e+13   \n",
              "\n",
              "      last_scraped                                              name  \\\n",
              "12555    12/7/2018                  Affordable room in Melbourne CBD   \n",
              "19783    12/7/2018  ABODE OCEAN VIEW DELUXE TWO BEDROOM TWO BATHROOM   \n",
              "9848     12/7/2018                                      Richmond Gem   \n",
              "\n",
              "                                                 summary  \\\n",
              "12555  Located right in the centre of Melbourne CBD, ...   \n",
              "19783  Views from Apartments of Melbourne Collins Str...   \n",
              "9848   We are going away for 8 nights and want to sub...   \n",
              "\n",
              "                                                   space  \\\n",
              "12555  Our 29th floor apartment with floor to ceiling...   \n",
              "19783  Our new ABODE OCEAN VIEW DELUXE SUITE come wit...   \n",
              "9848                                                 NaN   \n",
              "\n",
              "                                                   notes  \\\n",
              "12555                                                NaN   \n",
              "19783  To comply with building rules, local and state...   \n",
              "9848   This is our home so we want the right type of ...   \n",
              "\n",
              "                                                 transit  \\\n",
              "12555  Our apartment is located in the heart of Melbo...   \n",
              "19783  Route 11 and Route 12 stop outside our door. R...   \n",
              "9848        Close to 12 and 109 tram on Victoria Street.   \n",
              "\n",
              "                                                  access  ...  \\\n",
              "12555  You can use the oven, microwave, fridge, washi...  ...   \n",
              "19783  You will have full access to your apartment du...  ...   \n",
              "9848       Whole apartment, communal laundry in building  ...   \n",
              "\n",
              "      review_scores_location review_scores_value requires_license  license  \\\n",
              "12555                   10.0                10.0                f      NaN   \n",
              "19783                    NaN                 NaN                f      NaN   \n",
              "9848                     NaN                 NaN                f      NaN   \n",
              "\n",
              "      instant_bookable          cancellation_policy  \\\n",
              "12555                t                     flexible   \n",
              "19783                f  strict_14_with_grace_period   \n",
              "9848                 f                     flexible   \n",
              "\n",
              "      require_guest_profile_picture require_guest_phone_verification  \\\n",
              "12555                             f                                f   \n",
              "19783                             f                                f   \n",
              "9848                              f                                f   \n",
              "\n",
              "      calculated_host_listings_count reviews_per_month  \n",
              "12555                              1              0.64  \n",
              "19783                             13               NaN  \n",
              "9848                               1               NaN  \n",
              "\n",
              "[3 rows x 59 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c28aff7-4f8a-4513-9729-fec02d87984a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>listing_url</th>\n",
              "      <th>scrape_id</th>\n",
              "      <th>last_scraped</th>\n",
              "      <th>name</th>\n",
              "      <th>summary</th>\n",
              "      <th>space</th>\n",
              "      <th>notes</th>\n",
              "      <th>transit</th>\n",
              "      <th>access</th>\n",
              "      <th>...</th>\n",
              "      <th>review_scores_location</th>\n",
              "      <th>review_scores_value</th>\n",
              "      <th>requires_license</th>\n",
              "      <th>license</th>\n",
              "      <th>instant_bookable</th>\n",
              "      <th>cancellation_policy</th>\n",
              "      <th>require_guest_profile_picture</th>\n",
              "      <th>require_guest_phone_verification</th>\n",
              "      <th>calculated_host_listings_count</th>\n",
              "      <th>reviews_per_month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>12555</th>\n",
              "      <td>21320532</td>\n",
              "      <td>https://www.airbnb.com/rooms/21320532</td>\n",
              "      <td>2.018120e+13</td>\n",
              "      <td>12/7/2018</td>\n",
              "      <td>Affordable room in Melbourne CBD</td>\n",
              "      <td>Located right in the centre of Melbourne CBD, ...</td>\n",
              "      <td>Our 29th floor apartment with floor to ceiling...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Our apartment is located in the heart of Melbo...</td>\n",
              "      <td>You can use the oven, microwave, fridge, washi...</td>\n",
              "      <td>...</td>\n",
              "      <td>10.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>f</td>\n",
              "      <td>NaN</td>\n",
              "      <td>t</td>\n",
              "      <td>flexible</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>1</td>\n",
              "      <td>0.64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19783</th>\n",
              "      <td>28389919</td>\n",
              "      <td>https://www.airbnb.com/rooms/28389919</td>\n",
              "      <td>2.018120e+13</td>\n",
              "      <td>12/7/2018</td>\n",
              "      <td>ABODE OCEAN VIEW DELUXE TWO BEDROOM TWO BATHROOM</td>\n",
              "      <td>Views from Apartments of Melbourne Collins Str...</td>\n",
              "      <td>Our new ABODE OCEAN VIEW DELUXE SUITE come wit...</td>\n",
              "      <td>To comply with building rules, local and state...</td>\n",
              "      <td>Route 11 and Route 12 stop outside our door. R...</td>\n",
              "      <td>You will have full access to your apartment du...</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>f</td>\n",
              "      <td>NaN</td>\n",
              "      <td>f</td>\n",
              "      <td>strict_14_with_grace_period</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>13</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9848</th>\n",
              "      <td>18319330</td>\n",
              "      <td>https://www.airbnb.com/rooms/18319330</td>\n",
              "      <td>2.018120e+13</td>\n",
              "      <td>12/7/2018</td>\n",
              "      <td>Richmond Gem</td>\n",
              "      <td>We are going away for 8 nights and want to sub...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>This is our home so we want the right type of ...</td>\n",
              "      <td>Close to 12 and 109 tram on Victoria Street.</td>\n",
              "      <td>Whole apartment, communal laundry in building</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>f</td>\n",
              "      <td>NaN</td>\n",
              "      <td>f</td>\n",
              "      <td>flexible</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3 rows × 59 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c28aff7-4f8a-4513-9729-fec02d87984a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3c28aff7-4f8a-4513-9729-fec02d87984a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3c28aff7-4f8a-4513-9729-fec02d87984a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2e6f6b27-6089-4536-8c61-3f3a16ebb649\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2e6f6b27-6089-4536-8c61-3f3a16ebb649')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2e6f6b27-6089-4536-8c61-3f3a16ebb649 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Entre estas columnas, podria se interesante de ver el campo `review_scores_location` para agregar esta informacion en la informacion del entorno de la propiedad, ya que, por lo que entiendo es un puntaje/puntaje promedio de las reviews hacia la localizacion de la propiedad. Por lo tanto podria ser menos sesgada positivamente que el campo `neighborhood_overview`, por ser informacion otorgada por los clientes y no por el propietario."
      ],
      "metadata": {
        "id": "2rIYExguQP5X"
      },
      "id": "2rIYExguQP5X"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Analicemos esto numericamente mas a fondo"
      ],
      "metadata": {
        "id": "bk8mbC_BgQLe"
      },
      "id": "bk8mbC_BgQLe"
    },
    {
      "cell_type": "code",
      "source": [
        "review_scores_location_df= airbnb_df[['zipcode','review_scores_location']]"
      ],
      "metadata": {
        "id": "ovZoE6GCgP0n"
      },
      "id": "ovZoE6GCgP0n",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "review_scores_location_df = review_scores_location_df.groupby('zipcode')['review_scores_location'].mean().reset_index()"
      ],
      "metadata": {
        "id": "oKdM8XfXhQzp"
      },
      "id": "oKdM8XfXhQzp",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "review_scores_location_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 446
        },
        "id": "aQDh_sN9hWsg",
        "outputId": "5cb32afc-c9c0-4d10-bd7d-859076514678"
      },
      "id": "aQDh_sN9hWsg",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      zipcode  review_scores_location\n",
              "0      2010.0                     NaN\n",
              "1      2134.0                     NaN\n",
              "2      2582.0                     NaN\n",
              "3      3000.0                9.902364\n",
              "4      3001.0                8.000000\n",
              "..        ...                     ...\n",
              "458      3977                9.294118\n",
              "459      3978                9.666667\n",
              "460      3980               10.000000\n",
              "461       VIC               10.000000\n",
              "462  VIC 3161                9.000000\n",
              "\n",
              "[463 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4bcc424d-5b56-48c8-979d-e05c0106049f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>zipcode</th>\n",
              "      <th>review_scores_location</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2010.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2134.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2582.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3000.0</td>\n",
              "      <td>9.902364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3001.0</td>\n",
              "      <td>8.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>458</th>\n",
              "      <td>3977</td>\n",
              "      <td>9.294118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>459</th>\n",
              "      <td>3978</td>\n",
              "      <td>9.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>460</th>\n",
              "      <td>3980</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>461</th>\n",
              "      <td>VIC</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>462</th>\n",
              "      <td>VIC 3161</td>\n",
              "      <td>9.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>463 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4bcc424d-5b56-48c8-979d-e05c0106049f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4bcc424d-5b56-48c8-979d-e05c0106049f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4bcc424d-5b56-48c8-979d-e05c0106049f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-76a91d1d-8460-4115-966f-7b4bb30da2fd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-76a91d1d-8460-4115-966f-7b4bb30da2fd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-76a91d1d-8460-4115-966f-7b4bb30da2fd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "review_scores_location_df",
              "summary": "{\n  \"name\": \"review_scores_location_df\",\n  \"rows\": 463,\n  \"fields\": [\n    {\n      \"column\": \"zipcode\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 463,\n        \"samples\": [\n          3975.0,\n          3036.0,\n          3046.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"review_scores_location\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4527369190262008,\n        \"min\": 5.5,\n        \"max\": 10.0,\n        \"num_unique_values\": 205,\n        \"samples\": [\n          9.714285714285714,\n          9.484848484848484,\n          9.358490566037736\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Minimo:',review_scores_location_df['review_scores_location'].min())\n",
        "print('Maximo:',review_scores_location_df['review_scores_location'].max())\n",
        "nan_count = review_scores_location_df['review_scores_location'].isna().sum()\n",
        "print(\"Numero de valores NaN: \", nan_count)\n",
        "percentage = nan_count / len(review_scores_location_df)*100\n",
        "print(f\"Porcentaje de valores NaN: {percentage:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N4Zm77yahZz9",
        "outputId": "b46562d1-b986-4203-d61a-03596475f0c4"
      },
      "id": "N4Zm77yahZz9",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Minimo: 5.5\n",
            "Maximo: 10.0\n",
            "Numero de valores NaN:  19\n",
            "Porcentaje de valores NaN: 4.10%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En general tiene bastante informacion para agregar."
      ],
      "metadata": {
        "id": "dcSd3On4igur"
      },
      "id": "dcSd3On4igur"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Otro campo que podria sumar informacion al entorno es `transit`, que aporta informacion de transporte publico en la zona."
      ],
      "metadata": {
        "id": "GWwEZO4rI0PC"
      },
      "id": "GWwEZO4rI0PC"
    },
    {
      "cell_type": "markdown",
      "source": [
        "> En general, los campos que no fueron destacados es porque aportan informacion muy puntual y especifica a las propiedades publicadas en Airbnb y para su alquiler temporal."
      ],
      "metadata": {
        "id": "RYu3HdUiKUCm"
      },
      "id": "RYu3HdUiKUCm"
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color='green'> Por lo tanto,una posible seleccion de columnas interesantes para agregar a la base de datos del challenge seria :"
      ],
      "metadata": {
        "id": "luB4gfqjJqqK"
      },
      "id": "luB4gfqjJqqK"
    },
    {
      "cell_type": "code",
      "source": [
        "new_insteresting_col = ['neighborhood', 'neighborhood_overview','city', 'suburb', 'state', 'zipcode',\n",
        "               'smart_location','price', 'review_score_location','transit']"
      ],
      "metadata": {
        "id": "7aOxKCGBJ4wn"
      },
      "id": "7aOxKCGBJ4wn",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Luego veremos que algunos de estos campos son mas directos de agregar/modificar/combinar que otros."
      ],
      "metadata": {
        "id": "1F18kTCkovjC"
      },
      "id": "1F18kTCkovjC"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Pandas 2.2\n",
        "\n",
        "---\n",
        "\n",
        "Ahora realicemos los preparativos para agregar esta informacion y unir los conjuntos de datos por medio de la variable `zipcode` y `Postcode`\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "ENDuQhDYL-N_"
      },
      "id": "ENDuQhDYL-N_"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Primero deberiamos de cambiar los tipos de los zipcodes para que tengan todos, el mismo tipo.\n"
      ],
      "metadata": {
        "id": "firlPwmVrBm-"
      },
      "id": "firlPwmVrBm-"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Algunos son enteros otros flotantes, en general toma la columna como un objeto, y como en Melbourne se usan datos flotantes, transformemos estos zipcodes como se hizo en clase."
      ],
      "metadata": {
        "id": "QaashmlNwTqV"
      },
      "id": "QaashmlNwTqV"
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_df['zipcode'].sample(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a8pGIYvsrKGX",
        "outputId": "0fdf8f36-3016-439e-a110-ede2574f29a1"
      },
      "id": "a8pGIYvsrKGX",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2247       3121\n",
              "7791       3182\n",
              "15734    3000.0\n",
              "106        3980\n",
              "22666    3128.0\n",
              "Name: zipcode, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "melb_df['Postcode'].sample(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5JCt4nsDwLhV",
        "outputId": "2a3663dc-b86b-4340-b6ae-2e564b77de23"
      },
      "id": "5JCt4nsDwLhV",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1154    3186.0\n",
              "3511    3031.0\n",
              "7030    3084.0\n",
              "7101    3012.0\n",
              "8229    3207.0\n",
              "Name: Postcode, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_df['zipcode'] = pd.to_numeric(airbnb_df.zipcode, errors='coerce')"
      ],
      "metadata": {
        "id": "XGsoKQo3wpWz"
      },
      "id": "XGsoKQo3wpWz",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Esto transforma todo lo que es numero a valor numerico flotante pero quedan valores que no son uno u otro (vacios, nan, u otra entrada) y los transforma en NaN"
      ],
      "metadata": {
        "id": "J93s5x76zvPe"
      },
      "id": "J93s5x76zvPe"
    },
    {
      "cell_type": "code",
      "source": [
        "nan_count = airbnb_df['zipcode'].isna().sum()\n",
        "print(\"Numero de valores NaN en 'zipcode':\", nan_count)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0VwCTwjGx1xD",
        "outputId": "9218b1fc-f071-4f1f-b8c1-4eda3cb9824b"
      },
      "id": "0VwCTwjGx1xD",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Numero de valores NaN en 'zipcode': 146\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Rellenemos los NaN con ceros"
      ],
      "metadata": {
        "id": "pT7MFQ6i0YiB"
      },
      "id": "pT7MFQ6i0YiB"
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_df['zipcode_int'] = airbnb_df.zipcode.fillna(0).astype('int')"
      ],
      "metadata": {
        "id": "Qv4tUsz2zt52"
      },
      "id": "Qv4tUsz2zt52",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "airbnb_df['zipcode'].sample(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NyZmjsJD02u0",
        "outputId": "fc66dc30-4a43-4d76-9553-4c0aca5932a4"
      },
      "id": "NyZmjsJD02u0",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5705     3002.0\n",
              "1169     3182.0\n",
              "19746    3004.0\n",
              "11268    3207.0\n",
              "2382     3183.0\n",
              "Name: zipcode, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora veamos lo que mencionamos antes, la transformacion de la columna `price` a un nuevo campo llamado `mean_price_airbnb` que represente el promedio de precio por estadia de una noche en la plataforma de Airbnb por cada `zipcode`.\n",
        "\n",
        "Esto podria aportar informacion relevante para un posible vendedor/comprador de una propiedad, pensando no solo en la inversion de la propiedad en si, si no como un posible ingreso por medio del alquiler temporal."
      ],
      "metadata": {
        "id": "-d6jtKl7ppc2"
      },
      "id": "-d6jtKl7ppc2"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tambien podemos agregar el minimo y maximo valor para otorgar un rango de precios por zipcode"
      ],
      "metadata": {
        "id": "7hc4dM0udWPk"
      },
      "id": "7hc4dM0udWPk"
    },
    {
      "cell_type": "markdown",
      "source": [
        "A la vez podemos agregar la informacion que obtuvimos en el campo `review_scores_location`"
      ],
      "metadata": {
        "id": "fWh7YqFgjdiX"
      },
      "id": "fWh7YqFgjdiX"
    },
    {
      "cell_type": "code",
      "source": [
        "relevant_cols = ['price','zipcode','review_scores_location']\n",
        "new_info_by_zipcode = airbnb_df[relevant_cols].groupby('zipcode')\\\n",
        "                          .agg({'price': ['mean','count', 'min','max'],'review_scores_location': 'mean'})\\\n",
        "                          .reset_index()"
      ],
      "metadata": {
        "id": "wjn7o_dmOlrs"
      },
      "id": "wjn7o_dmOlrs",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_info_by_zipcode"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "FP01Fxe0OlqC",
        "outputId": "fefbfc32-8ccf-40ca-dec1-6b5c4c3d0d99"
      },
      "id": "FP01Fxe0OlqC",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     zipcode       price                  review_scores_location\n",
              "                    mean count  min   max                   mean\n",
              "0     2010.0   40.000000     1   40    40                    NaN\n",
              "1     2134.0   50.000000     1   50    50                    NaN\n",
              "2     2582.0  104.000000     1  104   104                    NaN\n",
              "3     3000.0  150.504307  3367    0  9000               9.912808\n",
              "4     3001.0  132.500000     2  120   145               9.000000\n",
              "..       ...         ...   ...  ...   ...                    ...\n",
              "242   7367.0  230.000000     1  230   230                    NaN\n",
              "243   8938.0  296.000000     1  296   296                    NaN\n",
              "244   9004.0  226.000000     1  226   226                    NaN\n",
              "245   9540.0  245.000000     1  245   245                    NaN\n",
              "246  30122.0   75.000000     1   75    75              10.000000\n",
              "\n",
              "[247 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c73ce18d-002c-40fa-adcf-0e55c10cc9c3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>zipcode</th>\n",
              "      <th colspan=\"4\" halign=\"left\">price</th>\n",
              "      <th>review_scores_location</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>mean</th>\n",
              "      <th>count</th>\n",
              "      <th>min</th>\n",
              "      <th>max</th>\n",
              "      <th>mean</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2010.0</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>40</td>\n",
              "      <td>40</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2134.0</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>50</td>\n",
              "      <td>50</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2582.0</td>\n",
              "      <td>104.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>104</td>\n",
              "      <td>104</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3000.0</td>\n",
              "      <td>150.504307</td>\n",
              "      <td>3367</td>\n",
              "      <td>0</td>\n",
              "      <td>9000</td>\n",
              "      <td>9.912808</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3001.0</td>\n",
              "      <td>132.500000</td>\n",
              "      <td>2</td>\n",
              "      <td>120</td>\n",
              "      <td>145</td>\n",
              "      <td>9.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>242</th>\n",
              "      <td>7367.0</td>\n",
              "      <td>230.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>230</td>\n",
              "      <td>230</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>243</th>\n",
              "      <td>8938.0</td>\n",
              "      <td>296.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>296</td>\n",
              "      <td>296</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>244</th>\n",
              "      <td>9004.0</td>\n",
              "      <td>226.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>226</td>\n",
              "      <td>226</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>245</th>\n",
              "      <td>9540.0</td>\n",
              "      <td>245.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>245</td>\n",
              "      <td>245</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>30122.0</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>75</td>\n",
              "      <td>75</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>247 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c73ce18d-002c-40fa-adcf-0e55c10cc9c3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c73ce18d-002c-40fa-adcf-0e55c10cc9c3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c73ce18d-002c-40fa-adcf-0e55c10cc9c3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-97e0ebe2-db11-4c06-b301-e34247c2e1ae\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97e0ebe2-db11-4c06-b301-e34247c2e1ae')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-97e0ebe2-db11-4c06-b301-e34247c2e1ae button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_info_by_zipcode",
              "summary": "{\n  \"name\": \"new_info_by_zipcode\",\n  \"rows\": 247,\n  \"fields\": [\n    {\n      \"column\": [\n        \"zipcode\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1903.9143903097424,\n        \"min\": 2010.0,\n        \"max\": 30122.0,\n        \"num_unique_values\": 247,\n        \"samples\": [\n          3039.0,\n          3003.0,\n          3338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"mean\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84.87298814880268,\n        \"min\": 37.0,\n        \"max\": 759.0833333333334,\n        \"num_unique_values\": 243,\n        \"samples\": [\n          76.15044247787611,\n          130.20599250936328,\n          282.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"count\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 261,\n        \"min\": 1,\n        \"max\": 3367,\n        \"num_unique_values\": 113,\n        \"samples\": [\n          118,\n          267,\n          138\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"min\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": 0,\n        \"max\": 302,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          75,\n          29,\n          120\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"max\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1435,\n        \"min\": 37,\n        \"max\": 12624,\n        \"num_unique_values\": 148,\n        \"samples\": [\n          865,\n          275,\n          368\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"review_scores_location\",\n        \"mean\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37228980984852367,\n        \"min\": 7.5,\n        \"max\": 10.0,\n        \"num_unique_values\": 148,\n        \"samples\": [\n          9.852941176470589,\n          9.768595041322314,\n          9.86144578313253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Aplana las columnas de dos niveles.\n",
        "new_info_by_zipcode.columns = [\n",
        "  ' '.join(col).strip()\n",
        "  for col in new_info_by_zipcode.columns.values]\n",
        "# Cambia el nombre de las columnas\n",
        "new_info_by_zipcode = new_info_by_zipcode.rename(\n",
        "    columns={'price mean': 'airbnb_price_mean',\n",
        "             'price count': 'airbnb_count_records',\n",
        "             'price max': 'airbnb_price_max',\n",
        "             'price min': 'airbnb_price_min',\n",
        "             'review_scores_location mean': 'airbnb_review_scores_location_mean'}\n",
        ")"
      ],
      "metadata": {
        "id": "0Z6eExz6PYRG"
      },
      "id": "0Z6eExz6PYRG",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_info_by_zipcode"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "efMp4N_qPnbb",
        "outputId": "792d0507-cb45-43c3-ea21-274c8a71e146"
      },
      "id": "efMp4N_qPnbb",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     zipcode  airbnb_price_mean  airbnb_count_records  airbnb_price_min  \\\n",
              "0     2010.0          40.000000                     1                40   \n",
              "1     2134.0          50.000000                     1                50   \n",
              "2     2582.0         104.000000                     1               104   \n",
              "3     3000.0         150.504307                  3367                 0   \n",
              "4     3001.0         132.500000                     2               120   \n",
              "..       ...                ...                   ...               ...   \n",
              "242   7367.0         230.000000                     1               230   \n",
              "243   8938.0         296.000000                     1               296   \n",
              "244   9004.0         226.000000                     1               226   \n",
              "245   9540.0         245.000000                     1               245   \n",
              "246  30122.0          75.000000                     1                75   \n",
              "\n",
              "     airbnb_price_max  airbnb_review_scores_location_mean  \n",
              "0                  40                                 NaN  \n",
              "1                  50                                 NaN  \n",
              "2                 104                                 NaN  \n",
              "3                9000                            9.912808  \n",
              "4                 145                            9.000000  \n",
              "..                ...                                 ...  \n",
              "242               230                                 NaN  \n",
              "243               296                                 NaN  \n",
              "244               226                                 NaN  \n",
              "245               245                                 NaN  \n",
              "246                75                           10.000000  \n",
              "\n",
              "[247 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fdfa0a15-c8a4-4fd3-ad62-040e379058b9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>zipcode</th>\n",
              "      <th>airbnb_price_mean</th>\n",
              "      <th>airbnb_count_records</th>\n",
              "      <th>airbnb_price_min</th>\n",
              "      <th>airbnb_price_max</th>\n",
              "      <th>airbnb_review_scores_location_mean</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2010.0</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>40</td>\n",
              "      <td>40</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2134.0</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>50</td>\n",
              "      <td>50</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2582.0</td>\n",
              "      <td>104.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>104</td>\n",
              "      <td>104</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3000.0</td>\n",
              "      <td>150.504307</td>\n",
              "      <td>3367</td>\n",
              "      <td>0</td>\n",
              "      <td>9000</td>\n",
              "      <td>9.912808</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3001.0</td>\n",
              "      <td>132.500000</td>\n",
              "      <td>2</td>\n",
              "      <td>120</td>\n",
              "      <td>145</td>\n",
              "      <td>9.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>242</th>\n",
              "      <td>7367.0</td>\n",
              "      <td>230.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>230</td>\n",
              "      <td>230</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>243</th>\n",
              "      <td>8938.0</td>\n",
              "      <td>296.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>296</td>\n",
              "      <td>296</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>244</th>\n",
              "      <td>9004.0</td>\n",
              "      <td>226.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>226</td>\n",
              "      <td>226</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>245</th>\n",
              "      <td>9540.0</td>\n",
              "      <td>245.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>245</td>\n",
              "      <td>245</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>30122.0</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>75</td>\n",
              "      <td>75</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>247 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fdfa0a15-c8a4-4fd3-ad62-040e379058b9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fdfa0a15-c8a4-4fd3-ad62-040e379058b9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fdfa0a15-c8a4-4fd3-ad62-040e379058b9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-88752aaf-059b-4f2f-8dfa-8bd09b497b7f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-88752aaf-059b-4f2f-8dfa-8bd09b497b7f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-88752aaf-059b-4f2f-8dfa-8bd09b497b7f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_info_by_zipcode",
              "summary": "{\n  \"name\": \"new_info_by_zipcode\",\n  \"rows\": 247,\n  \"fields\": [\n    {\n      \"column\": \"zipcode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1903.9143903097424,\n        \"min\": 2010.0,\n        \"max\": 30122.0,\n        \"num_unique_values\": 247,\n        \"samples\": [\n          3039.0,\n          3003.0,\n          3338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_price_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84.87298814880268,\n        \"min\": 37.0,\n        \"max\": 759.0833333333334,\n        \"num_unique_values\": 243,\n        \"samples\": [\n          76.15044247787611,\n          130.20599250936328,\n          282.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_count_records\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 261,\n        \"min\": 1,\n        \"max\": 3367,\n        \"num_unique_values\": 113,\n        \"samples\": [\n          118,\n          267,\n          138\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_price_min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": 0,\n        \"max\": 302,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          75,\n          29,\n          120\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_price_max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1435,\n        \"min\": 37,\n        \"max\": 12624,\n        \"num_unique_values\": 148,\n        \"samples\": [\n          865,\n          275,\n          368\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_review_scores_location_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37228980984852367,\n        \"min\": 7.5,\n        \"max\": 10.0,\n        \"num_unique_values\": 148,\n        \"samples\": [\n          9.852941176470589,\n          9.768595041322314,\n          9.86144578313253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(new_info_by_zipcode[new_info_by_zipcode['airbnb_count_records'] > 0 ])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9SiIPljYlvvI",
        "outputId": "6f4f1412-a656-464f-d553-23be763f6a66"
      },
      "id": "9SiIPljYlvvI",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "247"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "El minimo de registros para cada `zipcode` es 1, podriamos considerar de tomar los zipcodes con mas cantidad de registros pero hay algunos valores de alquileres bastante altos a pesar que son un solo registro. Es decir que por mas que son un solo registro para el zipcode, aun asi aporta informacion de la zona y su rentabilidad.\n",
        "\n",
        "Por lo tanto no descartaremos ningun dato. Pero si mantendremos la columna que muestra la cantidad de registros por zipcode,`airbnb_count_records` , para dar contexto a los datos y la cantidad de propiedades en alquiler por zipcode."
      ],
      "metadata": {
        "id": "8SMNHsudpIsw"
      },
      "id": "8SMNHsudpIsw"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora unamos esto con los demas datos que destacamos, para luego unirlos con la database de Melbourne"
      ],
      "metadata": {
        "id": "ukm7GDyL2O2P"
      },
      "id": "ukm7GDyL2O2P"
    },
    {
      "cell_type": "code",
      "source": [
        "new_merged_sales_df = new_melb_df_filtered.merge(\n",
        "    new_info_by_zipcode, how='left',\n",
        "    left_on='Postcode', right_on='zipcode'\n",
        ")\n",
        "new_merged_sales_df = new_merged_sales_df.drop(columns=['zipcode'])\n",
        "new_merged_sales_df.sample(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "outputId": "ac5a08b6-c57a-4fe2-9cfa-f217c8178f63",
        "id": "NEHFFObbCPPM"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Suburb  Rooms Type      Price Method  Bedroom2  Bathroom  \\\n",
              "7513            Box Hill      3    h  2080000.0      S       3.0       2.0   \n",
              "7102         Murrumbeena      3    h  1355000.0      S       3.0       1.0   \n",
              "3257  Heidelberg Heights      3    h   550000.0     VB       3.0       1.0   \n",
              "5699           Southbank      2    u   530000.0     VB       2.0       1.0   \n",
              "2640          Flemington      2    u   350000.0     VB       2.0       1.0   \n",
              "\n",
              "      Car  Landsize  BuildingArea  YearBuilt  Postcode  airbnb_price_mean  \\\n",
              "7513  2.0     693.0         158.0     1925.0    3128.0         111.443925   \n",
              "7102  6.0     612.0           NaN        NaN    3163.0          94.205128   \n",
              "3257  1.0     420.0          90.0     1960.0    3081.0          83.657895   \n",
              "5699  1.0       0.0          84.0     2003.0    3006.0         188.851735   \n",
              "2640  1.0       0.0           NaN     1970.0    3031.0         119.914894   \n",
              "\n",
              "      airbnb_count_records  airbnb_price_min  airbnb_price_max  \\\n",
              "7513                 214.0              17.0             700.0   \n",
              "7102                 156.0              25.0             415.0   \n",
              "3257                  38.0              25.0             453.0   \n",
              "5699                1268.0              17.0            2998.0   \n",
              "2640                 188.0              19.0             999.0   \n",
              "\n",
              "      airbnb_review_scores_location_mean  \n",
              "7513                            9.572414  \n",
              "7102                            9.542857  \n",
              "3257                            8.920000  \n",
              "5699                            9.831074  \n",
              "2640                            9.572519  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea56b381-9fc9-4d1f-89c6-436af28fefbe\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>Bedroom2</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Car</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>Postcode</th>\n",
              "      <th>airbnb_price_mean</th>\n",
              "      <th>airbnb_count_records</th>\n",
              "      <th>airbnb_price_min</th>\n",
              "      <th>airbnb_price_max</th>\n",
              "      <th>airbnb_review_scores_location_mean</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7513</th>\n",
              "      <td>Box Hill</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>2080000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>693.0</td>\n",
              "      <td>158.0</td>\n",
              "      <td>1925.0</td>\n",
              "      <td>3128.0</td>\n",
              "      <td>111.443925</td>\n",
              "      <td>214.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>700.0</td>\n",
              "      <td>9.572414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7102</th>\n",
              "      <td>Murrumbeena</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>1355000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>612.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3163.0</td>\n",
              "      <td>94.205128</td>\n",
              "      <td>156.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>415.0</td>\n",
              "      <td>9.542857</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3257</th>\n",
              "      <td>Heidelberg Heights</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>550000.0</td>\n",
              "      <td>VB</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>1960.0</td>\n",
              "      <td>3081.0</td>\n",
              "      <td>83.657895</td>\n",
              "      <td>38.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>453.0</td>\n",
              "      <td>8.920000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5699</th>\n",
              "      <td>Southbank</td>\n",
              "      <td>2</td>\n",
              "      <td>u</td>\n",
              "      <td>530000.0</td>\n",
              "      <td>VB</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>2003.0</td>\n",
              "      <td>3006.0</td>\n",
              "      <td>188.851735</td>\n",
              "      <td>1268.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>2998.0</td>\n",
              "      <td>9.831074</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2640</th>\n",
              "      <td>Flemington</td>\n",
              "      <td>2</td>\n",
              "      <td>u</td>\n",
              "      <td>350000.0</td>\n",
              "      <td>VB</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1970.0</td>\n",
              "      <td>3031.0</td>\n",
              "      <td>119.914894</td>\n",
              "      <td>188.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>999.0</td>\n",
              "      <td>9.572519</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea56b381-9fc9-4d1f-89c6-436af28fefbe')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ea56b381-9fc9-4d1f-89c6-436af28fefbe button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ea56b381-9fc9-4d1f-89c6-436af28fefbe');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3c589c21-0b9c-4944-af08-f9654e218cf1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3c589c21-0b9c-4944-af08-f9654e218cf1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3c589c21-0b9c-4944-af08-f9654e218cf1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"new_merged_sales_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Suburb\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Murrumbeena\",\n          \"Flemington\",\n          \"Heidelberg Heights\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"u\",\n          \"h\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 730527.2068855478,\n        \"min\": 350000.0,\n        \"max\": 2080000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1355000.0,\n          350000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"VB\",\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bedroom2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5477225575051661,\n        \"min\": 2.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bathroom\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.44721359549995804,\n        \"min\": 1.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Car\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1679483388678804,\n        \"min\": 1.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2.0,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Landsize\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330.1772251382581,\n        \"min\": 0.0,\n        \"max\": 693.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          612.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BuildingArea\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.10150037812894,\n        \"min\": 84.0,\n        \"max\": 158.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          158.0,\n          90.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearBuilt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.109188716004645,\n        \"min\": 1925.0,\n        \"max\": 2003.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1960.0,\n          1970.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Postcode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65.29701371425801,\n        \"min\": 3006.0,\n        \"max\": 3163.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3163.0,\n          3031.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_price_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.22850008730547,\n        \"min\": 83.65789473684211,\n        \"max\": 188.85173501577287,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          94.2051282051282,\n          119.91489361702128\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_count_records\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 504.93682773194513,\n        \"min\": 38.0,\n        \"max\": 1268.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          156.0,\n          188.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_price_min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.09878030638384,\n        \"min\": 17.0,\n        \"max\": 25.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          17.0,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_price_max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1079.3046372549318,\n        \"min\": 415.0,\n        \"max\": 2998.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          415.0,\n          999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airbnb_review_scores_location_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3382314318155474,\n        \"min\": 8.92,\n        \"max\": 9.831074035453598,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          9.542857142857143,\n          9.572519083969466\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "id": "NEHFFObbCPPM"
    },
    {
      "cell_type": "code",
      "source": [
        "len(new_merged_sales_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dJ3DuyS7_r0a",
        "outputId": "fd99f2a4-823c-4a19-ea0b-4138bb1f8c37"
      },
      "id": "dJ3DuyS7_r0a",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13524"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Pandas 2.3\n",
        "\n",
        "---\n",
        "* *Investigar al menos otras 2 variables que puedan servir para combinar los datos, y justificar si serían adecuadas o no. Pueden asumir que cuentan con la ayuda de anotadores expertos para encontrar equivalencias entre barrios o direcciones, o que cuentan con algoritmos para encontrar las n ubicaciones más cercanas a una propiedad a partir de sus coordenadas geográficas. NO es necesario que realicen la implementación.*\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "ui427DdLAFFn"
      },
      "id": "ui427DdLAFFn"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Observemos que variables podrian usarse para combinar los datos:\n",
        "\n",
        "* `Postcode` y `zipcode` son las variables que utilizamos para hacer la combinacion de los datos, luego de un preprocesamiento de los tipos que presentaban para obtener una igualdad de tipos.\n",
        "\n",
        "* `Adress` y `street` son otras variables interesantes para la union de los datos, luego de un preprocesamiento de los strings de cada una. Se tendria que remover los numeros de la variable `Adress` y solo quedarse con los nombres de las calles, mientras que en la variable `street` se removeria la informacion extra luego de la coma, quedandonos solo con el nombre de la calle. Tal vez el uso de la funcion split y removiendo estos datos. Luego consultar alguna funcion para chequear esta correcpondencia entre las variables antes de hacer la combinacion.\n",
        "\n",
        "* `Suburb` y `suburb` son variables que deberian de poder usarse para combinarse. Tal vez solo se deberia chequear que tengan suficiente corepondencia entre las dos, tal como se hizo con `Postcode` y `zipcode` antes de combinarse los datasets.\n",
        "\n",
        "* Las variables `Latitud` y `Longitud` de ambos datasets se podrian usar para llamar a alguna funcion que tome como imputs esta informacion y que devuelva distinta informacion que luego sirva de matcheo, como por ejemplo ciudades cercanas, pais, entre otras. En otra oportunidad quise utilizar la funcion `reverse geocoding` de la libreria de `Geopy` pero no logre implementarla correctamente."
      ],
      "metadata": {
        "id": "j3wiCzM9AhIG"
      },
      "id": "j3wiCzM9AhIG"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Otras modificaciones que podrian evaluarse:\n",
        "\n",
        "Ya comentamos que las variables `neighborhood_overview` y `transit` podrian sumar informacion al dataset de sales, pero se deberia hacer un preprocesamiento de estas cadenas de strings. Tal vez usar algun algoritmo de procesamiento de lenguaje natural para evaluar estas descripciones como positivas o negativas para ayudar a graduar la positividad del barrio o el transporte, etc. Pero de igual manera se tendria que evaluar el sesgo de estos datos procedentes del host de la propiedada y si valen la pena este trabajo."
      ],
      "metadata": {
        "id": "qpx22va32S_D"
      },
      "id": "qpx22va32S_D"
    },
    {
      "cell_type": "markdown",
      "id": "c5303f27-3b15-441b-b291-8caf1c734139",
      "metadata": {
        "id": "c5303f27-3b15-441b-b291-8caf1c734139"
      },
      "source": [
        "## Ejercicio 3:\n",
        "\n",
        "Crear y guardar un nuevo conjunto de datos con todas las transformaciones realizadas anteriormente."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G4ClSr_JapCw"
      },
      "source": [
        "new_merged_sales_df.to_csv(\"new_melb_data_extended.csv\", index=None)"
      ],
      "execution_count": null,
      "outputs": [],
      "id": "G4ClSr_JapCw"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9YD0kPzAM1he",
        "outputId": "dd898b75-d2ad-4b71-e49c-9c217919dc90"
      },
      "source": [
        "from google.colab import files\n",
        "files.download('new_melb_data_extended.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_5e0fc1e6-55ee-41c4-9992-2af5e0a5ca2c\", \"new_melb_data_extended.csv\", 1479337)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "9YD0kPzAM1he"
    },
    {
      "cell_type": "markdown",
      "id": "abfd3eeb-d466-424b-b58e-d1364ac39206",
      "metadata": {
        "id": "abfd3eeb-d466-424b-b58e-d1364ac39206"
      },
      "source": [
        "## Ejercicios opcionales:\n",
        "\n",
        "1. Armar un script en python (archivo .py) [ETL](https://towardsdatascience.com/what-to-log-from-python-etl-pipelines-9e0cfe29950e) que corra los pasos de extraccion, transformacion y carga, armando una funcion para cada etapa del proceso y luego un main que corra todos los pasos requeridos.\n",
        "\n",
        "2. Armar un DAG en Apache Airflow que corra el ETL. (https://airflow.apache.org/docs/apache-airflow/stable/tutorial.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5d210b95-836f-45ac-a52d-1a4dafdb447a",
      "metadata": {
        "id": "5d210b95-836f-45ac-a52d-1a4dafdb447a"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "6cffe5bf-2498-498c-aa06-3e61422d91e6",
        "9s177RKMLgNR"
      ],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}