{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "26nlAOplgshx"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MaruPalacio/Proyectos_Diplomatura_Ciencia_de_Datos/blob/main/Supervised_Learning/Contest_Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "#Trabajo Práctico: Competencia en Kaggle"
      ],
      "metadata": {
        "id": "Dn5bVttEsQhy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, MinMaxScaler\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\n",
        "from sklearn.metrics import accuracy_score, ConfusionMatrixDisplay, classification_report, balanced_accuracy_score, f1_score, precision_score, recall_score, confusion_matrix\n",
        "\n",
        "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
        "from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier\n",
        "from sklearn.gaussian_process import GaussianProcessClassifier\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.gaussian_process.kernels import RBF\n",
        "from sklearn.inspection import DecisionBoundaryDisplay\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.experimental import enable_iterative_imputer\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.impute import IterativeImputer"
      ],
      "metadata": {
        "id": "7SP4NUirshpu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_df = pd.read_csv(\"https://github.com/DiploDatos/AprendizajeSupervisado/raw/master/Pr%C3%A1ctico/diabetes_prediction_dataset_test.csv\")\n",
        "train_df = pd.read_csv(\"https://github.com/DiploDatos/AprendizajeSupervisado/raw/master/Pr%C3%A1ctico/diabetes_prediction_dataset_train-labeled.csv\")"
      ],
      "metadata": {
        "id": "G8t8b_EIuq9p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Análisis de los datos"
      ],
      "metadata": {
        "id": "MgeayL0FyBQH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Veamos las proporciones en nuestro conjunto de entrenamiento:"
      ],
      "metadata": {
        "id": "t65h8FADyEl1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.groupby(\"patient\").diabetes.mean().value_counts().plot(kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 474
        },
        "id": "svRqavjXyHfc",
        "outputId": "89437b01-e10f-4e6b-bca1-9fbc8d172459"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='diabetes'>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.groupby(\"gender\").gender.value_counts().plot(kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "Q00Ai4HZyQKA",
        "outputId": "bf1314e8-21ab-4185-f2bf-d20c0222ddb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='gender'>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.displot(train_df['age'], aspect=2,color = \"#A006B4\",edgecolor = \"white\",\n",
        "             linewidth = 2)\n",
        "\n",
        "plt.xlabel('Edad')\n",
        "plt.ylabel('Cantidad')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 506
        },
        "id": "41w91HCZygsg",
        "outputId": "b2ef52a4-75ee-47ca-d0d8-0dcc3d82add5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.displot(train_df['smoking_history'], aspect=2,color = \"#A006B4\",edgecolor = \"white\",\n",
        "             linewidth = 2)\n",
        "\n",
        "plt.xlabel('Smoking history')\n",
        "plt.ylabel('Cantidad')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 506
        },
        "id": "XgTkCGIq1Qtm",
        "outputId": "155152b2-27af-490d-f81e-7afbfb4356c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pclj7L2896O8",
        "outputId": "0db29c59-6008-4165-8c2d-ac0dfbe456e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['patient', 'gender', 'age', 'hypertension', 'heart_disease',\n",
              "       'smoking_history', 'bmi', 'HbA1c_level', 'blood_glucose_level',\n",
              "       'diabetes'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for column in train_df.columns:\n",
        " if column != 'patient' and column !='diabetes':\n",
        "  # Gráfico\n",
        "  # ==============================================================================\n",
        "  fig, ax = plt.subplots(1, 1, figsize=(8,6))\n",
        "  ax.scatter(x=train_df[column], y=train_df.diabetes, alpha= 0.00197)\n",
        "  ax.set_xlabel(column)\n",
        "  ax.set_ylabel('Diabetes');\n",
        "\n",
        "\n",
        "\n",
        "  plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "bZG7AkzRyTYB",
        "outputId": "1a569315-4073-491b-ea63-9fdc09c26fa0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArMAAAINCAYAAAAtJ/ceAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAuzElEQVR4nO3de3RV9Z3w4W8IEqCSgCLhYhS1aPEKBU3j5bV10qK2KHVaqVpAFK0VrWN6ERTB6lTUWotVlFW0YB2r2I63JTTqoIy3VCqK2gpYFYVagzItBKFySfb7x4xpIwFJCDn56fOsddYy++x9zvf4K/bjdp+dvCzLsgAAgAS1y/UAAADQXGIWAIBkiVkAAJIlZgEASJaYBQAgWWIWAIBkiVkAAJIlZgEASFb7XA/Q2urq6uIvf/lLdOnSJfLy8nI9DgAAH5JlWaxZsyZ69+4d7dpt/dzrJy5m//KXv0RJSUmuxwAA4CMsX748dt99963u84mL2S5dukTE//7NKSwszPE0AAB8WE1NTZSUlNR329Z84mL2g0sLCgsLxSwAQBu2LZeE+gIYAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJymnMPv744zF06NDo3bt35OXlxX333feRx8ybNy8++9nPRkFBQXz605+OmTNn7vA5AQBom9rn8s3Xrl0bhxxySJxxxhlx0kknfeT+S5cujS9/+ctxzjnnxB133BFz586NMWPGRK9evWLIkCGtMHHT9B03e7Ntb1z15RxMAgDQPG29Z/KyLMtyPURERF5eXtx7770xbNiwLe5z0UUXxezZs+MPf/hD/bZvfOMbsWrVqqisrNym96mpqYmioqJYvXp1FBYWbu/YW9TYwn+gLf0PAABgS3LVM03ptaSuma2qqory8vIG24YMGRJVVVU5mqhxW1v4bXkeACDXUumZnF5m0FTV1dVRXFzcYFtxcXHU1NTE3//+9+jUqdNmx6xfvz7Wr19f/3NNTc0OnxMAgNaR1JnZ5pg8eXIUFRXVP0pKSnI9EgAALSSpmO3Zs2esWLGiwbYVK1ZEYWFho2dlIyLGjx8fq1evrn8sX768NUYFAKAVJHWZQVlZWcyZM6fBtkceeSTKysq2eExBQUEUFBTs6NEAAMiBnJ6Zfe+992LhwoWxcOHCiPjfW28tXLgwli1bFhH/e1Z15MiR9fufc8458frrr8cPfvCDWLx4cdx0001x9913x4UXXpiL8bfoo77d524GAEBbl0rP5DRmn3322Rg4cGAMHDgwIiIqKipi4MCBMXHixIiIePvtt+vDNiJir732itmzZ8cjjzwShxxySPzkJz+JW265pU3eY3ZLC9xWFh4A4KOk0DNt5j6zraW17jMLAEDzfGzvMwsAAP9MzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACRLzAIAkCwxCwBAssQsAADJErMAACQr5zE7derU6Nu3b3Ts2DFKS0tj/vz5W91/ypQpsd9++0WnTp2ipKQkLrzwwnj//fdbaVoAANqSnMbsrFmzoqKiIiZNmhTPPfdcHHLIITFkyJB45513Gt3/V7/6VYwbNy4mTZoUixYtiltvvTVmzZoVF198cStPDgBAW5DTmL3uuuvirLPOitGjR8f+++8f06ZNi86dO8cvfvGLRvd/+umn44gjjohTTz01+vbtG1/60pfilFNO+cizuQAAfDzlLGY3bNgQCxYsiPLy8n8M065dlJeXR1VVVaPHHH744bFgwYL6eH399ddjzpw5cfzxx7fKzAAAtC3tc/XGK1eujNra2iguLm6wvbi4OBYvXtzoMaeeemqsXLkyjjzyyMiyLDZt2hTnnHPOVi8zWL9+faxfv77+55qampb5AAAA5FzOvwDWFPPmzYsrr7wybrrppnjuuefinnvuidmzZ8cVV1yxxWMmT54cRUVF9Y+SkpJWnBgAgB0pL8uyLBdvvGHDhujcuXP85je/iWHDhtVvHzVqVKxatSruv//+zY456qij4nOf+1z8+Mc/rt/2H//xH3H22WfHe++9F+3abd7mjZ2ZLSkpidWrV0dhYWHLfigAALZbTU1NFBUVbVOv5ezMbIcOHWLQoEExd+7c+m11dXUxd+7cKCsra/SYdevWbRas+fn5ERGxpSYvKCiIwsLCBg8AAD4ecnbNbERERUVFjBo1KgYPHhyHHXZYTJkyJdauXRujR4+OiIiRI0dGnz59YvLkyRERMXTo0Ljuuuti4MCBUVpaGq+++mpceumlMXTo0PqoBQDgkyOnMTt8+PB49913Y+LEiVFdXR0DBgyIysrK+i+FLVu2rMGZ2AkTJkReXl5MmDAh3nrrrdhtt91i6NCh8aMf/ShXHwEAgBzK2TWzudKUazAAAGh9SVwzCwAA20vMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJCvnMTt16tTo27dvdOzYMUpLS2P+/Plb3X/VqlUxduzY6NWrVxQUFMS+++4bc+bMaaVpAQBoS9rn8s1nzZoVFRUVMW3atCgtLY0pU6bEkCFDYsmSJdGjR4/N9t+wYUN88YtfjB49esRvfvOb6NOnT7z55pvRtWvX1h8eAICcy8uyLMvVm5eWlsahhx4aN954Y0RE1NXVRUlJSZx//vkxbty4zfafNm1a/PjHP47FixfHTjvt1Kz3rKmpiaKioli9enUUFhZu1/wAALS8pvRazi4z2LBhQyxYsCDKy8v/MUy7dlFeXh5VVVWNHvPAAw9EWVlZjB07NoqLi+PAAw+MK6+8Mmpra1trbAAA2pCcXWawcuXKqK2tjeLi4gbbi4uLY/HixY0e8/rrr8ejjz4ap512WsyZMydeffXVOPfcc2Pjxo0xadKkRo9Zv359rF+/vv7nmpqalvsQAADkVM6/ANYUdXV10aNHj/j5z38egwYNiuHDh8cll1wS06ZN2+IxkydPjqKiovpHSUlJK04MAMCOlLOY7d69e+Tn58eKFSsabF+xYkX07Nmz0WN69eoV++67b+Tn59dv69+/f1RXV8eGDRsaPWb8+PGxevXq+sfy5ctb7kMAAJBTOYvZDh06xKBBg2Lu3Ln12+rq6mLu3LlRVlbW6DFHHHFEvPrqq1FXV1e/7ZVXXolevXpFhw4dGj2moKAgCgsLGzwAAPh4yOllBhUVFTF9+vS47bbbYtGiRfHtb3871q5dG6NHj46IiJEjR8b48ePr9//2t78df/3rX+OCCy6IV155JWbPnh1XXnlljB07NlcfAQCAHMrpfWaHDx8e7777bkycODGqq6tjwIABUVlZWf+lsGXLlkW7dv/o7ZKSknjooYfiwgsvjIMPPjj69OkTF1xwQVx00UW5+ggAAORQTu8zmwvuMwsA0LYlcZ9ZAADYXmIWAIBkiVkAAJIlZgEASJaYBQAgWWIWAIBkiVkAAJIlZgEASFaLxeyqVata6qUAAGCbNCtmr7766pg1a1b9zyeffHLsuuuu0adPn3jhhRdabDgAANiaZsXstGnToqSkJCIiHnnkkXjkkUfit7/9bRx33HHx/e9/v0UHBACALWnfnIOqq6vrY/bBBx+Mk08+Ob70pS9F3759o7S0tEUHBACALWnWmdlu3brF8uXLIyKisrIyysvLIyIiy7Kora1tuekAAGArmnVm9qSTTopTTz01+vXrF//zP/8Txx13XEREPP/88/HpT3+6RQcEAIAtaVbM/vSnP42+ffvG8uXL45prromdd945IiLefvvtOPfcc1t0QAAA2JK8LMuyXA/RmmpqaqKoqChWr14dhYWFuR4HAIAPaUqvNfs+s7fffnsceeSR0bt373jzzTcjImLKlClx//33N/clAQCgSZoVszfffHNUVFTEcccdF6tWrar/0lfXrl1jypQpLTkfAABsUbNi9oYbbojp06fHJZdcEvn5+fXbBw8eHC+99FKLDQcAAFvTrJhdunRpDBw4cLPtBQUFsXbt2u0eCgAAtkWzYnavvfaKhQsXbra9srIy+vfvv70zAQDANmnWrbkqKipi7Nix8f7770eWZTF//vy48847Y/LkyXHLLbe09IwAANCoZsXsmDFjolOnTjFhwoRYt25dnHrqqdG7d++4/vrr4xvf+EZLzwgAAI3a7vvMrlu3Lt57773o0aNHS820Q7nPLABA27bD7zN7zDHHxKpVqyIionPnzvUhW1NTE8ccc0xzXhIAAJqsWTE7b9682LBhw2bb33///XjiiSe2eygAANgWTbpm9sUXX6z/65dffjmqq6vrf66trY3Kysro06dPy00HAABb0aSYHTBgQOTl5UVeXl6jlxN06tQpbrjhhhYbDgAAtqZJMbt06dLIsiz23nvvmD9/fuy22271z3Xo0CF69OjR4DeCAQDAjtSkmN1zzz0jIqKurm6HDAMAAE3RrC+ARUTcfvvtccQRR0Tv3r3jzTffjIiIn/70p3H//fe32HAAALA1zYrZm2++OSoqKuL444+PVatWRW1tbUREdOvWLaZMmdKS8wEAwBY1K2ZvuOGGmD59elxyySUNrpEdPHhwvPTSSy02HAAAbE2zYnbp0qUxcODAzbYXFBTE2rVrt3soAADYFs2K2b322isWLly42fbKysro37//9s4EAADbpEl3M/hARUVFjB07Nt5///3Isizmz58fd955Z0yePDluueWWlp4RAAAa1ayYHTNmTHTq1CkmTJgQ69ati1NPPTV69+4d119/fXzjG99o6RkBAKBReVmWZdvzAuvWrYv33nsvevTo0VIz7VA1NTVRVFQUq1evjsLCwlyPAwDAhzSl15p1ZvYD77zzTixZsiQiIvLy8hr8RjAAANjRmvUFsDVr1sSIESOid+/ecfTRR8fRRx8dvXv3jm9+85uxevXqlp4RAAAa1ayYHTNmTDzzzDMxe/bsWLVqVaxatSoefPDBePbZZ+Nb3/pWS88IAACNatY1s5/61KfioYceiiOPPLLB9ieeeCKOPfbYNn2vWdfMAgC0bU3ptWadmd11112jqKhos+1FRUXRrVu35rwkAAA0WbNidsKECVFRURHV1dX126qrq+P73/9+XHrppS02HAAAbM02381g4MCBkZeXV//zn/70p9hjjz1ijz32iIiIZcuWRUFBQbz77ruumwUAoFVsc8wOGzZsB44BAABNt92/NCE1vgAGANC27fAvgAEAQFvQrN8AVltbGz/96U/j7rvvjmXLlsWGDRsaPP/Xv/61RYYDAICtadaZ2R/+8Idx3XXXxfDhw2P16tVRUVERJ510UrRr1y4uu+yyFh4RAAAa16yYveOOO2L69Onx3e9+N9q3bx+nnHJK3HLLLTFx4sT43e9+19IzAgBAo5oVs9XV1XHQQQdFRMTOO+8cq1evjoiIr3zlKzF79uyWmw4AALaiWTG7++67x9tvvx0REfvss088/PDDERHx+9//PgoKClpuOgAA2IpmxexXv/rVmDt3bkREnH/++XHppZdGv379YuTIkXHGGWe06IAAALAlLXKf2aqqqqiqqop+/frF0KFDW2KuHcZ9ZgEA2ram9Fqzbs31YWVlZVFWVtYSLwUAANtsm2P2gQceiOOOOy522mmneOCBB7a67wknnLDdgwEAwEfZ5ssM2rVrF9XV1dGjR49o127Ll9rm5eVFbW1tiw3Y0lxmAADQtu2Qywzq6uoa/WsAAMiVJl8zW1dXFzNnzox77rkn3njjjcjLy4u99947/vVf/zVGjBgReXl5O2JOAADYTJNuzZVlWZxwwgkxZsyYeOutt+Kggw6KAw44IN544404/fTT46tf/eqOmhMAADbTpDOzM2fOjMcffzzmzp0bX/jCFxo89+ijj8awYcPil7/8ZYwcObJFhwQAgMY06czsnXfeGRdffPFmIRsRccwxx8S4cePijjvuaLHhAABga5oUsy+++GIce+yxW3z+uOOOixdeeGG7hwIAgG3RpJj961//GsXFxVt8vri4OP72t79t91AAALAtmhSztbW10b79li+zzc/Pj02bNm33UAAAsC2a9AWwLMvi9NNPj4KCgkafX79+fYsMBQAA26JJMTtq1KiP3MedDAAAaC1NitkZM2bsqDkAAKDJmnTNLAAAtCViFgCAZIlZAACSJWYBAEhWm4jZqVOnRt++faNjx45RWloa8+fP36bj7rrrrsjLy4thw4bt2AEBAGiTch6zs2bNioqKipg0aVI899xzccghh8SQIUPinXfe2epxb7zxRnzve9+Lo446qpUmBQCgrcl5zF533XVx1llnxejRo2P//fePadOmRefOneMXv/jFFo+pra2N0047LX74wx/G3nvv3YrTAgDQluQ0Zjds2BALFiyI8vLy+m3t2rWL8vLyqKqq2uJxl19+efTo0SPOPPPM1hgTAIA2qkm/NKGlrVy5Mmpra6O4uLjB9uLi4li8eHGjxzz55JNx6623xsKFC7fpPdavX9/g1+zW1NQ0e14AANqWnF9m0BRr1qyJESNGxPTp06N79+7bdMzkyZOjqKio/lFSUrKDpwQAoLXk9Mxs9+7dIz8/P1asWNFg+4oVK6Jnz56b7f/aa6/FG2+8EUOHDq3fVldXFxER7du3jyVLlsQ+++zT4Jjx48dHRUVF/c81NTWCFgDgYyKnMduhQ4cYNGhQzJ07t/72WnV1dTF37tw477zzNtv/M5/5TLz00ksNtk2YMCHWrFkT119/faORWlBQEAUFBTtkfgAAciunMRsRUVFREaNGjYrBgwfHYYcdFlOmTIm1a9fG6NGjIyJi5MiR0adPn5g8eXJ07NgxDjzwwAbHd+3aNSJis+0AAHz85Txmhw8fHu+++25MnDgxqqurY8CAAVFZWVn/pbBly5ZFu3ZJXdoLAEArycuyLMv1EK2ppqYmioqKYvXq1VFYWJjrcQAA+JCm9JpTngAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJKtNxOzUqVOjb9++0bFjxygtLY358+dvcd/p06fHUUcdFd26dYtu3bpFeXn5VvcHAODjK+cxO2vWrKioqIhJkybFc889F4ccckgMGTIk3nnnnUb3nzdvXpxyyinx2GOPRVVVVZSUlMSXvvSleOutt1p5cgAAci0vy7IslwOUlpbGoYceGjfeeGNERNTV1UVJSUmcf/75MW7cuI88vra2Nrp16xY33nhjjBw58iP3r6mpiaKioli9enUUFhZu9/wAALSspvRaTs/MbtiwIRYsWBDl5eX129q1axfl5eVRVVW1Ta+xbt262LhxY+yyyy47akwAANqo9rl885UrV0ZtbW0UFxc32F5cXByLFy/epte46KKLonfv3g2C+J+tX78+1q9fX/9zTU1N8wcGAKBNyfk1s9vjqquuirvuuivuvffe6NixY6P7TJ48OYqKiuofJSUlrTwlAAA7Sk5jtnv37pGfnx8rVqxosH3FihXRs2fPrR577bXXxlVXXRUPP/xwHHzwwVvcb/z48bF69er6x/Lly1tkdgAAci+nMduhQ4cYNGhQzJ07t35bXV1dzJ07N8rKyrZ43DXXXBNXXHFFVFZWxuDBg7f6HgUFBVFYWNjgAQDAx0NOr5mNiKioqIhRo0bF4MGD47DDDospU6bE2rVrY/To0RERMXLkyOjTp09Mnjw5IiKuvvrqmDhxYvzqV7+Kvn37RnV1dURE7LzzzrHzzjvn7HMAAND6ch6zw4cPj3fffTcmTpwY1dXVMWDAgKisrKz/UtiyZcuiXbt/nEC++eabY8OGDfG1r32twetMmjQpLrvsstYcHQCAHMv5fWZbm/vMAgC0bcncZxYAALaHmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFliFgCAZIlZAACSJWYBAEiWmAUAIFntcz1ARMTUqVPjxz/+cVRXV8chhxwSN9xwQxx22GFb3P/Xv/51XHrppfHGG29Ev3794uqrr47jjz++FSfeNn3Hzd5s2xtXfTkHkwAANE9b75mcn5mdNWtWVFRUxKRJk+K5556LQw45JIYMGRLvvPNOo/s//fTTccopp8SZZ54Zzz//fAwbNiyGDRsWf/jDH1p58q1rbOG3th0AoK1JoWfysizLcjlAaWlpHHrooXHjjTdGRERdXV2UlJTE+eefH+PGjdts/+HDh8fatWvjwQcfrN/2uc99LgYMGBDTpk37yPerqamJoqKiWL16dRQWFrbcB/kn27LAbenfaAAAPiyXPdOUXsvpmdkNGzbEggULory8vH5bu3btory8PKqqqho9pqqqqsH+ERFDhgzZ4v7r16+PmpqaBg8AAD4echqzK1eujNra2iguLm6wvbi4OKqrqxs9prq6ukn7T548OYqKiuofJSUlLTM8AAA5l/NrZne08ePHx+rVq+sfy5cvz/VIAAC0kJzezaB79+6Rn58fK1asaLB9xYoV0bNnz0aP6dmzZ5P2LygoiIKCgpYZGACANiWnZ2Y7dOgQgwYNirlz59Zvq6uri7lz50ZZWVmjx5SVlTXYPyLikUce2eL+ufBRF0P78hcA0Nal0jM5v8ygoqIipk+fHrfddlssWrQovv3tb8fatWtj9OjRERExcuTIGD9+fP3+F1xwQVRWVsZPfvKTWLx4cVx22WXx7LPPxnnnnZerj9CoLS1wW1l4AICPkkLP5PyXJgwfPjzefffdmDhxYlRXV8eAAQOisrKy/ktey5Yti3bt/tHchx9+ePzqV7+KCRMmxMUXXxz9+vWL++67Lw488MBcfYQtaksLDQDQHG29Z3J+n9nW1hr3mQUAoPmSuc8sAABsDzELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQLDELAECyxCwAAMkSswAAJEvMAgCQrPa5HqC1ZVkWERE1NTU5ngQAgMZ80GkfdNvWfOJids2aNRERUVJSkuNJAADYmjVr1kRRUdFW98nLtiV5P0bq6uriL3/5S3Tp0iXy8vJ2+PvV1NRESUlJLF++PAoLC3f4+9HyrGH6rGH6rGHarF/6WnsNsyyLNWvWRO/evaNdu61fFfuJOzPbrl272H333Vv9fQsLC/0BTpw1TJ81TJ81TJv1S19rruFHnZH9gC+AAQCQLDELAECyxOwOVlBQEJMmTYqCgoJcj0IzWcP0WcP0WcO0Wb/0teU1/MR9AQwAgI8PZ2YBAEiWmAUAIFliFgCAZIlZAACSJWZbwNSpU6Nv377RsWPHKC0tjfnz5291/1//+tfxmc98Jjp27BgHHXRQzJkzp5UmZUuasobTp0+Po446Krp16xbdunWL8vLyj1xzdrym/jn8wF133RV5eXkxbNiwHTsgH6mpa7hq1aoYO3Zs9OrVKwoKCmLffff1z9Mcaur6TZkyJfbbb7/o1KlTlJSUxIUXXhjvv/9+K03Lhz3++OMxdOjQ6N27d+Tl5cV99933kcfMmzcvPvvZz0ZBQUF8+tOfjpkzZ+7wORuVsV3uuuuurEOHDtkvfvGL7I9//GN21llnZV27ds1WrFjR6P5PPfVUlp+fn11zzTXZyy+/nE2YMCHbaaedspdeeqmVJ+cDTV3DU089NZs6dWr2/PPPZ4sWLcpOP/30rKioKPvzn//cypPzgaau4QeWLl2a9enTJzvqqKOyE088sXWGpVFNXcP169dngwcPzo4//vjsySefzJYuXZrNmzcvW7hwYStPTpY1ff3uuOOOrKCgILvjjjuypUuXZg899FDWq1ev7MILL2zlyfnAnDlzsksuuSS75557sojI7r333q3u//rrr2edO3fOKioqspdffjm74YYbsvz8/KyysrJ1Bv4nYnY7HXbYYdnYsWPrf66trc169+6dTZ48udH9Tz755OzLX/5yg22lpaXZt771rR06J1vW1DX8sE2bNmVdunTJbrvtth01Ih+hOWu4adOm7PDDD89uueWWbNSoUWI2x5q6hjfffHO29957Zxs2bGitEdmKpq7f2LFjs2OOOabBtoqKiuyII47YoXOybbYlZn/wgx9kBxxwQINtw4cPz4YMGbIDJ2ucywy2w4YNG2LBggVRXl5ev61du3ZRXl4eVVVVjR5TVVXVYP+IiCFDhmxxf3as5qzhh61bty42btwYu+yyy44ak61o7hpefvnl0aNHjzjzzDNbY0y2ojlr+MADD0RZWVmMHTs2iouL48ADD4wrr7wyamtrW2ts/k9z1u/www+PBQsW1F+K8Prrr8ecOXPi+OOPb5WZ2X5tqWfat/o7foysXLkyamtro7i4uMH24uLiWLx4caPHVFdXN7p/dXX1DpuTLWvOGn7YRRddFL17997sDzWtozlr+OSTT8att94aCxcubIUJ+SjNWcPXX389Hn300TjttNNizpw58eqrr8a5554bGzdujEmTJrXG2Pyf5qzfqaeeGitXrowjjzwysiyLTZs2xTnnnBMXX3xxa4xMC9hSz9TU1MTf//736NSpU6vN4swsbIerrroq7rrrrrj33nujY8eOuR6HbbBmzZoYMWJETJ8+Pbp3757rcWimurq66NGjR/z85z+PQYMGxfDhw+OSSy6JadOm5Xo0tsG8efPiyiuvjJtuuimee+65uOeee2L27NlxxRVX5Ho0EuTM7Hbo3r175Ofnx4oVKxpsX7FiRfTs2bPRY3r27Nmk/dmxmrOGH7j22mvjqquuiv/6r/+Kgw8+eEeOyVY0dQ1fe+21eOONN2Lo0KH12+rq6iIion379rFkyZLYZ599duzQNNCcP4e9evWKnXbaKfLz8+u39e/fP6qrq2PDhg3RoUOHHToz/9Cc9bv00ktjxIgRMWbMmIiIOOigg2Lt2rVx9tlnxyWXXBLt2jnX1tZtqWcKCwtb9axshDOz26VDhw4xaNCgmDt3bv22urq6mDt3bpSVlTV6TFlZWYP9IyIeeeSRLe7PjtWcNYyIuOaaa+KKK66IysrKGDx4cGuMyhY0dQ0/85nPxEsvvRQLFy6sf5xwwgnxhS98IRYuXBglJSWtOT7RvD+HRxxxRLz66qv1/yISEfHKK69Er169hGwra876rVu3brNg/eBfTLIs23HD0mLaVM+0+lfOPmbuuuuurKCgIJs5c2b28ssvZ2effXbWtWvXrLq6OsuyLBsxYkQ2bty4+v2feuqprH379tm1116bLVq0KJs0aZJbc+VYU9fwqquuyjp06JD95je/yd5+++36x5o1a3L1ET7xmrqGH+ZuBrnX1DVctmxZ1qVLl+y8887LlixZkj344INZjx49sn//93/P1Uf4RGvq+k2aNCnr0qVLduedd2avv/569vDDD2f77LNPdvLJJ+fqI3zirVmzJnv++eez559/PouI7Lrrrsuef/757M0338yyLMvGjRuXjRgxon7/D27N9f3vfz9btGhRNnXqVLfmStkNN9yQ7bHHHlmHDh2yww47LPvd735X/9zRRx+djRo1qsH+d999d7bvvvtmHTp0yA444IBs9uzZrTwxH9aUNdxzzz2ziNjsMWnSpNYfnHpN/XP4z8Rs29DUNXz66aez0tLSrKCgINt7772zH/3oR9mmTZtaeWo+0JT127hxY3bZZZdl++yzT9axY8espKQkO/fcc7O//e1vrT84WZZl2WOPPdbo/7d9sG6jRo3Kjj766M2OGTBgQNahQ4ds7733zmbMmNHqc2dZluVlmfP5AACkyTWzAAAkS8wCAJAsMQsAQLLELAAAyRKzAAAkS8wCAJAsMQsAQLLELEAjPv/5z8e//du/5XqMNsXfE6Atap/rAQBomtNPPz1WrVoV9913X6u+7z333BM77bRTq74nwEcRswCJqK2tjby8vJy9/y677JKz9wbYEpcZAGxBXV1d/OAHP4hddtklevbsGZdddllERJxxxhnxla98pcG+GzdujB49esStt94aEf/7n+TPO++8OO+886KoqCi6d+8el156afzzbxBfv359fO9734s+ffrEpz71qSgtLY158+bVPz9z5szo2rVrPPDAA7H//vtHQUFBnHHGGXHbbbfF/fffH3l5eZGXl1d/zPLly+Pkk0+Orl27xi677BInnnhivPHGG/Wvd/rpp8ewYcPi2muvjV69esWuu+4aY8eOjY0bN9bvc9NNN0W/fv2iY8eOUVxcHF/72tfqn/vwZQZ/+9vfYuTIkdGtW7fo3LlzHHfccfGnP/1ps/kfeuih6N+/f+y8885x7LHHxttvv93cJQHYjJgF2ILbbrstPvWpT8UzzzwT11xzTVx++eXxyCOPxJgxY6KysrJBlD344IOxbt26GD58eIPj27dvH/Pnz4/rr78+rrvuurjlllvqnz/vvPOiqqoq7rrrrnjxxRfj61//ehx77LENgnDdunVx9dVXxy233BJ//OMf42c/+1mcfPLJ9VH49ttvx+GHHx4bN26MIUOGRJcuXeKJJ56Ip556qj4eN2zYUP96jz32WLz22mvx2GOPxW233RYzZ86MmTNnRkTEs88+G9/5znfi8ssvjyVLlkRlZWX8v//3/7b49+f000+PZ599Nh544IGoqqqKLMvi+OOPbxDH69ati2uvvTZuv/32ePzxx2PZsmXxve99b7vWBaCBDIDNHH300dmRRx7ZYNuhhx6aXXTRRVmWZdn++++fXX311fXPDR06NDv99NMbHN+/f/+srq6ufttFF12U9e/fP8uyLHvzzTez/Pz87K233mrwHv/yL/+SjR8/PsuyLJsxY0YWEdnChQsb7DNq1KjsxBNPbLDt9ttvz/bbb78G77d+/fqsU6dO2UMPPVR/3J577plt2rSpfp+vf/3r2fDhw7Msy7L//M//zAoLC7Oampot/j254IILsizLsldeeSWLiOypp56qf37lypVZp06dsrvvvrvB/K+++mr9PlOnTs2Ki4sbfX2A5nBmFmALDj744AY/9+rVK955552IiBgzZkzMmDEjIiJWrFgRv/3tb+OMM85osP/nPve5Bte4lpWVxZ/+9Keora2Nl156KWpra2PfffeNnXfeuf7x3//93/Haa6/VH9OhQ4fN5mjMCy+8EK+++mp06dKl/rV22WWXeP/99xu83gEHHBD5+fmNfqYvfvGLseeee8bee+8dI0aMiDvuuCPWrVvX6PstWrQo2rdvH6WlpfXbdt1119hvv/1i0aJF9ds6d+4c++yzT6PvB9ASfAEMYAs+/M39vLy8qKuri4iIkSNHxrhx46Kqqiqefvrp2GuvveKoo47a5td+7733Ij8/PxYsWNAgLiMidt555/q/7tSp0zZ96eu9996LQYMGxR133LHZc7vttts2faYuXbrEc889F/PmzYuHH344Jk6cGJdddln8/ve/j65du27zZ/tnjb1f9k/XDQNsLzEL0Ay77rprDBs2LGbMmBFVVVUxevTozfZ55plnGvz8u9/9Lvr16xf5+fkxcODAqK2tjXfeeadJERzxv2dra2trG2z77Gc/G7NmzYoePXpEYWFh0z/Q/2nfvn2Ul5dHeXl5TJo0Kbp27RqPPvponHTSSQ3269+/f2zatCmeeeaZOPzwwyMi4n/+539iyZIlsf/++zf7/QGaymUGAM00ZsyYuO2222LRokUxatSozZ5ftmxZVFRUxJIlS+LOO++MG264IS644IKIiNh3333jtNNOi5EjR8Y999wTS5cujfnz58fkyZNj9uzZW33fvn37xosvvhhLliyJlStXxsaNG+O0006L7t27x4knnhhPPPFELF26NObNmxff+c534s9//vM2fZ4HH3wwfvazn8XChQvjzTffjF/+8pdRV1cX++2332b79uvXL0488cQ466yz4sknn4wXXnghvvnNb0afPn3ixBNP3Kb3A2gJYhagmcrLy6NXr14xZMiQ6N2792bPjxw5Mv7+97/HYYcdFmPHjo0LLrggzj777PrnZ8yYESNHjozvfve7sd9++8WwYcPi97//feyxxx5bfd+zzjor9ttvvxg8eHDstttu8dRTT0Xnzp3j8ccfjz322CNOOumk6N+/f5x55pnx/vvvb/OZ2q5du8Y999wTxxxzTPTv3z+mTZsWd955ZxxwwAGN7j9jxowYNGhQfOUrX4mysrLIsizmzJnjFysArSovc/ESQLO899570adPn5gxY8Zm/xn+85//fAwYMCCmTJmSm+EAPiFcMwvQRHV1dbFy5cr4yU9+El27do0TTjgh1yMBfGKJWYAmWrZsWey1116x++67x8yZM6N9e/8oBcgVlxkAAJAsXwADACBZYhYAgGSJWQAAkiVmAQBIlpgFACBZYhYAgGSJWQAAkiVmAQBIlpgFACBZ/x8QhF/DNP6DGAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A simple vista, las features que más parecen correlacionarse con nuestra variable objetivo son: ``age``, ``bmi``, ``HbA1c_level`` y ``blood_glucose_level``."
      ],
      "metadata": {
        "id": "H_XuEwSzzPcO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Conversión de variables categóricas a numéricas."
      ],
      "metadata": {
        "id": "OnkokAxk1uyI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se decidió agrupar las categorías \"former\" y \"not current\" de \"smoking_history\" en una misma categoría, ya que es difícil saber si alguna de estas implica que la persona fume más o menos."
      ],
      "metadata": {
        "id": "hS3t4VSYbhgp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.loc[:,'gender'] = train_df.gender.replace({'Female': 0, 'Male': 1, 'Other' : 2})\n",
        "train_df.loc[:,'smoking_history'] = train_df.smoking_history.replace({'No Info': 'NaN', 'never': 1, 'former': 2, 'not current': 2, 'current' : 3, 'ever' : 4}) ##\n",
        "train_df['gender'] = pd.to_numeric(train_df['gender'].astype(str), errors='coerce')\n",
        "train_df['smoking_history'] = pd.to_numeric(train_df['smoking_history'].astype(str), errors='coerce')"
      ],
      "metadata": {
        "id": "tGKE33E01xpo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Imputación los valores \"No Info\" de smoking history"
      ],
      "metadata": {
        "id": "T_9GHLw3w3Dn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Imputaremos la categoría \"No Info\" de \"smoking_history\" utilizando un regresor KNN. Esto se debe a que nos pareció incorrecto agrupar estos valores en una misma categoría ya que al tratarse de una variable ordinal, esto generaría que esta categoría se ubique más cerca de algún valor (por ejemplo, si le asignaramos el valor 0, quedaría más cerca de la categoría que identificamos con 1 que de las demás)."
      ],
      "metadata": {
        "id": "ywx1A25Rbe4a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy = train_df.copy(deep = True)"
      ],
      "metadata": {
        "id": "vfNlRuFOw8jP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "min_max_scaler = MinMaxScaler()\n",
        "def min_max_scaleColumns(df, cols_to_scale):\n",
        "    for col in cols_to_scale:\n",
        "        df[col] = pd.DataFrame(min_max_scaler.fit_transform(pd.DataFrame(df[col])),columns=[col])\n",
        "    return df"
      ],
      "metadata": {
        "id": "C-2zvXTSxFTM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.hypertension.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "CTXnHF1pxsqY",
        "outputId": "4a24104b-1573-4875-9f93-f39b2085f3a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "hypertension\n",
              "0    87868\n",
              "1     7132\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hypertension</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>87868</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7132</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "38yu4tXYxoHM",
        "outputId": "6ea7be80-cb0a-4d9d-85b3-e07873a93322"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['patient', 'gender', 'age', 'hypertension', 'heart_disease',\n",
              "       'smoking_history', 'bmi', 'HbA1c_level', 'blood_glucose_level',\n",
              "       'diabetes'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "columns_to_scale = ['age','bmi', 'HbA1c_level', 'blood_glucose_level']"
      ],
      "metadata": {
        "id": "dtHpv3cX2KZ9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_scaled = min_max_scaleColumns(df_copy,columns_to_scale)"
      ],
      "metadata": {
        "id": "yWNtvi6xx-yA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_cat = df_copy[['gender', 'hypertension', 'heart_disease', 'smoking_history']].values\n",
        "X_num = df_scaled[['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']].values\n",
        "X = np.hstack((X_cat,X_num))"
      ],
      "metadata": {
        "id": "xTCkwc4Yyzj4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded = pd.DataFrame(X, columns = ['gender', 'hypertension', 'heart_disease', 'smoking_history', 'age', 'bmi', 'HbA1c_level', 'blood_glucose_level'])\n",
        "mice_imputer = IterativeImputer(random_state=0, estimator=KNeighborsRegressor())\n",
        "df_encoded = mice_imputer.fit_transform(df_encoded)\n",
        "df_copy['gender'] = df_encoded[:,0]\n",
        "df_copy['hypertension'] = df_encoded[:,1]\n",
        "df_copy['heart_disease'] = df_encoded[:,2]\n",
        "df_copy['smoking_history'] = df_encoded[:,3]\n",
        "df_copy['age'] = df_encoded[:,4]\n",
        "df_copy['bmi'] = df_encoded[:,5]\n",
        "df_copy['HbA1c_level'] = df_encoded[:,6]\n",
        "df_copy['blood_glucose_level'] = df_encoded[:,7]"
      ],
      "metadata": {
        "id": "WoIvbLLnzlcc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy.smoking_history.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "rzu2IwK20Cdx",
        "outputId": "60e593cb-8bfc-48bf-ddfe-322b3630c1dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "smoking_history\n",
              "1.0    40058\n",
              "2.0    18090\n",
              "3.0     8961\n",
              "1.2     5914\n",
              "1.4     5352\n",
              "1.6     4569\n",
              "1.8     3922\n",
              "4.0     3792\n",
              "2.2     2034\n",
              "2.4     1297\n",
              "2.6      658\n",
              "2.8      300\n",
              "3.2       37\n",
              "3.4       13\n",
              "3.8        2\n",
              "3.6        1\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoking_history</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>40058</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.0</th>\n",
              "      <td>18090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.0</th>\n",
              "      <td>8961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.2</th>\n",
              "      <td>5914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.4</th>\n",
              "      <td>5352</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.6</th>\n",
              "      <td>4569</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.8</th>\n",
              "      <td>3922</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4.0</th>\n",
              "      <td>3792</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.2</th>\n",
              "      <td>2034</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.4</th>\n",
              "      <td>1297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.6</th>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.8</th>\n",
              "      <td>300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.2</th>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.4</th>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.8</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.6</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Notemos que la variable fue imputada como float. Por ahora no parece ser un problema tan grave (a excepción del hecho de que se pierde un poco el sentido original de la variable). Queda pendiente averiguar como solucionar esto."
      ],
      "metadata": {
        "id": "MTwAHkCUbyBI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_df['smoking_history'] = df_copy['smoking_history']"
      ],
      "metadata": {
        "id": "_U8ORye94mAf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Separamos nuestros datos en conjuntos de entrenamiento y evaluación"
      ],
      "metadata": {
        "id": "WhWzpkIY2sH4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y = train_df.diabetes\n",
        "X = train_df.drop('diabetes',axis=1)"
      ],
      "metadata": {
        "id": "JoaQnxo52Azc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Vamos a separar la columna con los Id de los pacientes en una sola variable:\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "9ozvQ7MVDiVX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "patientId = X.patient\n",
        "X.drop('patient',axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "TEe5vdneDnrf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Estandarizamos las variables"
      ],
      "metadata": {
        "id": "ikgRJz56DrWo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_names = X.columns\n",
        "X = StandardScaler().fit_transform(X)\n",
        "X = pd.DataFrame(X, columns=x_names)\n",
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "urQeyvtLDs51",
        "outputId": "0897e2fa-e305-453f-9836-a77d768825d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         gender       age  hypertension  heart_disease  smoking_history  \\\n",
              "0      1.185739 -1.684913     -0.284899      -0.202693        -0.825102   \n",
              "1     -0.842187  0.358199     -0.284899      -0.202693         0.427834   \n",
              "2     -0.842187  0.047291     -0.284899      -0.202693        -0.825102   \n",
              "3      1.185739  0.980016     -0.284899      -0.202693         1.680771   \n",
              "4      1.185739 -1.418420     -0.284899      -0.202693        -0.574515   \n",
              "...         ...       ...           ...            ...              ...   \n",
              "94995 -0.842187  0.624692     -0.284899      -0.202693        -0.825102   \n",
              "94996 -0.842187 -0.796604     -0.284899      -0.202693        -0.825102   \n",
              "94997 -0.842187 -0.441280     -0.284899      -0.202693        -0.825102   \n",
              "94998 -0.842187 -0.929850     -0.284899      -0.202693         1.680771   \n",
              "94999 -0.842187  0.491445     -0.284899      -0.202693         0.427834   \n",
              "\n",
              "            bmi  HbA1c_level  blood_glucose_level  \n",
              "0     -1.213479    -1.894556             0.415552  \n",
              "1     -0.000133     0.161028             0.513736  \n",
              "2     -0.872414    -0.960200             0.170091  \n",
              "3      0.135690     0.441335            -0.198100  \n",
              "4     -1.789970     0.534771             0.047361  \n",
              "...         ...          ...                  ...  \n",
              "94995 -0.757720     0.628206             0.489190  \n",
              "94996 -0.727537     0.534771            -0.296284  \n",
              "94997 -0.362326     1.001949             0.170091  \n",
              "94998 -1.015782    -0.960200             0.415552  \n",
              "94999 -0.000133     0.628206             0.415552  \n",
              "\n",
              "[95000 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-432e3d3c-4b09-42dd-8373-0a3da8525177\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>HbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.185739</td>\n",
              "      <td>-1.684913</td>\n",
              "      <td>-0.284899</td>\n",
              "      <td>-0.202693</td>\n",
              "      <td>-0.825102</td>\n",
              "      <td>-1.213479</td>\n",
              "      <td>-1.894556</td>\n",
              "      <td>0.415552</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.842187</td>\n",
              "      <td>0.358199</td>\n",
              "      <td>-0.284899</td>\n",
              "      <td>-0.202693</td>\n",
              "      <td>0.427834</td>\n",
              "      <td>-0.000133</td>\n",
              "      <td>0.161028</td>\n",
              "      <td>0.513736</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.842187</td>\n",
              "      <td>0.047291</td>\n",
              "      <td>-0.284899</td>\n",
              "      <td>-0.202693</td>\n",
              "      <td>-0.825102</td>\n",
              "      <td>-0.872414</td>\n",
              "      <td>-0.960200</td>\n",
              "      <td>0.170091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.185739</td>\n",
              "      <td>0.980016</td>\n",
              "      <td>-0.284899</td>\n",
              "      <td>-0.202693</td>\n",
              "      <td>1.680771</td>\n",
              "      <td>0.135690</td>\n",
              "      <td>0.441335</td>\n",
              "      <td>-0.198100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.185739</td>\n",
              "      <td>-1.418420</td>\n",
              "      <td>-0.284899</td>\n",
              "      <td>-0.202693</td>\n",
              "      <td>-0.574515</td>\n",
              "      <td>-1.789970</td>\n",
              "      <td>0.534771</td>\n",
              "      <td>0.047361</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94995</th>\n",
              "      <td>-0.842187</td>\n",
              "      <td>0.624692</td>\n",
              "      <td>-0.284899</td>\n",
              "      <td>-0.202693</td>\n",
              "      <td>-0.825102</td>\n",
              "      <td>-0.757720</td>\n",
              "      <td>0.628206</td>\n",
              "      <td>0.489190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94996</th>\n",
              "      <td>-0.842187</td>\n",
              "      <td>-0.796604</td>\n",
              "      <td>-0.284899</td>\n",
              "      <td>-0.202693</td>\n",
              "      <td>-0.825102</td>\n",
              "      <td>-0.727537</td>\n",
              "      <td>0.534771</td>\n",
              "      <td>-0.296284</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94997</th>\n",
              "      <td>-0.842187</td>\n",
              "      <td>-0.441280</td>\n",
              "      <td>-0.284899</td>\n",
              "      <td>-0.202693</td>\n",
              "      <td>-0.825102</td>\n",
              "      <td>-0.362326</td>\n",
              "      <td>1.001949</td>\n",
              "      <td>0.170091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94998</th>\n",
              "      <td>-0.842187</td>\n",
              "      <td>-0.929850</td>\n",
              "      <td>-0.284899</td>\n",
              "      <td>-0.202693</td>\n",
              "      <td>1.680771</td>\n",
              "      <td>-1.015782</td>\n",
              "      <td>-0.960200</td>\n",
              "      <td>0.415552</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94999</th>\n",
              "      <td>-0.842187</td>\n",
              "      <td>0.491445</td>\n",
              "      <td>-0.284899</td>\n",
              "      <td>-0.202693</td>\n",
              "      <td>0.427834</td>\n",
              "      <td>-0.000133</td>\n",
              "      <td>0.628206</td>\n",
              "      <td>0.415552</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>95000 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-432e3d3c-4b09-42dd-8373-0a3da8525177')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-432e3d3c-4b09-42dd-8373-0a3da8525177 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-432e3d3c-4b09-42dd-8373-0a3da8525177');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-97cec05b-8dad-4b6f-a7f4-0c977123393f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97cec05b-8dad-4b6f-a7f4-0c977123393f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-97cec05b-8dad-4b6f-a7f4-0c977123393f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_bb88c09d-b54a-4cbf-a006-b1d7b4f499ae\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bb88c09d-b54a-4cbf-a006-b1d7b4f499ae button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 95000,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000052631994465,\n        \"min\": -0.8421873199993422,\n        \"max\": 3.2136662475335447,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.1857394637671015,\n          -0.8421873199993422,\n          3.2136662475335447\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000052631994465,\n        \"min\": -1.8590221170385237,\n        \"max\": 1.6906635605639255,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          1.1132622366295932,\n          0.4026144533257996,\n          -1.2851740320207103\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000052631994463,\n        \"min\": -0.2848985878404538,\n        \"max\": 3.5100209080713674,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3.5100209080713674,\n          -0.2848985878404538\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000052631994463,\n        \"min\": -0.2026930715785785,\n        \"max\": 4.933567744629732,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4.933567744629732,\n          -0.2026930715785785\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000052631994465,\n        \"min\": -0.825102485902153,\n        \"max\": 2.933708278699858,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          -0.825102485902153,\n          0.4278344356318508\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000052631994463,\n        \"min\": -2.612450034490152,\n        \"max\": 10.31784200883944,\n        \"num_unique_values\": 4204,\n        \"samples\": [\n          -0.4951298037721994,\n          0.9370418989728736\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000052631994465,\n        \"min\": -1.8945563708451578,\n        \"max\": 3.2444045245124893,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          -1.8945563708451578,\n          0.1610279872979011\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000052631994463,\n        \"min\": -1.4254024874898643,\n        \"max\": 3.974729219582562,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.4155515035575537,\n          0.513735716413416\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Separamos nuestros datos en conjuntos de entrenamiento y validación:"
      ],
      "metadata": {
        "id": "5xVOXHsaD3Xo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state = 8)"
      ],
      "metadata": {
        "id": "WldjxlAVD7DH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Defino la función powerset, tal vez dada la poca cantidad de columnas y el hecho de querer obtener el mejor resultado posible, sea bueno realizar un análisis exhaustivo."
      ],
      "metadata": {
        "id": "VUSfS37nEpYW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Comparación de distintos clasificadores"
      ],
      "metadata": {
        "id": "VLeLPrO_Lxan"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def powerset(s): #Esta función toma un conjunto s y devuelve el conjunto P(s)=conjunto de subconjuntos de s\n",
        "  data = []\n",
        "  x = len(s)\n",
        "  for i in range(1, 1 << x):\n",
        "    data.append([s[j] for j in range(x) if (i & (1 << j))])\n",
        "  return(data)"
      ],
      "metadata": {
        "id": "fZt2kizJEvz7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "names = [\n",
        "    \"Nearest Neighbors\",\n",
        "    \"Linear SVM\",\n",
        "    \"Decision Tree\",\n",
        "    \"Random Forest\",\n",
        "    \"Neural Net\",\n",
        "    \"AdaBoost\",\n",
        "    \"Naive Bayes\",\n",
        "    \"QDA\",\n",
        "    \"Gradient Boosting\"]\n",
        "clfs = [\n",
        "    KNeighborsClassifier(3),\n",
        "    SVC(kernel=\"linear\", C=0.025, random_state=42),\n",
        "    DecisionTreeClassifier(max_depth=5, random_state=42),\n",
        "    RandomForestClassifier(\n",
        "        max_depth=5, n_estimators=10, max_features=1, random_state=42\n",
        "    ),\n",
        "    MLPClassifier(max_iter=1000, random_state=42),\n",
        "    AdaBoostClassifier(algorithm=\"SAMME\", random_state=42),\n",
        "    GaussianNB(),\n",
        "    QuadraticDiscriminantAnalysis(),\n",
        "    GradientBoostingClassifier()]\n",
        "\n",
        "trained_models = []\n",
        "accuracy_models = []\n",
        "for clf,name in zip(clfs,names):\n",
        "    print(name)\n",
        "    clf.fit(x_train, y_train)\n",
        "    train_predictions = clf.predict(x_train)\n",
        "    accuracy = accuracy_score(y_train, train_predictions)\n",
        "    print(f\"Accuracy train {name}: %.2f%%\" % (accuracy * 100.0))\n",
        "\n",
        "    train_predictions = clf.predict(x_test)\n",
        "    accuracy = accuracy_score(y_test, train_predictions)\n",
        "    print(f\"Accuracy test {name}: %.2f%%\" % (accuracy * 100.0))\n",
        "    # plot_confusion_matrix(clf,x_test,y_test)\n",
        "    trained_models.append(clf)\n",
        "    accuracy_models.append(accuracy*100)"
      ],
      "metadata": {
        "id": "-ZtWn4r3EBxc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f86bb7d5-eecd-437e-df89-6b746b220555"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nearest Neighbors\n",
            "Accuracy train Nearest Neighbors: 97.33%\n",
            "Accuracy test Nearest Neighbors: 95.95%\n",
            "Linear SVM\n",
            "Accuracy train Linear SVM: 96.01%\n",
            "Accuracy test Linear SVM: 96.21%\n",
            "Decision Tree\n",
            "Accuracy train Decision Tree: 97.14%\n",
            "Accuracy test Decision Tree: 97.36%\n",
            "Random Forest\n",
            "Accuracy train Random Forest: 96.23%\n",
            "Accuracy test Random Forest: 96.45%\n",
            "Neural Net\n",
            "Accuracy train Neural Net: 97.19%\n",
            "Accuracy test Neural Net: 97.38%\n",
            "AdaBoost\n",
            "Accuracy train AdaBoost: 97.14%\n",
            "Accuracy test AdaBoost: 97.36%\n",
            "Naive Bayes\n",
            "Accuracy train Naive Bayes: 90.41%\n",
            "Accuracy test Naive Bayes: 90.30%\n",
            "QDA\n",
            "Accuracy train QDA: 90.59%\n",
            "Accuracy test QDA: 90.37%\n",
            "Gradient Boosting\n",
            "Accuracy train Gradient Boosting: 97.19%\n",
            "Accuracy test Gradient Boosting: 97.39%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Ajuste de hiperparámetros"
      ],
      "metadata": {
        "id": "3feLn-TgJlbb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Random Forest y Gradient Boosting son los clasificadores que obtienen mejores resultados (además, poseen la ventaja de no demorar tanto tiempo en entrenar). Investigando un poco, vemos que esto tiene sentido ya que estos clasificadores son buenos para problemas de clases desbalanceadas. Haremos también gridsearch para el clasificador DecisionTree, ya que con un ajuste de hiperparámetros también se obtienen buenos resultados. Podemos probar también MLP pero este método demora mucho y por lo tanto una búsqueda de hiperparámetros puede ser inviable."
      ],
      "metadata": {
        "id": "3b7cPJnYfqQQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Grid Search para MLP"
      ],
      "metadata": {
        "id": "s_Dqmwy-xK0v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "parameters = {'activation': ['identity', 'logistic', 'tanh', 'relu'],\n",
        "              'learning_rate' : ['constant', 'invscaling', 'adaptive'],}\n",
        "grid_nn= GridSearchCV(MLPClassifier(random_state = 42), parameters, scoring = 'accuracy')\n",
        "grid_nn.fit(x_train,y_train)\n",
        "grid_nn.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FtxiDfLQzAC6",
        "outputId": "34e2ef37-7c86-4488-d508-f1da3fb9c4ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'activation': 'relu', 'learning_rate': 'constant'}"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En la celda anterior se obtienen los hiperparámetros por defecto."
      ],
      "metadata": {
        "id": "KjvHRLog8pVi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clf = MLPClassifier(**grid_nn.best_params_, random_state = 42)\n",
        "mlp_results = []\n",
        "columns_sets = powerset(x_test.columns)\n",
        "for columns in columns_sets:\n",
        "  if len(columns) > 4: ##Evaluamos sobre todas las configuraciones de más de 4 features\n",
        "    clf.fit(x_train[columns], y_train)\n",
        "    y_train_pred = clf.predict(x_train[columns])\n",
        "    y_val_pred = clf.predict(x_test[columns])\n",
        "    train_accuracy = accuracy_score(y_train, y_train_pred)\n",
        "    val_accuracy  = accuracy_score(y_test, y_val_pred)\n",
        "    if train_accuracy >= 0.97 and val_accuracy >= 0.9735:\n",
        "      train_precision = precision_score(y_train, y_train_pred)\n",
        "      test_precision = precision_score(y_test, y_val_pred)\n",
        "      train_recall = recall_score(y_train, y_train_pred)\n",
        "      test_recall = recall_score(y_test, y_val_pred)\n",
        "      train_f1 = f1_score(y_train, y_train_pred)\n",
        "      test_f1 = f1_score(y_test, y_val_pred)\n",
        "      train_bal_accuracy = balanced_accuracy_score(y_train,y_train_pred)\n",
        "      test_bal_accuracy = balanced_accuracy_score(y_test,y_val_pred)\n",
        "      mlp_results.append([columns, train_accuracy, val_accuracy, train_bal_accuracy, test_bal_accuracy, train_precision, test_precision, train_recall, test_recall, train_f1, test_f1, confusion_matrix(y_train, y_train_pred)])\n",
        "mlp_results_df = pd.DataFrame(mlp_results, columns = ['columns_used', 'train_accuracy', 'val_accuracy', 'train_balanced_accuracy', 'test_balanced_accuracy', 'train_precision', 'test_precision', 'train_recall', 'test_recall', 'train_f1', 'test_f1', 'confusion_matrix'])\n",
        "mlp_results_df = mlp_results_df.set_index('columns_used')\n",
        "mlp_results_df = mlp_results_df.sort_values(by='val_accuracy', ascending=False)\n",
        "mlp_results_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wqTWdpIHz-EN",
        "outputId": "d0f54db7-11ea-4d6e-d873-7ceaf38e58d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                    train_accuracy  \\\n",
              "columns_used                                                         \n",
              "[hypertension, heart_disease, smoking_history, ...        0.971711   \n",
              "[gender, hypertension, heart_disease, smoking_h...        0.971658   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...        0.971461   \n",
              "[age, heart_disease, smoking_history, bmi, HbA1...        0.971605   \n",
              "[gender, age, heart_disease, bmi, HbA1c_level, ...        0.971526   \n",
              "[heart_disease, smoking_history, bmi, HbA1c_lev...        0.971711   \n",
              "[age, hypertension, heart_disease, bmi, HbA1c_l...        0.971855   \n",
              "[gender, age, hypertension, heart_disease, smok...        0.971921   \n",
              "[age, hypertension, heart_disease, smoking_hist...        0.971842   \n",
              "[gender, age, heart_disease, smoking_history, b...        0.971658   \n",
              "[age, heart_disease, bmi, HbA1c_level, blood_gl...        0.971579   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...        0.971526   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...        0.971566   \n",
              "[gender, heart_disease, bmi, HbA1c_level, blood...        0.971539   \n",
              "[gender, heart_disease, smoking_history, bmi, H...        0.971618   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...        0.971566   \n",
              "[age, hypertension, smoking_history, bmi, HbA1c...        0.971539   \n",
              "[hypertension, smoking_history, bmi, HbA1c_leve...        0.971421   \n",
              "[gender, age, hypertension, bmi, HbA1c_level, b...        0.971684   \n",
              "[age, heart_disease, smoking_history, HbA1c_lev...        0.971368   \n",
              "[gender, age, smoking_history, bmi, HbA1c_level...        0.971408   \n",
              "[gender, age, smoking_history, HbA1c_level, blo...        0.971395   \n",
              "[gender, hypertension, smoking_history, HbA1c_l...        0.971395   \n",
              "[age, hypertension, smoking_history, HbA1c_leve...        0.971395   \n",
              "[gender, smoking_history, bmi, HbA1c_level, blo...        0.971395   \n",
              "[age, smoking_history, bmi, HbA1c_level, blood_...        0.971382   \n",
              "[gender, age, hypertension, smoking_history, Hb...        0.971395   \n",
              "[gender, heart_disease, smoking_history, HbA1c_...        0.971382   \n",
              "[gender, hypertension, heart_disease, HbA1c_lev...        0.971382   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...        0.971355   \n",
              "[gender, hypertension, heart_disease, smoking_h...        0.971395   \n",
              "[hypertension, heart_disease, smoking_history, ...        0.971395   \n",
              "[gender, age, hypertension, HbA1c_level, blood_...        0.971395   \n",
              "[gender, age, heart_disease, smoking_history, H...        0.971421   \n",
              "[gender, hypertension, smoking_history, bmi, Hb...        0.971513   \n",
              "[gender, age, hypertension, smoking_history, bm...        0.971737   \n",
              "[age, hypertension, heart_disease, smoking_hist...        0.971395   \n",
              "[gender, age, hypertension, heart_disease, HbA1...        0.971276   \n",
              "\n",
              "                                                    val_accuracy  \\\n",
              "columns_used                                                       \n",
              "[hypertension, heart_disease, smoking_history, ...      0.974158   \n",
              "[gender, hypertension, heart_disease, smoking_h...      0.974053   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...      0.973842   \n",
              "[age, heart_disease, smoking_history, bmi, HbA1...      0.973842   \n",
              "[gender, age, heart_disease, bmi, HbA1c_level, ...      0.973789   \n",
              "[heart_disease, smoking_history, bmi, HbA1c_lev...      0.973789   \n",
              "[age, hypertension, heart_disease, bmi, HbA1c_l...      0.973789   \n",
              "[gender, age, hypertension, heart_disease, smok...      0.973789   \n",
              "[age, hypertension, heart_disease, smoking_hist...      0.973737   \n",
              "[gender, age, heart_disease, smoking_history, b...      0.973737   \n",
              "[age, heart_disease, bmi, HbA1c_level, blood_gl...      0.973737   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...      0.973684   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...      0.973684   \n",
              "[gender, heart_disease, bmi, HbA1c_level, blood...      0.973684   \n",
              "[gender, heart_disease, smoking_history, bmi, H...      0.973684   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...      0.973684   \n",
              "[age, hypertension, smoking_history, bmi, HbA1c...      0.973684   \n",
              "[hypertension, smoking_history, bmi, HbA1c_leve...      0.973684   \n",
              "[gender, age, hypertension, bmi, HbA1c_level, b...      0.973632   \n",
              "[age, heart_disease, smoking_history, HbA1c_lev...      0.973579   \n",
              "[gender, age, smoking_history, bmi, HbA1c_level...      0.973579   \n",
              "[gender, age, smoking_history, HbA1c_level, blo...      0.973579   \n",
              "[gender, hypertension, smoking_history, HbA1c_l...      0.973579   \n",
              "[age, hypertension, smoking_history, HbA1c_leve...      0.973579   \n",
              "[gender, smoking_history, bmi, HbA1c_level, blo...      0.973579   \n",
              "[age, smoking_history, bmi, HbA1c_level, blood_...      0.973579   \n",
              "[gender, age, hypertension, smoking_history, Hb...      0.973579   \n",
              "[gender, heart_disease, smoking_history, HbA1c_...      0.973579   \n",
              "[gender, hypertension, heart_disease, HbA1c_lev...      0.973579   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...      0.973579   \n",
              "[gender, hypertension, heart_disease, smoking_h...      0.973579   \n",
              "[hypertension, heart_disease, smoking_history, ...      0.973579   \n",
              "[gender, age, hypertension, HbA1c_level, blood_...      0.973579   \n",
              "[gender, age, heart_disease, smoking_history, H...      0.973526   \n",
              "[gender, hypertension, smoking_history, bmi, Hb...      0.973526   \n",
              "[gender, age, hypertension, smoking_history, bm...      0.973526   \n",
              "[age, hypertension, heart_disease, smoking_hist...      0.973526   \n",
              "[gender, age, hypertension, heart_disease, HbA1...      0.973526   \n",
              "\n",
              "                                                    train_balanced_accuracy  \\\n",
              "columns_used                                                                  \n",
              "[hypertension, heart_disease, smoking_history, ...                 0.835438   \n",
              "[gender, hypertension, heart_disease, smoking_h...                 0.835762   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...                 0.834526   \n",
              "[age, heart_disease, smoking_history, bmi, HbA1...                 0.833689   \n",
              "[gender, age, heart_disease, bmi, HbA1c_level, ...                 0.833434   \n",
              "[heart_disease, smoking_history, bmi, HbA1c_lev...                 0.835015   \n",
              "[age, hypertension, heart_disease, bmi, HbA1c_l...                 0.836927   \n",
              "[gender, age, hypertension, heart_disease, smok...                 0.838021   \n",
              "[age, hypertension, heart_disease, smoking_hist...                 0.840304   \n",
              "[gender, age, heart_disease, smoking_history, b...                 0.835480   \n",
              "[age, heart_disease, bmi, HbA1c_level, blood_gl...                 0.833815   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...                 0.832306   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...                 0.834936   \n",
              "[gender, heart_disease, bmi, HbA1c_level, blood...                 0.835204   \n",
              "[gender, heart_disease, smoking_history, bmi, H...                 0.833202   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...                 0.834725   \n",
              "[age, hypertension, smoking_history, bmi, HbA1c...                 0.834358   \n",
              "[hypertension, smoking_history, bmi, HbA1c_leve...                 0.831403   \n",
              "[gender, age, hypertension, bmi, HbA1c_level, b...                 0.835001   \n",
              "[age, heart_disease, smoking_history, HbA1c_lev...                 0.830951   \n",
              "[gender, age, smoking_history, bmi, HbA1c_level...                 0.831818   \n",
              "[gender, age, smoking_history, HbA1c_level, blo...                 0.831106   \n",
              "[gender, hypertension, smoking_history, HbA1c_l...                 0.831106   \n",
              "[age, hypertension, smoking_history, HbA1c_leve...                 0.831106   \n",
              "[gender, smoking_history, bmi, HbA1c_level, blo...                 0.831106   \n",
              "[age, smoking_history, bmi, HbA1c_level, blood_...                 0.831522   \n",
              "[gender, age, hypertension, smoking_history, Hb...                 0.831106   \n",
              "[gender, heart_disease, smoking_history, HbA1c_...                 0.831099   \n",
              "[gender, hypertension, heart_disease, HbA1c_lev...                 0.831240   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...                 0.831860   \n",
              "[gender, hypertension, heart_disease, smoking_h...                 0.831247   \n",
              "[hypertension, heart_disease, smoking_history, ...                 0.831106   \n",
              "[gender, age, hypertension, HbA1c_level, blood_...                 0.831106   \n",
              "[gender, age, heart_disease, smoking_history, H...                 0.831332   \n",
              "[gender, hypertension, smoking_history, bmi, Hb...                 0.832933   \n",
              "[gender, age, hypertension, smoking_history, bm...                 0.836017   \n",
              "[age, hypertension, heart_disease, smoking_hist...                 0.831106   \n",
              "[gender, age, hypertension, heart_disease, HbA1...                 0.832099   \n",
              "\n",
              "                                                    test_balanced_accuracy  \\\n",
              "columns_used                                                                 \n",
              "[hypertension, heart_disease, smoking_history, ...                0.852225   \n",
              "[gender, hypertension, heart_disease, smoking_h...                0.851343   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...                0.850403   \n",
              "[age, heart_disease, smoking_history, bmi, HbA1...                0.850128   \n",
              "[gender, age, heart_disease, bmi, HbA1c_level, ...                0.849274   \n",
              "[heart_disease, smoking_history, bmi, HbA1c_lev...                0.850374   \n",
              "[age, hypertension, heart_disease, bmi, HbA1c_l...                0.851474   \n",
              "[gender, age, hypertension, heart_disease, smok...                0.851749   \n",
              "[age, hypertension, heart_disease, smoking_hist...                0.854194   \n",
              "[gender, age, heart_disease, smoking_history, b...                0.850895   \n",
              "[age, heart_disease, bmi, HbA1c_level, blood_gl...                0.849245   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...                0.848667   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...                0.850316   \n",
              "[gender, heart_disease, bmi, HbA1c_level, blood...                0.849766   \n",
              "[gender, heart_disease, smoking_history, bmi, H...                0.848942   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...                0.849766   \n",
              "[age, hypertension, smoking_history, bmi, HbA1c...                0.850316   \n",
              "[hypertension, smoking_history, bmi, HbA1c_leve...                0.848392   \n",
              "[gender, age, hypertension, bmi, HbA1c_level, b...                0.850287   \n",
              "[age, heart_disease, smoking_history, HbA1c_lev...                0.847509   \n",
              "[gender, age, smoking_history, bmi, HbA1c_level...                0.847509   \n",
              "[gender, age, smoking_history, HbA1c_level, blo...                0.847509   \n",
              "[gender, hypertension, smoking_history, HbA1c_l...                0.847509   \n",
              "[age, hypertension, smoking_history, HbA1c_leve...                0.847509   \n",
              "[gender, smoking_history, bmi, HbA1c_level, blo...                0.847509   \n",
              "[age, smoking_history, bmi, HbA1c_level, blood_...                0.848059   \n",
              "[gender, age, hypertension, smoking_history, Hb...                0.847509   \n",
              "[gender, heart_disease, smoking_history, HbA1c_...                0.847509   \n",
              "[gender, hypertension, heart_disease, HbA1c_lev...                0.847509   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...                0.848059   \n",
              "[gender, hypertension, heart_disease, smoking_h...                0.847509   \n",
              "[hypertension, heart_disease, smoking_history, ...                0.847509   \n",
              "[gender, age, hypertension, HbA1c_level, blood_...                0.847509   \n",
              "[gender, age, heart_disease, smoking_history, H...                0.847480   \n",
              "[gender, hypertension, smoking_history, bmi, Hb...                0.848580   \n",
              "[gender, age, hypertension, smoking_history, bm...                0.849955   \n",
              "[age, hypertension, heart_disease, smoking_hist...                0.847480   \n",
              "[gender, age, hypertension, heart_disease, HbA1...                0.848580   \n",
              "\n",
              "                                                    train_precision  \\\n",
              "columns_used                                                          \n",
              "[hypertension, heart_disease, smoking_history, ...         0.991965   \n",
              "[gender, hypertension, heart_disease, smoking_h...         0.989931   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...         0.990122   \n",
              "[age, heart_disease, smoking_history, bmi, HbA1...         0.995598   \n",
              "[gender, age, heart_disease, bmi, HbA1c_level, ...         0.994903   \n",
              "[heart_disease, smoking_history, bmi, HbA1c_lev...         0.993324   \n",
              "[age, hypertension, heart_disease, bmi, HbA1c_l...         0.989966   \n",
              "[gender, age, hypertension, heart_disease, smok...         0.987755   \n",
              "[age, hypertension, heart_disease, smoking_hist...         0.979250   \n",
              "[gender, age, heart_disease, smoking_history, b...         0.990830   \n",
              "[age, heart_disease, bmi, HbA1c_level, blood_gl...         0.994678   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...         0.998599   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...         0.990815   \n",
              "[gender, heart_disease, bmi, HbA1c_level, blood...         0.989462   \n",
              "[gender, heart_disease, smoking_history, bmi, H...         0.997442   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...         0.991492   \n",
              "[age, hypertension, smoking_history, bmi, HbA1c...         0.992168   \n",
              "[hypertension, smoking_history, bmi, HbA1c_leve...         0.999531   \n",
              "[gender, age, hypertension, bmi, HbA1c_level, b...         0.992867   \n",
              "[age, heart_disease, smoking_history, HbA1c_lev...         1.000000   \n",
              "[gender, age, smoking_history, bmi, HbA1c_level...         0.997898   \n",
              "[gender, age, smoking_history, HbA1c_level, blo...         1.000000   \n",
              "[gender, hypertension, smoking_history, HbA1c_l...         1.000000   \n",
              "[age, hypertension, smoking_history, HbA1c_leve...         1.000000   \n",
              "[gender, smoking_history, bmi, HbA1c_level, blo...         1.000000   \n",
              "[age, smoking_history, bmi, HbA1c_level, blood_...         0.998363   \n",
              "[gender, age, hypertension, smoking_history, Hb...         1.000000   \n",
              "[gender, heart_disease, smoking_history, HbA1c_...         0.999765   \n",
              "[gender, hypertension, heart_disease, HbA1c_lev...         0.999297   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...         0.996734   \n",
              "[gender, hypertension, heart_disease, smoking_h...         0.999531   \n",
              "[hypertension, heart_disease, smoking_history, ...         1.000000   \n",
              "[gender, age, hypertension, HbA1c_level, blood_...         1.000000   \n",
              "[gender, age, heart_disease, smoking_history, H...         0.999766   \n",
              "[gender, hypertension, smoking_history, bmi, Hb...         0.996282   \n",
              "[gender, age, hypertension, smoking_history, bm...         0.990618   \n",
              "[age, hypertension, heart_disease, smoking_hist...         1.000000   \n",
              "[gender, age, hypertension, heart_disease, HbA1...         0.994420   \n",
              "\n",
              "                                                    test_precision  \\\n",
              "columns_used                                                         \n",
              "[hypertension, heart_disease, smoking_history, ...        0.995708   \n",
              "[gender, hypertension, heart_disease, smoking_h...        0.996555   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...        0.995686   \n",
              "[age, heart_disease, smoking_history, bmi, HbA1...        0.996543   \n",
              "[gender, age, heart_disease, bmi, HbA1c_level, ...        0.998264   \n",
              "[heart_disease, smoking_history, bmi, HbA1c_lev...        0.994828   \n",
              "[age, hypertension, heart_disease, bmi, HbA1c_l...        0.991438   \n",
              "[gender, age, hypertension, heart_disease, smok...        0.990598   \n",
              "[age, hypertension, heart_disease, smoking_hist...        0.982338   \n",
              "[gender, age, heart_disease, smoking_history, b...        0.992275   \n",
              "[age, heart_disease, bmi, HbA1c_level, blood_gl...        0.997398   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...        0.998261   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...        0.993115   \n",
              "[gender, heart_disease, bmi, HbA1c_level, blood...        0.994819   \n",
              "[gender, heart_disease, smoking_history, bmi, H...        0.997396   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...        0.994819   \n",
              "[age, hypertension, smoking_history, bmi, HbA1c...        0.993115   \n",
              "[hypertension, smoking_history, bmi, HbA1c_leve...        0.999129   \n",
              "[gender, age, hypertension, bmi, HbA1c_level, b...        0.992261   \n",
              "[age, heart_disease, smoking_history, HbA1c_lev...        1.000000   \n",
              "[gender, age, smoking_history, bmi, HbA1c_level...        1.000000   \n",
              "[gender, age, smoking_history, HbA1c_level, blo...        1.000000   \n",
              "[gender, hypertension, smoking_history, HbA1c_l...        1.000000   \n",
              "[age, hypertension, smoking_history, HbA1c_leve...        1.000000   \n",
              "[gender, smoking_history, bmi, HbA1c_level, blo...        1.000000   \n",
              "[age, smoking_history, bmi, HbA1c_level, blood_...        0.998258   \n",
              "[gender, age, hypertension, smoking_history, Hb...        1.000000   \n",
              "[gender, heart_disease, smoking_history, HbA1c_...        1.000000   \n",
              "[gender, hypertension, heart_disease, HbA1c_lev...        1.000000   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...        0.998258   \n",
              "[gender, hypertension, heart_disease, smoking_h...        1.000000   \n",
              "[hypertension, heart_disease, smoking_history, ...        1.000000   \n",
              "[gender, age, hypertension, HbA1c_level, blood_...        1.000000   \n",
              "[gender, age, heart_disease, smoking_history, H...        0.999127   \n",
              "[gender, hypertension, smoking_history, bmi, Hb...        0.995663   \n",
              "[gender, age, hypertension, smoking_history, bm...        0.991402   \n",
              "[age, hypertension, heart_disease, smoking_hist...        0.999127   \n",
              "[gender, age, hypertension, heart_disease, HbA1...        0.995663   \n",
              "\n",
              "                                                    train_recall  test_recall  \\\n",
              "columns_used                                                                    \n",
              "[hypertension, heart_disease, smoking_history, ...      0.671380     0.704739   \n",
              "[gender, hypertension, heart_disease, smoking_h...      0.672157     0.702916   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...      0.669671     0.701094   \n",
              "[age, heart_disease, smoking_history, bmi, HbA1...      0.667651     0.700486   \n",
              "[gender, age, heart_disease, bmi, HbA1c_level, ...      0.667185     0.698663   \n",
              "[heart_disease, smoking_history, bmi, HbA1c_lev...      0.670447     0.701094   \n",
              "[age, hypertension, heart_disease, bmi, HbA1c_l...      0.674487     0.703524   \n",
              "[gender, age, hypertension, heart_disease, smok...      0.676818     0.704131   \n",
              "[age, hypertension, heart_disease, smoking_hist...      0.681945     0.709599   \n",
              "[gender, age, heart_disease, smoking_history, b...      0.671535     0.702309   \n",
              "[age, heart_disease, bmi, HbA1c_level, blood_gl...      0.667961     0.698663   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...      0.664699     0.697448   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...      0.670447     0.701094   \n",
              "[gender, heart_disease, bmi, HbA1c_level, blood...      0.671069     0.699878   \n",
              "[gender, heart_disease, smoking_history, bmi, H...      0.666563     0.698056   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...      0.669981     0.699878   \n",
              "[age, hypertension, smoking_history, bmi, HbA1c...      0.669204     0.701094   \n",
              "[hypertension, smoking_history, bmi, HbA1c_leve...      0.662834     0.696841   \n",
              "[gender, age, hypertension, bmi, HbA1c_level, b...      0.670447     0.701094   \n",
              "[age, heart_disease, smoking_history, HbA1c_lev...      0.661902     0.695018   \n",
              "[gender, age, smoking_history, bmi, HbA1c_level...      0.663766     0.695018   \n",
              "[gender, age, smoking_history, HbA1c_level, blo...      0.662213     0.695018   \n",
              "[gender, hypertension, smoking_history, HbA1c_l...      0.662213     0.695018   \n",
              "[age, hypertension, smoking_history, HbA1c_leve...      0.662213     0.695018   \n",
              "[gender, smoking_history, bmi, HbA1c_level, blo...      0.662213     0.695018   \n",
              "[age, smoking_history, bmi, HbA1c_level, blood_...      0.663145     0.696233   \n",
              "[gender, age, hypertension, smoking_history, Hb...      0.662213     0.695018   \n",
              "[gender, heart_disease, smoking_history, HbA1c_...      0.662213     0.695018   \n",
              "[gender, hypertension, heart_disease, HbA1c_lev...      0.662523     0.695018   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...      0.663922     0.696233   \n",
              "[gender, hypertension, heart_disease, smoking_h...      0.662523     0.695018   \n",
              "[hypertension, heart_disease, smoking_history, ...      0.662213     0.695018   \n",
              "[gender, age, hypertension, HbA1c_level, blood_...      0.662213     0.695018   \n",
              "[gender, age, heart_disease, smoking_history, H...      0.662679     0.695018   \n",
              "[gender, hypertension, smoking_history, bmi, Hb...      0.666097     0.697448   \n",
              "[gender, age, hypertension, smoking_history, bm...      0.672623     0.700486   \n",
              "[age, hypertension, heart_disease, smoking_hist...      0.662213     0.695018   \n",
              "[gender, age, hypertension, heart_disease, HbA1...      0.664543     0.697448   \n",
              "\n",
              "                                                    train_f1   test_f1  \\\n",
              "columns_used                                                             \n",
              "[hypertension, heart_disease, smoking_history, ...  0.800778  0.825329   \n",
              "[gender, hypertension, heart_disease, smoking_h...  0.800666  0.824368   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...  0.798962  0.822816   \n",
              "[age, heart_disease, smoking_history, bmi, HbA1...  0.799293  0.822690   \n",
              "[gender, age, heart_disease, bmi, HbA1c_level, ...  0.798735  0.822016   \n",
              "[heart_disease, smoking_history, bmi, HbA1c_lev...  0.800557  0.822523   \n",
              "[age, hypertension, heart_disease, bmi, HbA1c_l...  0.802329  0.823028   \n",
              "[gender, age, hypertension, heart_disease, smok...  0.803245  0.823153   \n",
              "[age, hypertension, heart_disease, smoking_hist...  0.803993  0.823986   \n",
              "[gender, age, heart_disease, smoking_history, b...  0.800519  0.822483   \n",
              "[age, heart_disease, bmi, HbA1c_level, blood_gl...  0.799219  0.821722   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...  0.798134  0.821173   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...  0.799741  0.821937   \n",
              "[gender, heart_disease, bmi, HbA1c_level, blood...  0.799741  0.821683   \n",
              "[gender, heart_disease, smoking_history, bmi, H...  0.799106  0.821301   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...  0.799629  0.821683   \n",
              "[age, hypertension, smoking_history, bmi, HbA1c...  0.799295  0.821937   \n",
              "[hypertension, smoking_history, bmi, HbA1c_leve...  0.797085  0.821045   \n",
              "[gender, age, hypertension, bmi, HbA1c_level, b...  0.800408  0.821645   \n",
              "[age, heart_disease, smoking_history, HbA1c_lev...  0.796559  0.820072   \n",
              "[gender, age, smoking_history, bmi, HbA1c_level...  0.797238  0.820072   \n",
              "[gender, age, smoking_history, HbA1c_level, blo...  0.796784  0.820072   \n",
              "[gender, hypertension, smoking_history, HbA1c_l...  0.796784  0.820072   \n",
              "[age, hypertension, smoking_history, HbA1c_leve...  0.796784  0.820072   \n",
              "[gender, smoking_history, bmi, HbA1c_level, blo...  0.796784  0.820072   \n",
              "[age, smoking_history, bmi, HbA1c_level, blood_...  0.796938  0.820329   \n",
              "[gender, age, hypertension, smoking_history, Hb...  0.796784  0.820072   \n",
              "[gender, heart_disease, smoking_history, HbA1c_...  0.796710  0.820072   \n",
              "[gender, hypertension, heart_disease, HbA1c_lev...  0.796786  0.820072   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...  0.796978  0.820329   \n",
              "[gender, hypertension, heart_disease, smoking_h...  0.796860  0.820072   \n",
              "[hypertension, heart_disease, smoking_history, ...  0.796784  0.820072   \n",
              "[gender, age, hypertension, HbA1c_level, blood_...  0.796784  0.820072   \n",
              "[gender, age, heart_disease, smoking_history, H...  0.797047  0.819778   \n",
              "[gender, hypertension, smoking_history, bmi, Hb...  0.798398  0.820293   \n",
              "[gender, age, hypertension, smoking_history, bm...  0.801222  0.820933   \n",
              "[age, hypertension, heart_disease, smoking_hist...  0.796784  0.819778   \n",
              "[gender, age, hypertension, heart_disease, HbA1...  0.796684  0.820293   \n",
              "\n",
              "                                                               confusion_matrix  \n",
              "columns_used                                                                     \n",
              "[hypertension, heart_disease, smoking_history, ...  [[69529, 35], [2115, 4321]]  \n",
              "[gender, hypertension, heart_disease, smoking_h...  [[69520, 44], [2110, 4326]]  \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...  [[69521, 43], [2126, 4310]]  \n",
              "[age, heart_disease, smoking_history, bmi, HbA1...  [[69545, 19], [2139, 4297]]  \n",
              "[gender, age, heart_disease, bmi, HbA1c_level, ...  [[69542, 22], [2142, 4294]]  \n",
              "[heart_disease, smoking_history, bmi, HbA1c_lev...  [[69535, 29], [2121, 4315]]  \n",
              "[age, hypertension, heart_disease, bmi, HbA1c_l...  [[69520, 44], [2095, 4341]]  \n",
              "[gender, age, hypertension, heart_disease, smok...  [[69510, 54], [2080, 4356]]  \n",
              "[age, hypertension, heart_disease, smoking_hist...  [[69471, 93], [2047, 4389]]  \n",
              "[gender, age, heart_disease, smoking_history, b...  [[69524, 40], [2114, 4322]]  \n",
              "[age, heart_disease, bmi, HbA1c_level, blood_gl...  [[69541, 23], [2137, 4299]]  \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...   [[69558, 6], [2158, 4278]]  \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...  [[69524, 40], [2121, 4315]]  \n",
              "[gender, heart_disease, bmi, HbA1c_level, blood...  [[69518, 46], [2117, 4319]]  \n",
              "[gender, heart_disease, smoking_history, bmi, H...  [[69553, 11], [2146, 4290]]  \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...  [[69527, 37], [2124, 4312]]  \n",
              "[age, hypertension, smoking_history, bmi, HbA1c...  [[69530, 34], [2129, 4307]]  \n",
              "[hypertension, smoking_history, bmi, HbA1c_leve...   [[69562, 2], [2170, 4266]]  \n",
              "[gender, age, hypertension, bmi, HbA1c_level, b...  [[69533, 31], [2121, 4315]]  \n",
              "[age, heart_disease, smoking_history, HbA1c_lev...   [[69564, 0], [2176, 4260]]  \n",
              "[gender, age, smoking_history, bmi, HbA1c_level...   [[69555, 9], [2164, 4272]]  \n",
              "[gender, age, smoking_history, HbA1c_level, blo...   [[69564, 0], [2174, 4262]]  \n",
              "[gender, hypertension, smoking_history, HbA1c_l...   [[69564, 0], [2174, 4262]]  \n",
              "[age, hypertension, smoking_history, HbA1c_leve...   [[69564, 0], [2174, 4262]]  \n",
              "[gender, smoking_history, bmi, HbA1c_level, blo...   [[69564, 0], [2174, 4262]]  \n",
              "[age, smoking_history, bmi, HbA1c_level, blood_...   [[69557, 7], [2168, 4268]]  \n",
              "[gender, age, hypertension, smoking_history, Hb...   [[69564, 0], [2174, 4262]]  \n",
              "[gender, heart_disease, smoking_history, HbA1c_...   [[69563, 1], [2174, 4262]]  \n",
              "[gender, hypertension, heart_disease, HbA1c_lev...   [[69561, 3], [2172, 4264]]  \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...  [[69550, 14], [2163, 4273]]  \n",
              "[gender, hypertension, heart_disease, smoking_h...   [[69562, 2], [2172, 4264]]  \n",
              "[hypertension, heart_disease, smoking_history, ...   [[69564, 0], [2174, 4262]]  \n",
              "[gender, age, hypertension, HbA1c_level, blood_...   [[69564, 0], [2174, 4262]]  \n",
              "[gender, age, heart_disease, smoking_history, H...   [[69563, 1], [2171, 4265]]  \n",
              "[gender, hypertension, smoking_history, bmi, Hb...  [[69548, 16], [2149, 4287]]  \n",
              "[gender, age, hypertension, smoking_history, bm...  [[69523, 41], [2107, 4329]]  \n",
              "[age, hypertension, heart_disease, smoking_hist...   [[69564, 0], [2174, 4262]]  \n",
              "[gender, age, hypertension, heart_disease, HbA1...  [[69540, 24], [2159, 4277]]  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3d94c891-7fbd-4708-8273-6708589eb02b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>train_accuracy</th>\n",
              "      <th>val_accuracy</th>\n",
              "      <th>train_balanced_accuracy</th>\n",
              "      <th>test_balanced_accuracy</th>\n",
              "      <th>train_precision</th>\n",
              "      <th>test_precision</th>\n",
              "      <th>train_recall</th>\n",
              "      <th>test_recall</th>\n",
              "      <th>train_f1</th>\n",
              "      <th>test_f1</th>\n",
              "      <th>confusion_matrix</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>columns_used</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>[hypertension, heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971711</td>\n",
              "      <td>0.974158</td>\n",
              "      <td>0.835438</td>\n",
              "      <td>0.852225</td>\n",
              "      <td>0.991965</td>\n",
              "      <td>0.995708</td>\n",
              "      <td>0.671380</td>\n",
              "      <td>0.704739</td>\n",
              "      <td>0.800778</td>\n",
              "      <td>0.825329</td>\n",
              "      <td>[[69529, 35], [2115, 4321]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971658</td>\n",
              "      <td>0.974053</td>\n",
              "      <td>0.835762</td>\n",
              "      <td>0.851343</td>\n",
              "      <td>0.989931</td>\n",
              "      <td>0.996555</td>\n",
              "      <td>0.672157</td>\n",
              "      <td>0.702916</td>\n",
              "      <td>0.800666</td>\n",
              "      <td>0.824368</td>\n",
              "      <td>[[69520, 44], [2110, 4326]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[hypertension, heart_disease, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971461</td>\n",
              "      <td>0.973842</td>\n",
              "      <td>0.834526</td>\n",
              "      <td>0.850403</td>\n",
              "      <td>0.990122</td>\n",
              "      <td>0.995686</td>\n",
              "      <td>0.669671</td>\n",
              "      <td>0.701094</td>\n",
              "      <td>0.798962</td>\n",
              "      <td>0.822816</td>\n",
              "      <td>[[69521, 43], [2126, 4310]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971605</td>\n",
              "      <td>0.973842</td>\n",
              "      <td>0.833689</td>\n",
              "      <td>0.850128</td>\n",
              "      <td>0.995598</td>\n",
              "      <td>0.996543</td>\n",
              "      <td>0.667651</td>\n",
              "      <td>0.700486</td>\n",
              "      <td>0.799293</td>\n",
              "      <td>0.822690</td>\n",
              "      <td>[[69545, 19], [2139, 4297]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, heart_disease, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971526</td>\n",
              "      <td>0.973789</td>\n",
              "      <td>0.833434</td>\n",
              "      <td>0.849274</td>\n",
              "      <td>0.994903</td>\n",
              "      <td>0.998264</td>\n",
              "      <td>0.667185</td>\n",
              "      <td>0.698663</td>\n",
              "      <td>0.798735</td>\n",
              "      <td>0.822016</td>\n",
              "      <td>[[69542, 22], [2142, 4294]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971711</td>\n",
              "      <td>0.973789</td>\n",
              "      <td>0.835015</td>\n",
              "      <td>0.850374</td>\n",
              "      <td>0.993324</td>\n",
              "      <td>0.994828</td>\n",
              "      <td>0.670447</td>\n",
              "      <td>0.701094</td>\n",
              "      <td>0.800557</td>\n",
              "      <td>0.822523</td>\n",
              "      <td>[[69535, 29], [2121, 4315]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, hypertension, heart_disease, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971855</td>\n",
              "      <td>0.973789</td>\n",
              "      <td>0.836927</td>\n",
              "      <td>0.851474</td>\n",
              "      <td>0.989966</td>\n",
              "      <td>0.991438</td>\n",
              "      <td>0.674487</td>\n",
              "      <td>0.703524</td>\n",
              "      <td>0.802329</td>\n",
              "      <td>0.823028</td>\n",
              "      <td>[[69520, 44], [2095, 4341]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, hypertension, heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971921</td>\n",
              "      <td>0.973789</td>\n",
              "      <td>0.838021</td>\n",
              "      <td>0.851749</td>\n",
              "      <td>0.987755</td>\n",
              "      <td>0.990598</td>\n",
              "      <td>0.676818</td>\n",
              "      <td>0.704131</td>\n",
              "      <td>0.803245</td>\n",
              "      <td>0.823153</td>\n",
              "      <td>[[69510, 54], [2080, 4356]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, hypertension, heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971842</td>\n",
              "      <td>0.973737</td>\n",
              "      <td>0.840304</td>\n",
              "      <td>0.854194</td>\n",
              "      <td>0.979250</td>\n",
              "      <td>0.982338</td>\n",
              "      <td>0.681945</td>\n",
              "      <td>0.709599</td>\n",
              "      <td>0.803993</td>\n",
              "      <td>0.823986</td>\n",
              "      <td>[[69471, 93], [2047, 4389]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971658</td>\n",
              "      <td>0.973737</td>\n",
              "      <td>0.835480</td>\n",
              "      <td>0.850895</td>\n",
              "      <td>0.990830</td>\n",
              "      <td>0.992275</td>\n",
              "      <td>0.671535</td>\n",
              "      <td>0.702309</td>\n",
              "      <td>0.800519</td>\n",
              "      <td>0.822483</td>\n",
              "      <td>[[69524, 40], [2114, 4322]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, heart_disease, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971579</td>\n",
              "      <td>0.973737</td>\n",
              "      <td>0.833815</td>\n",
              "      <td>0.849245</td>\n",
              "      <td>0.994678</td>\n",
              "      <td>0.997398</td>\n",
              "      <td>0.667961</td>\n",
              "      <td>0.698663</td>\n",
              "      <td>0.799219</td>\n",
              "      <td>0.821722</td>\n",
              "      <td>[[69541, 23], [2137, 4299]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971526</td>\n",
              "      <td>0.973684</td>\n",
              "      <td>0.832306</td>\n",
              "      <td>0.848667</td>\n",
              "      <td>0.998599</td>\n",
              "      <td>0.998261</td>\n",
              "      <td>0.664699</td>\n",
              "      <td>0.697448</td>\n",
              "      <td>0.798134</td>\n",
              "      <td>0.821173</td>\n",
              "      <td>[[69558, 6], [2158, 4278]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, hypertension, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971566</td>\n",
              "      <td>0.973684</td>\n",
              "      <td>0.834936</td>\n",
              "      <td>0.850316</td>\n",
              "      <td>0.990815</td>\n",
              "      <td>0.993115</td>\n",
              "      <td>0.670447</td>\n",
              "      <td>0.701094</td>\n",
              "      <td>0.799741</td>\n",
              "      <td>0.821937</td>\n",
              "      <td>[[69524, 40], [2121, 4315]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, heart_disease, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971539</td>\n",
              "      <td>0.973684</td>\n",
              "      <td>0.835204</td>\n",
              "      <td>0.849766</td>\n",
              "      <td>0.989462</td>\n",
              "      <td>0.994819</td>\n",
              "      <td>0.671069</td>\n",
              "      <td>0.699878</td>\n",
              "      <td>0.799741</td>\n",
              "      <td>0.821683</td>\n",
              "      <td>[[69518, 46], [2117, 4319]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971618</td>\n",
              "      <td>0.973684</td>\n",
              "      <td>0.833202</td>\n",
              "      <td>0.848942</td>\n",
              "      <td>0.997442</td>\n",
              "      <td>0.997396</td>\n",
              "      <td>0.666563</td>\n",
              "      <td>0.698056</td>\n",
              "      <td>0.799106</td>\n",
              "      <td>0.821301</td>\n",
              "      <td>[[69553, 11], [2146, 4290]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, heart_disease, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971566</td>\n",
              "      <td>0.973684</td>\n",
              "      <td>0.834725</td>\n",
              "      <td>0.849766</td>\n",
              "      <td>0.991492</td>\n",
              "      <td>0.994819</td>\n",
              "      <td>0.669981</td>\n",
              "      <td>0.699878</td>\n",
              "      <td>0.799629</td>\n",
              "      <td>0.821683</td>\n",
              "      <td>[[69527, 37], [2124, 4312]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, hypertension, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971539</td>\n",
              "      <td>0.973684</td>\n",
              "      <td>0.834358</td>\n",
              "      <td>0.850316</td>\n",
              "      <td>0.992168</td>\n",
              "      <td>0.993115</td>\n",
              "      <td>0.669204</td>\n",
              "      <td>0.701094</td>\n",
              "      <td>0.799295</td>\n",
              "      <td>0.821937</td>\n",
              "      <td>[[69530, 34], [2129, 4307]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[hypertension, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971421</td>\n",
              "      <td>0.973684</td>\n",
              "      <td>0.831403</td>\n",
              "      <td>0.848392</td>\n",
              "      <td>0.999531</td>\n",
              "      <td>0.999129</td>\n",
              "      <td>0.662834</td>\n",
              "      <td>0.696841</td>\n",
              "      <td>0.797085</td>\n",
              "      <td>0.821045</td>\n",
              "      <td>[[69562, 2], [2170, 4266]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, hypertension, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971684</td>\n",
              "      <td>0.973632</td>\n",
              "      <td>0.835001</td>\n",
              "      <td>0.850287</td>\n",
              "      <td>0.992867</td>\n",
              "      <td>0.992261</td>\n",
              "      <td>0.670447</td>\n",
              "      <td>0.701094</td>\n",
              "      <td>0.800408</td>\n",
              "      <td>0.821645</td>\n",
              "      <td>[[69533, 31], [2121, 4315]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971368</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.830951</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.661902</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796559</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2176, 4260]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971408</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831818</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>0.997898</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.663766</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.797238</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69555, 9], [2164, 4272]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, hypertension, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971382</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831522</td>\n",
              "      <td>0.848059</td>\n",
              "      <td>0.998363</td>\n",
              "      <td>0.998258</td>\n",
              "      <td>0.663145</td>\n",
              "      <td>0.696233</td>\n",
              "      <td>0.796938</td>\n",
              "      <td>0.820329</td>\n",
              "      <td>[[69557, 7], [2168, 4268]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, hypertension, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971382</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831099</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>0.999765</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796710</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69563, 1], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, heart_disease, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971382</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831240</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>0.999297</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662523</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796786</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69561, 3], [2172, 4264]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971355</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831860</td>\n",
              "      <td>0.848059</td>\n",
              "      <td>0.996734</td>\n",
              "      <td>0.998258</td>\n",
              "      <td>0.663922</td>\n",
              "      <td>0.696233</td>\n",
              "      <td>0.796978</td>\n",
              "      <td>0.820329</td>\n",
              "      <td>[[69550, 14], [2163, 4273]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831247</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>0.999531</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662523</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796860</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69562, 2], [2172, 4264]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[hypertension, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, hypertension, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971421</td>\n",
              "      <td>0.973526</td>\n",
              "      <td>0.831332</td>\n",
              "      <td>0.847480</td>\n",
              "      <td>0.999766</td>\n",
              "      <td>0.999127</td>\n",
              "      <td>0.662679</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.797047</td>\n",
              "      <td>0.819778</td>\n",
              "      <td>[[69563, 1], [2171, 4265]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971513</td>\n",
              "      <td>0.973526</td>\n",
              "      <td>0.832933</td>\n",
              "      <td>0.848580</td>\n",
              "      <td>0.996282</td>\n",
              "      <td>0.995663</td>\n",
              "      <td>0.666097</td>\n",
              "      <td>0.697448</td>\n",
              "      <td>0.798398</td>\n",
              "      <td>0.820293</td>\n",
              "      <td>[[69548, 16], [2149, 4287]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, hypertension, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971737</td>\n",
              "      <td>0.973526</td>\n",
              "      <td>0.836017</td>\n",
              "      <td>0.849955</td>\n",
              "      <td>0.990618</td>\n",
              "      <td>0.991402</td>\n",
              "      <td>0.672623</td>\n",
              "      <td>0.700486</td>\n",
              "      <td>0.801222</td>\n",
              "      <td>0.820933</td>\n",
              "      <td>[[69523, 41], [2107, 4329]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, hypertension, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973526</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847480</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.999127</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.819778</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, hypertension, heart_disease, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971276</td>\n",
              "      <td>0.973526</td>\n",
              "      <td>0.832099</td>\n",
              "      <td>0.848580</td>\n",
              "      <td>0.994420</td>\n",
              "      <td>0.995663</td>\n",
              "      <td>0.664543</td>\n",
              "      <td>0.697448</td>\n",
              "      <td>0.796684</td>\n",
              "      <td>0.820293</td>\n",
              "      <td>[[69540, 24], [2159, 4277]]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d94c891-7fbd-4708-8273-6708589eb02b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3d94c891-7fbd-4708-8273-6708589eb02b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3d94c891-7fbd-4708-8273-6708589eb02b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-be67bcee-ec73-4cac-9395-7eb2e3e12e93\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-be67bcee-ec73-4cac-9395-7eb2e3e12e93')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-be67bcee-ec73-4cac-9395-7eb2e3e12e93 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_97e4edc6-9680-4e67-a58b-9cbf2613ab9d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mlp_results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_97e4edc6-9680-4e67-a58b-9cbf2613ab9d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('mlp_results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "mlp_results_df",
              "summary": "{\n  \"name\": \"mlp_results_df\",\n  \"rows\": 38,\n  \"fields\": [\n    {\n      \"column\": \"columns_used\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0001586261167337063,\n        \"min\": 0.9712763157894737,\n        \"max\": 0.9719210526315789,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.9717105263157895,\n          0.9716842105263158,\n          0.9715789473684211\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"val_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00014107040860399062,\n        \"min\": 0.9735263157894737,\n        \"max\": 0.9741578947368421,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.9735789473684211,\n          0.9740526315789474,\n          0.9736842105263158\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_balanced_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.002320691971676287,\n        \"min\": 0.8309509011808577,\n        \"max\": 0.8403042046243889,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          0.8313321535799344,\n          0.8347247352854157,\n          0.8310990895650183\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_balanced_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0016932126365713088,\n        \"min\": 0.8474803011999013,\n        \"max\": 0.8541944661456784,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.8522253213093482,\n          0.8497663758506833,\n          0.8541944661456784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004838951461214351,\n        \"min\": 0.9792503346720214,\n        \"max\": 1.0,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          0.99628166395538,\n          0.9914922970797885,\n          0.9992969299273494\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003812928485804911,\n        \"min\": 0.9823380992430614,\n        \"max\": 1.0,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.9957081545064378,\n          0.9948186528497409,\n          0.9823380992430614\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004939757284869231,\n        \"min\": 0.6619018023617154,\n        \"max\": 0.6819453076444997,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          0.6819453076444997,\n          0.6665630826600373,\n          0.6715351149782474\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0036188914421485226,\n        \"min\": 0.6950182260024301,\n        \"max\": 0.7095990279465371,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.6974483596597812,\n          0.6980558930741191,\n          0.7047387606318347\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_f1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.002033183240779155,\n        \"min\": 0.7965594614809275,\n        \"max\": 0.8039934053856018,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          0.7970472808820781,\n          0.7996291145108948,\n          0.7967099728946632\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_f1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.001425504901355488,\n        \"min\": 0.8197778573987817,\n        \"max\": 0.8253290643898967,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.8253290643898967,\n          0.8216833095577746,\n          0.8239858906525572\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"confusion_matrix\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf = MLPClassifier(**grid_nn.best_params_)\n",
        "clf.fit(x_train, y_train)\n",
        "train_predictions = clf.predict(x_train)\n",
        "accuracy = accuracy_score(y_train, train_predictions)\n",
        "print(\"Accuracy train MLP: %.2f%%\" % (accuracy * 100.0))\n",
        "\n",
        "test_predictions = clf.predict(x_test)\n",
        "accuracy = accuracy_score(y_test, test_predictions)\n",
        "print(\"Accuracy test MLP: %.2f%%\" % (accuracy * 100.0))\n",
        "ConfusionMatrixDisplay.from_predictions(y_test, test_predictions)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "SEWFGyVa0Sdm",
        "outputId": "1e2ee420-ad68-47b2-be11-860844f231dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy train MLP: 97.19%\n",
            "Accuracy test MLP: 97.36%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Grid Search para Decision Tree\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "pS2saJqNfKJf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "parameters = {'criterion': ['gini', 'entropy','log_loss'],\n",
        "              'min_samples_split' : [2,3,5, 10],\n",
        "    'max_features': ['sqrt', 'log2'],\n",
        "    'min_samples_leaf': [1,2,3,5, 10],}\n",
        "grid_dt= GridSearchCV(DecisionTreeClassifier(max_depth=5,random_state = 42), parameters, scoring = 'balanced_accuracy')\n",
        "grid_dt.fit(x_train,y_train)\n",
        "grid_dt.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3s2pYuoGfR1x",
        "outputId": "bb837cf9-3b25-4254-d453-542409da210a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'criterion': 'gini',\n",
              " 'max_features': 'log2',\n",
              " 'min_samples_leaf': 1,\n",
              " 'min_samples_split': 2}"
            ]
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf = DecisionTreeClassifier(criterion = 'entropy', max_depth=5, random_state = 42)\n",
        "decision_tree_results = []\n",
        "columns_sets = powerset(x_test.columns)\n",
        "for columns in columns_sets:\n",
        "  if len(columns) > 2: ##Evaluamos sobre todas las configuraciones de más de 3 features\n",
        "    clf.fit(x_train[columns], y_train)\n",
        "    y_train_pred = clf.predict(x_train[columns])\n",
        "    y_val_pred = clf.predict(x_test[columns])\n",
        "    train_accuracy = accuracy_score(y_train, y_train_pred)\n",
        "    val_accuracy  = accuracy_score(y_test, y_val_pred)\n",
        "    if train_accuracy >= 0.97 and val_accuracy >= 0.9735:\n",
        "      train_precision = precision_score(y_train, y_train_pred)\n",
        "      test_precision = precision_score(y_test, y_val_pred)\n",
        "      train_recall = recall_score(y_train, y_train_pred)\n",
        "      test_recall = recall_score(y_test, y_val_pred)\n",
        "      train_f1 = f1_score(y_train, y_train_pred)\n",
        "      test_f1 = f1_score(y_test, y_val_pred)\n",
        "      train_bal_accuracy = balanced_accuracy_score(y_train,y_train_pred)\n",
        "      test_bal_accuracy = balanced_accuracy_score(y_test,y_val_pred)\n",
        "      decision_tree_results.append([columns, train_accuracy, val_accuracy, train_bal_accuracy, test_bal_accuracy, train_precision, test_precision, train_recall, test_recall, train_f1, test_f1, confusion_matrix(y_train, y_train_pred)])\n",
        "decision_tree_results_df = pd.DataFrame(decision_tree_results, columns = ['columns_used', 'train_accuracy', 'val_accuracy', 'train_balanced_accuracy', 'test_balanced_accuracy', 'train_precision', 'test_precision', 'train_recall', 'test_recall', 'train_f1', 'test_f1', 'confusion_matrix'])\n",
        "decision_tree_results_df = decision_tree_results_df.set_index('columns_used')\n",
        "decision_tree_results_df = decision_tree_results_df.sort_values(by='val_accuracy', ascending=False)\n",
        "decision_tree_results_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 924
        },
        "id": "BPkK2qnAgBYZ",
        "outputId": "703e0066-07fd-47e9-8bca-fda6db521914"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                    train_accuracy  \\\n",
              "columns_used                                                         \n",
              "[gender, HbA1c_level, blood_glucose_level]                0.971395   \n",
              "[smoking_history, bmi, HbA1c_level, blood_gluco...        0.971395   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...        0.971395   \n",
              "[hypertension, bmi, HbA1c_level, blood_glucose_...        0.971395   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...        0.971395   \n",
              "...                                                            ...   \n",
              "[gender, age, heart_disease, smoking_history, H...        0.971395   \n",
              "[hypertension, heart_disease, smoking_history, ...        0.971395   \n",
              "[gender, hypertension, heart_disease, smoking_h...        0.971395   \n",
              "[age, hypertension, heart_disease, smoking_hist...        0.971395   \n",
              "[gender, age, hypertension, heart_disease, smok...        0.971395   \n",
              "\n",
              "                                                    val_accuracy  \\\n",
              "columns_used                                                       \n",
              "[gender, HbA1c_level, blood_glucose_level]              0.973579   \n",
              "[smoking_history, bmi, HbA1c_level, blood_gluco...      0.973579   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...      0.973579   \n",
              "[hypertension, bmi, HbA1c_level, blood_glucose_...      0.973579   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...      0.973579   \n",
              "...                                                          ...   \n",
              "[gender, age, heart_disease, smoking_history, H...      0.973579   \n",
              "[hypertension, heart_disease, smoking_history, ...      0.973579   \n",
              "[gender, hypertension, heart_disease, smoking_h...      0.973579   \n",
              "[age, hypertension, heart_disease, smoking_hist...      0.973579   \n",
              "[gender, age, hypertension, heart_disease, smok...      0.973579   \n",
              "\n",
              "                                                    train_balanced_accuracy  \\\n",
              "columns_used                                                                  \n",
              "[gender, HbA1c_level, blood_glucose_level]                         0.831106   \n",
              "[smoking_history, bmi, HbA1c_level, blood_gluco...                 0.831106   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...                 0.831106   \n",
              "[hypertension, bmi, HbA1c_level, blood_glucose_...                 0.831106   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...                 0.831106   \n",
              "...                                                                     ...   \n",
              "[gender, age, heart_disease, smoking_history, H...                 0.831106   \n",
              "[hypertension, heart_disease, smoking_history, ...                 0.831106   \n",
              "[gender, hypertension, heart_disease, smoking_h...                 0.831106   \n",
              "[age, hypertension, heart_disease, smoking_hist...                 0.831106   \n",
              "[gender, age, hypertension, heart_disease, smok...                 0.831106   \n",
              "\n",
              "                                                    test_balanced_accuracy  \\\n",
              "columns_used                                                                 \n",
              "[gender, HbA1c_level, blood_glucose_level]                        0.847509   \n",
              "[smoking_history, bmi, HbA1c_level, blood_gluco...                0.847509   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...                0.847509   \n",
              "[hypertension, bmi, HbA1c_level, blood_glucose_...                0.847509   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...                0.847509   \n",
              "...                                                                    ...   \n",
              "[gender, age, heart_disease, smoking_history, H...                0.847509   \n",
              "[hypertension, heart_disease, smoking_history, ...                0.847509   \n",
              "[gender, hypertension, heart_disease, smoking_h...                0.847509   \n",
              "[age, hypertension, heart_disease, smoking_hist...                0.847509   \n",
              "[gender, age, hypertension, heart_disease, smok...                0.847509   \n",
              "\n",
              "                                                    train_precision  \\\n",
              "columns_used                                                          \n",
              "[gender, HbA1c_level, blood_glucose_level]                      1.0   \n",
              "[smoking_history, bmi, HbA1c_level, blood_gluco...              1.0   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...              1.0   \n",
              "[hypertension, bmi, HbA1c_level, blood_glucose_...              1.0   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...              1.0   \n",
              "...                                                             ...   \n",
              "[gender, age, heart_disease, smoking_history, H...              1.0   \n",
              "[hypertension, heart_disease, smoking_history, ...              1.0   \n",
              "[gender, hypertension, heart_disease, smoking_h...              1.0   \n",
              "[age, hypertension, heart_disease, smoking_hist...              1.0   \n",
              "[gender, age, hypertension, heart_disease, smok...              1.0   \n",
              "\n",
              "                                                    test_precision  \\\n",
              "columns_used                                                         \n",
              "[gender, HbA1c_level, blood_glucose_level]                     1.0   \n",
              "[smoking_history, bmi, HbA1c_level, blood_gluco...             1.0   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...             1.0   \n",
              "[hypertension, bmi, HbA1c_level, blood_glucose_...             1.0   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...             1.0   \n",
              "...                                                            ...   \n",
              "[gender, age, heart_disease, smoking_history, H...             1.0   \n",
              "[hypertension, heart_disease, smoking_history, ...             1.0   \n",
              "[gender, hypertension, heart_disease, smoking_h...             1.0   \n",
              "[age, hypertension, heart_disease, smoking_hist...             1.0   \n",
              "[gender, age, hypertension, heart_disease, smok...             1.0   \n",
              "\n",
              "                                                    train_recall  test_recall  \\\n",
              "columns_used                                                                    \n",
              "[gender, HbA1c_level, blood_glucose_level]              0.662213     0.695018   \n",
              "[smoking_history, bmi, HbA1c_level, blood_gluco...      0.662213     0.695018   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...      0.662213     0.695018   \n",
              "[hypertension, bmi, HbA1c_level, blood_glucose_...      0.662213     0.695018   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...      0.662213     0.695018   \n",
              "...                                                          ...          ...   \n",
              "[gender, age, heart_disease, smoking_history, H...      0.662213     0.695018   \n",
              "[hypertension, heart_disease, smoking_history, ...      0.662213     0.695018   \n",
              "[gender, hypertension, heart_disease, smoking_h...      0.662213     0.695018   \n",
              "[age, hypertension, heart_disease, smoking_hist...      0.662213     0.695018   \n",
              "[gender, age, hypertension, heart_disease, smok...      0.662213     0.695018   \n",
              "\n",
              "                                                    train_f1   test_f1  \\\n",
              "columns_used                                                             \n",
              "[gender, HbA1c_level, blood_glucose_level]          0.796784  0.820072   \n",
              "[smoking_history, bmi, HbA1c_level, blood_gluco...  0.796784  0.820072   \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...  0.796784  0.820072   \n",
              "[hypertension, bmi, HbA1c_level, blood_glucose_...  0.796784  0.820072   \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...  0.796784  0.820072   \n",
              "...                                                      ...       ...   \n",
              "[gender, age, heart_disease, smoking_history, H...  0.796784  0.820072   \n",
              "[hypertension, heart_disease, smoking_history, ...  0.796784  0.820072   \n",
              "[gender, hypertension, heart_disease, smoking_h...  0.796784  0.820072   \n",
              "[age, hypertension, heart_disease, smoking_hist...  0.796784  0.820072   \n",
              "[gender, age, hypertension, heart_disease, smok...  0.796784  0.820072   \n",
              "\n",
              "                                                              confusion_matrix  \n",
              "columns_used                                                                    \n",
              "[gender, HbA1c_level, blood_glucose_level]          [[69564, 0], [2174, 4262]]  \n",
              "[smoking_history, bmi, HbA1c_level, blood_gluco...  [[69564, 0], [2174, 4262]]  \n",
              "[gender, age, bmi, HbA1c_level, blood_glucose_l...  [[69564, 0], [2174, 4262]]  \n",
              "[hypertension, bmi, HbA1c_level, blood_glucose_...  [[69564, 0], [2174, 4262]]  \n",
              "[gender, hypertension, bmi, HbA1c_level, blood_...  [[69564, 0], [2174, 4262]]  \n",
              "...                                                                        ...  \n",
              "[gender, age, heart_disease, smoking_history, H...  [[69564, 0], [2174, 4262]]  \n",
              "[hypertension, heart_disease, smoking_history, ...  [[69564, 0], [2174, 4262]]  \n",
              "[gender, hypertension, heart_disease, smoking_h...  [[69564, 0], [2174, 4262]]  \n",
              "[age, hypertension, heart_disease, smoking_hist...  [[69564, 0], [2174, 4262]]  \n",
              "[gender, age, hypertension, heart_disease, smok...  [[69564, 0], [2174, 4262]]  \n",
              "\n",
              "[63 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6b82d949-bb95-437d-9078-2ef9e49a2a73\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>train_accuracy</th>\n",
              "      <th>val_accuracy</th>\n",
              "      <th>train_balanced_accuracy</th>\n",
              "      <th>test_balanced_accuracy</th>\n",
              "      <th>train_precision</th>\n",
              "      <th>test_precision</th>\n",
              "      <th>train_recall</th>\n",
              "      <th>test_recall</th>\n",
              "      <th>train_f1</th>\n",
              "      <th>test_f1</th>\n",
              "      <th>confusion_matrix</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>columns_used</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>[gender, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[hypertension, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[hypertension, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, hypertension, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, age, hypertension, heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>63 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6b82d949-bb95-437d-9078-2ef9e49a2a73')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6b82d949-bb95-437d-9078-2ef9e49a2a73 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6b82d949-bb95-437d-9078-2ef9e49a2a73');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-75c9647d-54cc-42ba-80e2-61559d14ba6a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-75c9647d-54cc-42ba-80e2-61559d14ba6a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-75c9647d-54cc-42ba-80e2-61559d14ba6a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ae7832d6-ee51-42ed-baf6-871de5b31f8e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('decision_tree_results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ae7832d6-ee51-42ed-baf6-871de5b31f8e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('decision_tree_results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "decision_tree_results_df",
              "summary": "{\n  \"name\": \"decision_tree_results_df\",\n  \"rows\": 63,\n  \"fields\": [\n    {\n      \"column\": \"columns_used\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.35742186568523e-16,\n        \"min\": 0.9713947368421053,\n        \"max\": 0.9713947368421053,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9713947368421053\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"val_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2382812437901537e-16,\n        \"min\": 0.9735789473684211,\n        \"max\": 0.9735789473684211,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9735789473684211\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_balanced_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.35742186568523e-16,\n        \"min\": 0.8311062771908018,\n        \"max\": 0.8311062771908018,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8311062771908018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_balanced_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1191406218950769e-16,\n        \"min\": 0.8475091130012151,\n        \"max\": 0.8475091130012151,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8475091130012151\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.6622125543816035,\n        \"max\": 0.6622125543816035,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6622125543816035\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2382812437901537e-16,\n        \"min\": 0.6950182260024301,\n        \"max\": 0.6950182260024301,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6950182260024301\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_f1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.7967844456907833,\n        \"max\": 0.7967844456907833,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7967844456907833\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_f1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.35742186568523e-16,\n        \"min\": 0.8200716845878135,\n        \"max\": 0.8200716845878135,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8200716845878135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"confusion_matrix\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf = DecisionTreeClassifier(max_depth=5, random_state=42)\n",
        "clf.fit(x_train, y_train)\n",
        "train_predictions = clf.predict(x_train)\n",
        "accuracy = accuracy_score(y_train, train_predictions)\n",
        "print(\"Accuracy train Decision Tree: %.2f%%\" % (accuracy * 100.0))\n",
        "\n",
        "test_predictions = clf.predict(x_test)\n",
        "accuracy = accuracy_score(y_test, test_predictions)\n",
        "print(\"Accuracy test Decision Tree: %.2f%%\" % (accuracy * 100.0))\n",
        "ConfusionMatrixDisplay.from_predictions(y_test, test_predictions)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "18RvNFE6gTvm",
        "outputId": "2c26b9de-4d4a-4f18-de0e-a3ff250da9f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy train Decision Tree: 97.14%\n",
            "Accuracy test Decision Tree: 97.36%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Grid Search para Random Forest"
      ],
      "metadata": {
        "id": "Y5bqM4aid48u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "parameters = {'criterion': ['gini', 'entropy','log_loss'],\n",
        "    'max_depth': [6, 10, 20, 50],\n",
        "    'max_features': ['sqrt', 'log2'],\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'min_samples_leaf': [2,3,5, 10],}\n",
        "grid_rf= GridSearchCV(RandomForestClassifier(random_state = 42), parameters, scoring = 'accuracy')\n",
        "grid_rf.fit(x_train,y_train)\n",
        "grid_rf.best_params_"
      ],
      "metadata": {
        "id": "an_xB4g1gFCq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ec8618e6-3076-4bc5-91d6-3f6b05dd8e8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'criterion': 'entropy',\n",
              " 'max_depth': 20,\n",
              " 'max_features': 'sqrt',\n",
              " 'min_samples_leaf': 5,\n",
              " 'n_estimators': 200}"
            ]
          },
          "metadata": {},
          "execution_count": 243
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf = RandomForestClassifier(**grid_rf.best_params_, random_state = 42)\n",
        "random_forest_results = []\n",
        "columns_sets = powerset(x_test.columns)\n",
        "for columns in columns_sets:\n",
        "  if len(columns) > 2: ##Evaluamos sobre todas las configuraciones de más de 3 features\n",
        "    clf.fit(x_train[columns], y_train)\n",
        "    y_train_pred = clf.predict(x_train[columns])\n",
        "    y_val_pred = clf.predict(x_test[columns])\n",
        "    train_accuracy = accuracy_score(y_train, y_train_pred)\n",
        "    val_accuracy  = accuracy_score(y_test, y_val_pred)\n",
        "    if train_accuracy >= 0.97 and val_accuracy >= 0.9735:\n",
        "      train_precision = precision_score(y_train, y_train_pred)\n",
        "      test_precision = precision_score(y_test, y_val_pred)\n",
        "      train_recall = recall_score(y_train, y_train_pred)\n",
        "      test_recall = recall_score(y_test, y_val_pred)\n",
        "      train_f1 = f1_score(y_train, y_train_pred)\n",
        "      test_f1 = f1_score(y_test, y_val_pred)\n",
        "      train_bal_accuracy = balanced_accuracy_score(y_train,y_train_pred)\n",
        "      test_bal_accuracy = balanced_accuracy_score(y_test,y_val_pred)\n",
        "      random_forest_results.append([columns, train_accuracy, val_accuracy, train_bal_accuracy, test_bal_accuracy, train_precision, test_precision, train_recall, test_recall, train_f1, test_f1, confusion_matrix(y_train, y_train_pred)])\n",
        "random_forest_results_df = pd.DataFrame(random_forest_results, columns = ['columns_used', 'train_accuracy', 'val_accuracy', 'train_balanced_accuracy', 'test_balanced_accuracy', 'train_precision', 'test_precision', 'train_recall', 'test_recall', 'train_f1', 'test_f1', 'confusion_matrix'])\n",
        "random_forest_results_df = random_forest_results_df.set_index('columns_used')\n",
        "random_forest_results_df = random_forest_results_df.sort_values(by='val_accuracy', ascending=False)\n",
        "random_forest_results_df"
      ],
      "metadata": {
        "id": "eWGuzCbrAcsx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf = RandomForestClassifier(**grid_rf.best_params_)\n",
        "clf.fit(x_train, y_train)\n",
        "train_predictions = clf.predict(x_train)\n",
        "accuracy = accuracy_score(y_train, train_predictions)\n",
        "print(\"Accuracy train Random Forest: %.2f%%\" % (accuracy * 100.0))\n",
        "\n",
        "test_predictions = clf.predict(x_test)\n",
        "accuracy = accuracy_score(y_test, test_predictions)\n",
        "print(\"Accuracy test Random Forest: %.2f%%\" % (accuracy * 100.0))\n",
        "ConfusionMatrixDisplay.from_predictions(y_test, test_predictions)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "a9rdismGYoPP",
        "outputId": "c5302348-ce3d-493d-d1af-711469187096"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy train Random Forest: 97.17%\n",
            "Accuracy test Random Forest: 97.37%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Grid Search para gradient booster"
      ],
      "metadata": {
        "id": "I1kBuglL0x7I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "grid_gb = GridSearchCV(GradientBoostingClassifier(**{'loss': 'log_loss',\n",
        " 'max_features': 'log2',\n",
        " 'min_samples_leaf': 2,\n",
        " 'min_samples_split': 5,\n",
        " 'n_estimators': 200}),\n",
        " {\n",
        " 'max_depth':(2,3, 5)}, scoring = 'accuracy')\n",
        "grid_gb.fit(x_train,y_train)\n",
        "grid_gb.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rw1Nq97xJn0U",
        "outputId": "3707a579-24c4-43f5-885d-d51c9e8f867e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'max_depth': 2}"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf = GradientBoostingClassifier(**grid_gb.best_params_)\n",
        "GB_results = []\n",
        "columns_sets = powerset(x_train.columns)\n",
        "for columns in columns_sets:\n",
        "  if len(columns) > 2: ##Evaluamos sobre todas las configuraciones de más de 3 features\n",
        "    clf.fit(x_train[columns], y_train)\n",
        "    y_train_pred = clf.predict(x_train[columns])\n",
        "    y_val_pred = clf.predict(x_test[columns])\n",
        "    train_accuracy = accuracy_score(y_train, y_train_pred)\n",
        "    val_accuracy  = accuracy_score(y_test, y_val_pred)\n",
        "    if train_accuracy >= 0.97 and val_accuracy >= 0.9735:\n",
        "      train_precision = precision_score(y_train, y_train_pred)\n",
        "      test_precision = precision_score(y_test, y_val_pred)\n",
        "      train_recall = recall_score(y_train, y_train_pred)\n",
        "      test_recall = recall_score(y_test, y_val_pred)\n",
        "      train_f1 = f1_score(y_train, y_train_pred)\n",
        "      test_f1 = f1_score(y_test, y_val_pred)\n",
        "      train_bal_accuracy = balanced_accuracy_score(y_train,y_train_pred)\n",
        "      test_bal_accuracy = balanced_accuracy_score(y_test,y_val_pred)\n",
        "      GB_results.append([columns, train_accuracy, val_accuracy, train_bal_accuracy, test_bal_accuracy, train_precision, test_precision, train_recall, test_recall, train_f1, test_f1, confusion_matrix(y_train, y_train_pred)])\n",
        "GB_results_df = pd.DataFrame(GB_results, columns = ['columns_used', 'train_accuracy', 'val_accuracy', 'train_balanced_accuracy', 'test_balanced_accuracy', 'train_precision', 'test_precision', 'train_recall', 'test_recall', 'train_f1', 'test_f1', 'confusion_matrix'])\n",
        "GB_results_df = GB_results_df.set_index('columns_used')\n",
        "GB_results_df = GB_results_df.sort_values(by='val_accuracy', ascending=False)\n",
        "GB_results_df"
      ],
      "metadata": {
        "id": "n85-BZ30bMxM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "outputId": "a32ca94e-dca4-4a6c-ac92-ee470dfa31f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                    train_accuracy  \\\n",
              "columns_used                                                         \n",
              "[gender, age, heart_disease, smoking_history, b...        0.971671   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...        0.971592   \n",
              "[hypertension, heart_disease, smoking_history, ...        0.971487   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...        0.971461   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...        0.971684   \n",
              "...                                                            ...   \n",
              "[hypertension, heart_disease, smoking_history, ...        0.971395   \n",
              "[age, hypertension, heart_disease, smoking_hist...        0.971421   \n",
              "[gender, HbA1c_level, blood_glucose_level]                0.971395   \n",
              "[age, hypertension, heart_disease, HbA1c_level,...        0.971447   \n",
              "[gender, hypertension, heart_disease, smoking_h...        0.971263   \n",
              "\n",
              "                                                    val_accuracy  \\\n",
              "columns_used                                                       \n",
              "[gender, age, heart_disease, smoking_history, b...      0.974158   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...      0.974105   \n",
              "[hypertension, heart_disease, smoking_history, ...      0.974105   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...      0.974053   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...      0.974000   \n",
              "...                                                          ...   \n",
              "[hypertension, heart_disease, smoking_history, ...      0.973579   \n",
              "[age, hypertension, heart_disease, smoking_hist...      0.973579   \n",
              "[gender, HbA1c_level, blood_glucose_level]              0.973579   \n",
              "[age, hypertension, heart_disease, HbA1c_level,...      0.973526   \n",
              "[gender, hypertension, heart_disease, smoking_h...      0.973526   \n",
              "\n",
              "                                                    train_balanced_accuracy  \\\n",
              "columns_used                                                                  \n",
              "[gender, age, heart_disease, smoking_history, b...                 0.837461   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...                 0.836290   \n",
              "[hypertension, heart_disease, smoking_history, ...                 0.835810   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...                 0.834879   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...                 0.835847   \n",
              "...                                                                     ...   \n",
              "[hypertension, heart_disease, smoking_history, ...                 0.831106   \n",
              "[age, hypertension, heart_disease, smoking_hist...                 0.831403   \n",
              "[gender, HbA1c_level, blood_glucose_level]                         0.831106   \n",
              "[age, hypertension, heart_disease, HbA1c_level,...                 0.831417   \n",
              "[gender, hypertension, heart_disease, smoking_h...                 0.832726   \n",
              "\n",
              "                                                    test_balanced_accuracy  \\\n",
              "columns_used                                                                 \n",
              "[gender, age, heart_disease, smoking_history, b...                0.854425   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...                0.851922   \n",
              "[hypertension, heart_disease, smoking_history, ...                0.852197   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...                0.851618   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...                0.852139   \n",
              "...                                                                    ...   \n",
              "[hypertension, heart_disease, smoking_history, ...                0.847509   \n",
              "[age, hypertension, heart_disease, smoking_hist...                0.847509   \n",
              "[gender, HbA1c_level, blood_glucose_level]                        0.847509   \n",
              "[age, hypertension, heart_disease, HbA1c_level,...                0.848030   \n",
              "[gender, hypertension, heart_disease, smoking_h...                0.849130   \n",
              "\n",
              "                                                    train_precision  \\\n",
              "columns_used                                                          \n",
              "[gender, age, heart_disease, smoking_history, b...         0.984831   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...         0.987019   \n",
              "[hypertension, heart_disease, smoking_history, ...         0.986551   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...         0.988998   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...         0.990160   \n",
              "...                                                             ...   \n",
              "[hypertension, heart_disease, smoking_history, ...         1.000000   \n",
              "[age, hypertension, heart_disease, smoking_hist...         0.999531   \n",
              "[gender, HbA1c_level, blood_glucose_level]                 1.000000   \n",
              "[age, hypertension, heart_disease, HbA1c_level,...         1.000000   \n",
              "[gender, hypertension, heart_disease, smoking_h...         0.992130   \n",
              "\n",
              "                                                    test_precision  \\\n",
              "columns_used                                                         \n",
              "[gender, age, heart_disease, smoking_history, b...        0.988992   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...        0.995704   \n",
              "[hypertension, heart_disease, smoking_history, ...        0.994854   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...        0.995701   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...        0.993151   \n",
              "...                                                            ...   \n",
              "[hypertension, heart_disease, smoking_history, ...        1.000000   \n",
              "[age, hypertension, heart_disease, smoking_hist...        1.000000   \n",
              "[gender, HbA1c_level, blood_glucose_level]                1.000000   \n",
              "[age, hypertension, heart_disease, HbA1c_level,...        0.997389   \n",
              "[gender, hypertension, heart_disease, smoking_h...        0.993950   \n",
              "\n",
              "                                                    train_recall  test_recall  \\\n",
              "columns_used                                                                    \n",
              "[gender, age, heart_disease, smoking_history, b...      0.675886     0.709599   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...      0.673400     0.704131   \n",
              "[hypertension, heart_disease, smoking_history, ...      0.672467     0.704739   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...      0.670447     0.703524   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...      0.672312     0.704739   \n",
              "...                                                          ...          ...   \n",
              "[hypertension, heart_disease, smoking_history, ...      0.662213     0.695018   \n",
              "[age, hypertension, heart_disease, smoking_hist...      0.662834     0.695018   \n",
              "[gender, HbA1c_level, blood_glucose_level]              0.662213     0.695018   \n",
              "[age, hypertension, heart_disease, HbA1c_level,...      0.662834     0.696233   \n",
              "[gender, hypertension, heart_disease, smoking_h...      0.665942     0.698663   \n",
              "\n",
              "                                                    train_f1   test_f1  \\\n",
              "columns_used                                                             \n",
              "[gender, age, heart_disease, smoking_history, b...  0.801622  0.826318   \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...  0.800591  0.824911   \n",
              "[hypertension, heart_disease, smoking_history, ...  0.799778  0.825036   \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...  0.799148  0.824493   \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...  0.800851  0.824449   \n",
              "...                                                      ...       ...   \n",
              "[hypertension, heart_disease, smoking_history, ...  0.796784  0.820072   \n",
              "[age, hypertension, heart_disease, smoking_hist...  0.797085  0.820072   \n",
              "[gender, HbA1c_level, blood_glucose_level]          0.796784  0.820072   \n",
              "[age, hypertension, heart_disease, HbA1c_level,...  0.797234  0.820036   \n",
              "[gender, hypertension, heart_disease, smoking_h...  0.796951  0.820549   \n",
              "\n",
              "                                                               confusion_matrix  \n",
              "columns_used                                                                     \n",
              "[gender, age, heart_disease, smoking_history, b...  [[69497, 67], [2086, 4350]]  \n",
              "[hypertension, heart_disease, bmi, HbA1c_level,...  [[69507, 57], [2102, 4334]]  \n",
              "[hypertension, heart_disease, smoking_history, ...  [[69505, 59], [2108, 4328]]  \n",
              "[gender, hypertension, heart_disease, bmi, HbA1...  [[69516, 48], [2121, 4315]]  \n",
              "[age, hypertension, bmi, HbA1c_level, blood_glu...  [[69521, 43], [2109, 4327]]  \n",
              "...                                                                         ...  \n",
              "[hypertension, heart_disease, smoking_history, ...   [[69564, 0], [2174, 4262]]  \n",
              "[age, hypertension, heart_disease, smoking_hist...   [[69562, 2], [2170, 4266]]  \n",
              "[gender, HbA1c_level, blood_glucose_level]           [[69564, 0], [2174, 4262]]  \n",
              "[age, hypertension, heart_disease, HbA1c_level,...   [[69564, 0], [2170, 4266]]  \n",
              "[gender, hypertension, heart_disease, smoking_h...  [[69530, 34], [2150, 4286]]  \n",
              "\n",
              "[63 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e8479551-2e79-473e-9a93-6ce19ee4da0e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>train_accuracy</th>\n",
              "      <th>val_accuracy</th>\n",
              "      <th>train_balanced_accuracy</th>\n",
              "      <th>test_balanced_accuracy</th>\n",
              "      <th>train_precision</th>\n",
              "      <th>test_precision</th>\n",
              "      <th>train_recall</th>\n",
              "      <th>test_recall</th>\n",
              "      <th>train_f1</th>\n",
              "      <th>test_f1</th>\n",
              "      <th>confusion_matrix</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>columns_used</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>[gender, age, heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971671</td>\n",
              "      <td>0.974158</td>\n",
              "      <td>0.837461</td>\n",
              "      <td>0.854425</td>\n",
              "      <td>0.984831</td>\n",
              "      <td>0.988992</td>\n",
              "      <td>0.675886</td>\n",
              "      <td>0.709599</td>\n",
              "      <td>0.801622</td>\n",
              "      <td>0.826318</td>\n",
              "      <td>[[69497, 67], [2086, 4350]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[hypertension, heart_disease, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971592</td>\n",
              "      <td>0.974105</td>\n",
              "      <td>0.836290</td>\n",
              "      <td>0.851922</td>\n",
              "      <td>0.987019</td>\n",
              "      <td>0.995704</td>\n",
              "      <td>0.673400</td>\n",
              "      <td>0.704131</td>\n",
              "      <td>0.800591</td>\n",
              "      <td>0.824911</td>\n",
              "      <td>[[69507, 57], [2102, 4334]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[hypertension, heart_disease, smoking_history, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971487</td>\n",
              "      <td>0.974105</td>\n",
              "      <td>0.835810</td>\n",
              "      <td>0.852197</td>\n",
              "      <td>0.986551</td>\n",
              "      <td>0.994854</td>\n",
              "      <td>0.672467</td>\n",
              "      <td>0.704739</td>\n",
              "      <td>0.799778</td>\n",
              "      <td>0.825036</td>\n",
              "      <td>[[69505, 59], [2108, 4328]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, heart_disease, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971461</td>\n",
              "      <td>0.974053</td>\n",
              "      <td>0.834879</td>\n",
              "      <td>0.851618</td>\n",
              "      <td>0.988998</td>\n",
              "      <td>0.995701</td>\n",
              "      <td>0.670447</td>\n",
              "      <td>0.703524</td>\n",
              "      <td>0.799148</td>\n",
              "      <td>0.824493</td>\n",
              "      <td>[[69516, 48], [2121, 4315]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, hypertension, bmi, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971684</td>\n",
              "      <td>0.974000</td>\n",
              "      <td>0.835847</td>\n",
              "      <td>0.852139</td>\n",
              "      <td>0.990160</td>\n",
              "      <td>0.993151</td>\n",
              "      <td>0.672312</td>\n",
              "      <td>0.704739</td>\n",
              "      <td>0.800851</td>\n",
              "      <td>0.824449</td>\n",
              "      <td>[[69521, 43], [2109, 4327]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[hypertension, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, hypertension, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971421</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831403</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>0.999531</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662834</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.797085</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69562, 2], [2170, 4266]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971395</td>\n",
              "      <td>0.973579</td>\n",
              "      <td>0.831106</td>\n",
              "      <td>0.847509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662213</td>\n",
              "      <td>0.695018</td>\n",
              "      <td>0.796784</td>\n",
              "      <td>0.820072</td>\n",
              "      <td>[[69564, 0], [2174, 4262]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[age, hypertension, heart_disease, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971447</td>\n",
              "      <td>0.973526</td>\n",
              "      <td>0.831417</td>\n",
              "      <td>0.848030</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.997389</td>\n",
              "      <td>0.662834</td>\n",
              "      <td>0.696233</td>\n",
              "      <td>0.797234</td>\n",
              "      <td>0.820036</td>\n",
              "      <td>[[69564, 0], [2170, 4266]]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[gender, hypertension, heart_disease, smoking_history, HbA1c_level, blood_glucose_level]</th>\n",
              "      <td>0.971263</td>\n",
              "      <td>0.973526</td>\n",
              "      <td>0.832726</td>\n",
              "      <td>0.849130</td>\n",
              "      <td>0.992130</td>\n",
              "      <td>0.993950</td>\n",
              "      <td>0.665942</td>\n",
              "      <td>0.698663</td>\n",
              "      <td>0.796951</td>\n",
              "      <td>0.820549</td>\n",
              "      <td>[[69530, 34], [2150, 4286]]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>63 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e8479551-2e79-473e-9a93-6ce19ee4da0e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e8479551-2e79-473e-9a93-6ce19ee4da0e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e8479551-2e79-473e-9a93-6ce19ee4da0e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-97016acf-54cf-4f21-ae4c-0fdd5c96b820\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97016acf-54cf-4f21-ae4c-0fdd5c96b820')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-97016acf-54cf-4f21-ae4c-0fdd5c96b820 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_1f9eae97-017e-44e0-93aa-ce251dad6e5b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('GB_results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1f9eae97-017e-44e0-93aa-ce251dad6e5b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('GB_results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GB_results_df",
              "summary": "{\n  \"name\": \"GB_results_df\",\n  \"rows\": 63,\n  \"fields\": [\n    {\n      \"column\": \"columns_used\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00013908891278985156,\n        \"min\": 0.9712631578947368,\n        \"max\": 0.9719210526315789,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          0.9716447368421053,\n          0.9714736842105263,\n          0.9716710526315789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"val_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00017063103243349458,\n        \"min\": 0.9735263157894737,\n        \"max\": 0.9741578947368421,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.9735789473684211,\n          0.9736842105263158,\n          0.9741578947368421\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_balanced_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.002419497285572021,\n        \"min\": 0.8311062771908018,\n        \"max\": 0.8383791315089468,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          0.8327264100334932,\n          0.8327507246681354,\n          0.8312544655749623\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_balanced_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0021570936989694406,\n        \"min\": 0.8475091130012151,\n        \"max\": 0.8544249605561889,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          0.8475091130012151,\n          0.849520232746142,\n          0.8478128797083839\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0055954665674870134,\n        \"min\": 0.9842022116903634,\n        \"max\": 1.0,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          0.9997655334114889,\n          0.9979035639412998,\n          0.9858834244080146\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004510464999099893,\n        \"min\": 0.9847844463229078,\n        \"max\": 1.0,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          0.9973890339425587,\n          0.9847844463229078,\n          0.9974025974025974\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0051847178949258,\n        \"min\": 0.6622125543816035,\n        \"max\": 0.6777501553760099,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          0.6715351149782474,\n          0.6777501553760099,\n          0.6670292106898695\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004597970292507087,\n        \"min\": 0.6950182260024301,\n        \"max\": 0.7095990279465371,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.7095990279465371,\n          0.704131227217497,\n          0.6992709599027946\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_f1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0019695911385243245,\n        \"min\": 0.7967844456907833,\n        \"max\": 0.8034266764922623,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          0.7969505392339159,\n          0.7985832789635566,\n          0.7969348659003832\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_f1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.001816098762454043,\n        \"min\": 0.820035778175313,\n        \"max\": 0.8263176512203749,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          0.8200716845878135,\n          0.8218493395215994,\n          0.8204944464349696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"confusion_matrix\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf = GradientBoostingClassifier(**grid_gb.best_params_)\n",
        "clf.fit(x_train, y_train)\n",
        "train_predictions = clf.predict(x_train)\n",
        "accuracy = accuracy_score(y_train, train_predictions)\n",
        "print(\"Accuracy train Gradient Boosting: %.2f%%\" % (accuracy * 100.0))\n",
        "\n",
        "test_predictions = clf.predict(x_test)\n",
        "accuracy = accuracy_score(y_test, test_predictions)\n",
        "print(\"Accuracy test Gradient Boosting: %.2f%%\" % (accuracy * 100.0))\n",
        "ConfusionMatrixDisplay.from_predictions(y_test, test_predictions)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "dUwEOzgEgeLA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf = DecisionTreeClassifier(**grid.best_params_, random_state = 0)\n",
        "clf.fit(x_train[['hypertension', 'heart_disease', 'HbA1c_level', 'blood_glucose_level']], y_train)\n",
        "\n",
        "train_predictions = clf.predict(x_train[['hypertension', 'heart_disease', 'HbA1c_level', 'blood_glucose_level']])\n",
        "accuracy = accuracy_score(y_train, train_predictions)\n",
        "bal_accuracy = balanced_accuracy_score(y_train, train_predictions)\n",
        "print(\"Accuracy train Arbol de decisión: %.2f%%\" % (accuracy * 100.0))\n",
        "print(\"Balanced train accuracy: %.2f%%\" % (bal_accuracy * 100.0))\n",
        "test_predictions = clf.predict(x_test[['hypertension', 'heart_disease', 'HbA1c_level', 'blood_glucose_level']])\n",
        "accuracy = accuracy_score(y_test, test_predictions)\n",
        "bal_accuracy = balanced_accuracy_score(y_test, test_predictions)\n",
        "print(\"Accuracy test Arbol de decisión: %.2f%%\" % (accuracy * 100.0))\n",
        "print(\"Balanced test accuracy: %.2f%%\" % (bal_accuracy * 100.0))\n",
        "ConfusionMatrixDisplay.from_predictions(y_test, test_predictions)\n",
        "plt.show()\n",
        "\n",
        "print(classification_report(y_test,clf.predict(x_test[['hypertension', 'heart_disease', 'HbA1c_level', 'blood_glucose_level']])))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "id": "k8x6s6dykNuU",
        "outputId": "af01cab4-8b34-4979-ed8f-b72578062052"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy train Arbol de decisión: 97.16%\n",
            "Balanced train accuracy: 83.36%\n",
            "Accuracy test Arbol de decisión: 97.36%\n",
            "Balanced test accuracy: 84.97%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      1.00      0.99     17354\n",
            "           1       0.99      0.70      0.82      1646\n",
            "\n",
            "    accuracy                           0.97     19000\n",
            "   macro avg       0.98      0.85      0.90     19000\n",
            "weighted avg       0.97      0.97      0.97     19000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Generación del archivo para subir a Kaggle"
      ],
      "metadata": {
        "id": "djQD4kOiK2kV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_df = test_df.drop('diabetes', axis = 1)\n",
        "test_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "PsNkllfbLEaQ",
        "outputId": "4f1230fb-93b9-43ee-95c0-dc77c9e4e3cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      patient  gender   age  hypertension  heart_disease smoking_history  \\\n",
              "0       49267    Male  53.0             0              0           never   \n",
              "1       82280  Female  22.0             0              0           never   \n",
              "2       33216  Female  37.0             0              0           never   \n",
              "3       94551  Female  29.0             0              0     not current   \n",
              "4       43760    Male  30.0             0              0            ever   \n",
              "...       ...     ...   ...           ...            ...             ...   \n",
              "4995    88540  Female  23.0             0              0           never   \n",
              "4996    26701  Female  51.0             0              0         No Info   \n",
              "4997    47271    Male  79.0             0              0         No Info   \n",
              "4998    97941    Male  24.0             0              0           never   \n",
              "4999    47305  Female  31.0             0              0         No Info   \n",
              "\n",
              "        bmi  HbA1c_level  blood_glucose_level  \n",
              "0     31.99          4.5                  126  \n",
              "1     25.96          6.6                  130  \n",
              "2     22.24          6.2                  126  \n",
              "3     31.01          5.0                   80  \n",
              "4     28.66          6.6                  100  \n",
              "...     ...          ...                  ...  \n",
              "4995  22.77          6.6                  200  \n",
              "4996  27.32          4.0                  155  \n",
              "4997  23.80          6.0                  126  \n",
              "4998  22.68          6.1                   85  \n",
              "4999  23.69          5.7                  200  \n",
              "\n",
              "[5000 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ba40ff4b-75b8-46c2-abbe-e2d5949460c8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>patient</th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>HbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>49267</td>\n",
              "      <td>Male</td>\n",
              "      <td>53.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>never</td>\n",
              "      <td>31.99</td>\n",
              "      <td>4.5</td>\n",
              "      <td>126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>82280</td>\n",
              "      <td>Female</td>\n",
              "      <td>22.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>never</td>\n",
              "      <td>25.96</td>\n",
              "      <td>6.6</td>\n",
              "      <td>130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33216</td>\n",
              "      <td>Female</td>\n",
              "      <td>37.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>never</td>\n",
              "      <td>22.24</td>\n",
              "      <td>6.2</td>\n",
              "      <td>126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>94551</td>\n",
              "      <td>Female</td>\n",
              "      <td>29.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>not current</td>\n",
              "      <td>31.01</td>\n",
              "      <td>5.0</td>\n",
              "      <td>80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43760</td>\n",
              "      <td>Male</td>\n",
              "      <td>30.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>ever</td>\n",
              "      <td>28.66</td>\n",
              "      <td>6.6</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4995</th>\n",
              "      <td>88540</td>\n",
              "      <td>Female</td>\n",
              "      <td>23.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>never</td>\n",
              "      <td>22.77</td>\n",
              "      <td>6.6</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4996</th>\n",
              "      <td>26701</td>\n",
              "      <td>Female</td>\n",
              "      <td>51.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No Info</td>\n",
              "      <td>27.32</td>\n",
              "      <td>4.0</td>\n",
              "      <td>155</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4997</th>\n",
              "      <td>47271</td>\n",
              "      <td>Male</td>\n",
              "      <td>79.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No Info</td>\n",
              "      <td>23.80</td>\n",
              "      <td>6.0</td>\n",
              "      <td>126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4998</th>\n",
              "      <td>97941</td>\n",
              "      <td>Male</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>never</td>\n",
              "      <td>22.68</td>\n",
              "      <td>6.1</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4999</th>\n",
              "      <td>47305</td>\n",
              "      <td>Female</td>\n",
              "      <td>31.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No Info</td>\n",
              "      <td>23.69</td>\n",
              "      <td>5.7</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5000 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba40ff4b-75b8-46c2-abbe-e2d5949460c8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ba40ff4b-75b8-46c2-abbe-e2d5949460c8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ba40ff4b-75b8-46c2-abbe-e2d5949460c8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6b945428-3b05-48d4-836e-e24aa22ed3a9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b945428-3b05-48d4-836e-e24aa22ed3a9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6b945428-3b05-48d4-836e-e24aa22ed3a9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_a256382d-dd4c-4fed-90a3-1e3a8500f231\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a256382d-dd4c-4fed-90a3-1e3a8500f231 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('test_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_df",
              "summary": "{\n  \"name\": \"test_df\",\n  \"rows\": 5000,\n  \"fields\": [\n    {\n      \"column\": \"patient\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28855,\n        \"min\": 7,\n        \"max\": 99970,\n        \"num_unique_values\": 5000,\n        \"samples\": [\n          45258,\n          34022,\n          37615\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Male\",\n          \"Female\",\n          \"Other\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.537466271365346,\n        \"min\": 0.16,\n        \"max\": 80.0,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          0.72,\n          33.0,\n          69.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"never\",\n          \"not current\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.832943025032527,\n        \"min\": 10.62,\n        \"max\": 88.76,\n        \"num_unique_values\": 1939,\n        \"samples\": [\n          19.4,\n          28.51\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0785585349449793,\n        \"min\": 3.5,\n        \"max\": 9.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          4.5,\n          6.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40,\n        \"min\": 80,\n        \"max\": 300,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          126,\n          130\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Realizamos el mismo tratamiento que hicimos previamente"
      ],
      "metadata": {
        "id": "26nlAOplgshx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_df.loc[:,'gender'] = test_df.gender.replace({'Female': 0, 'Male': 1, 'Other' : 2})\n",
        "test_df.loc[:,'smoking_history'] = test_df.smoking_history.replace({'No Info': 'NaN', 'never': 1, 'former': 2, 'not current': 2, 'current' : 3, 'ever' : 4}) ##Chequear acá que onda, cuál es la diferencia entre former smoker y not current?\n",
        "test_df['gender'] = pd.to_numeric(test_df['gender'].astype(str), errors='coerce')\n",
        "test_df['smoking_history'] = pd.to_numeric(test_df['smoking_history'].astype(str), errors='coerce')"
      ],
      "metadata": {
        "id": "MqUB0ojPLiHj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2B2RkkGzPBib",
        "outputId": "b8a1b334-f9d0-451b-83f7-e0b2d437d781"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      patient  gender   age  hypertension  heart_disease  smoking_history  \\\n",
              "0       49267       1  53.0             0              0              1.0   \n",
              "1       82280       0  22.0             0              0              1.0   \n",
              "2       33216       0  37.0             0              0              1.0   \n",
              "3       94551       0  29.0             0              0              2.0   \n",
              "4       43760       1  30.0             0              0              4.0   \n",
              "...       ...     ...   ...           ...            ...              ...   \n",
              "4995    88540       0  23.0             0              0              1.0   \n",
              "4996    26701       0  51.0             0              0              NaN   \n",
              "4997    47271       1  79.0             0              0              NaN   \n",
              "4998    97941       1  24.0             0              0              1.0   \n",
              "4999    47305       0  31.0             0              0              NaN   \n",
              "\n",
              "        bmi  HbA1c_level  blood_glucose_level  \n",
              "0     31.99          4.5                  126  \n",
              "1     25.96          6.6                  130  \n",
              "2     22.24          6.2                  126  \n",
              "3     31.01          5.0                   80  \n",
              "4     28.66          6.6                  100  \n",
              "...     ...          ...                  ...  \n",
              "4995  22.77          6.6                  200  \n",
              "4996  27.32          4.0                  155  \n",
              "4997  23.80          6.0                  126  \n",
              "4998  22.68          6.1                   85  \n",
              "4999  23.69          5.7                  200  \n",
              "\n",
              "[5000 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fac858db-705d-46e7-b8d1-f4e0c0d4152f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>patient</th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>HbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>49267</td>\n",
              "      <td>1</td>\n",
              "      <td>53.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>31.99</td>\n",
              "      <td>4.5</td>\n",
              "      <td>126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>82280</td>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>25.96</td>\n",
              "      <td>6.6</td>\n",
              "      <td>130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33216</td>\n",
              "      <td>0</td>\n",
              "      <td>37.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>22.24</td>\n",
              "      <td>6.2</td>\n",
              "      <td>126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>94551</td>\n",
              "      <td>0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>31.01</td>\n",
              "      <td>5.0</td>\n",
              "      <td>80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43760</td>\n",
              "      <td>1</td>\n",
              "      <td>30.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>28.66</td>\n",
              "      <td>6.6</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4995</th>\n",
              "      <td>88540</td>\n",
              "      <td>0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>22.77</td>\n",
              "      <td>6.6</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4996</th>\n",
              "      <td>26701</td>\n",
              "      <td>0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>27.32</td>\n",
              "      <td>4.0</td>\n",
              "      <td>155</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4997</th>\n",
              "      <td>47271</td>\n",
              "      <td>1</td>\n",
              "      <td>79.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>23.80</td>\n",
              "      <td>6.0</td>\n",
              "      <td>126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4998</th>\n",
              "      <td>97941</td>\n",
              "      <td>1</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>22.68</td>\n",
              "      <td>6.1</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4999</th>\n",
              "      <td>47305</td>\n",
              "      <td>0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>23.69</td>\n",
              "      <td>5.7</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5000 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fac858db-705d-46e7-b8d1-f4e0c0d4152f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fac858db-705d-46e7-b8d1-f4e0c0d4152f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fac858db-705d-46e7-b8d1-f4e0c0d4152f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c409a1e8-9cfe-47ff-b5ce-5658680ef56f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c409a1e8-9cfe-47ff-b5ce-5658680ef56f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c409a1e8-9cfe-47ff-b5ce-5658680ef56f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ba228c24-945c-41ee-83bd-944aee331ef1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ba228c24-945c-41ee-83bd-944aee331ef1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('test_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_df",
              "summary": "{\n  \"name\": \"test_df\",\n  \"rows\": 5000,\n  \"fields\": [\n    {\n      \"column\": \"patient\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28855,\n        \"min\": 7,\n        \"max\": 99970,\n        \"num_unique_values\": 5000,\n        \"samples\": [\n          45258,\n          34022,\n          37615\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.537466271365346,\n        \"min\": 0.16,\n        \"max\": 80.0,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          0.72,\n          33.0,\n          69.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9452640371644364,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.832943025032527,\n        \"min\": 10.62,\n        \"max\": 88.76,\n        \"num_unique_values\": 1939,\n        \"samples\": [\n          19.4,\n          28.51\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0785585349449793,\n        \"min\": 3.5,\n        \"max\": 9.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          4.5,\n          6.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40,\n        \"min\": 80,\n        \"max\": 300,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          126,\n          130\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy = test_df.copy(deep = True)"
      ],
      "metadata": {
        "id": "TVwxo5JHL4UX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_scaled = min_max_scaleColumns(df_copy,columns_to_scale)"
      ],
      "metadata": {
        "id": "Z4HvAoqgL_RE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_cat = df_copy[['gender', 'hypertension', 'heart_disease', 'smoking_history']].values\n",
        "X_num = df_scaled[['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']].values\n",
        "X = np.hstack((X_cat,X_num))"
      ],
      "metadata": {
        "id": "uo4nu9yJMDCQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded = pd.DataFrame(X, columns = ['gender', 'hypertension', 'heart_disease', 'smoking_history', 'age', 'bmi', 'HbA1c_level', 'blood_glucose_level'])\n",
        "mice_imputer = IterativeImputer(random_state=0, estimator=KNeighborsRegressor())\n",
        "df_encoded = mice_imputer.fit_transform(df_encoded)\n",
        "df_copy['gender'] = df_encoded[:,0]\n",
        "df_copy['hypertension'] = df_encoded[:,1]\n",
        "df_copy['heart_disease'] = df_encoded[:,2]\n",
        "df_copy['smoking_history'] = df_encoded[:,3]\n",
        "df_copy['age'] = df_encoded[:,4]\n",
        "df_copy['bmi'] = df_encoded[:,5]\n",
        "df_copy['HbA1c_level'] = df_encoded[:,6]\n",
        "df_copy['blood_glucose_level'] = df_encoded[:,7]"
      ],
      "metadata": {
        "id": "QM4c8nZMMFf8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_df['smoking_history'] = df_copy['smoking_history']"
      ],
      "metadata": {
        "id": "l6TxFOzrMJzr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_copy\n",
        "patientId = X.patient\n",
        "X.drop('patient',axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "7-aTSeMHMSfd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iuYAtg4pOpWT",
        "outputId": "4c8e7ec5-1155-4257-d8ea-4787429cde02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      gender       age  hypertension  heart_disease  smoking_history  \\\n",
              "0        1.0  0.661824           0.0            0.0              1.0   \n",
              "1        0.0  0.273547           0.0            0.0              1.0   \n",
              "2        0.0  0.461423           0.0            0.0              1.0   \n",
              "3        0.0  0.361222           0.0            0.0              2.0   \n",
              "4        1.0  0.373747           0.0            0.0              4.0   \n",
              "...      ...       ...           ...            ...              ...   \n",
              "4995     0.0  0.286072           0.0            0.0              1.0   \n",
              "4996     0.0  0.636774           0.0            0.0              2.6   \n",
              "4997     1.0  0.987475           0.0            0.0              1.6   \n",
              "4998     1.0  0.298597           0.0            0.0              1.0   \n",
              "4999     0.0  0.386273           0.0            0.0              2.4   \n",
              "\n",
              "           bmi  HbA1c_level  blood_glucose_level  \n",
              "0     0.273483     0.181818             0.209091  \n",
              "1     0.196314     0.563636             0.227273  \n",
              "2     0.148707     0.490909             0.209091  \n",
              "3     0.260942     0.272727             0.000000  \n",
              "4     0.230868     0.563636             0.090909  \n",
              "...        ...          ...                  ...  \n",
              "4995  0.155490     0.563636             0.545455  \n",
              "4996  0.213719     0.090909             0.340909  \n",
              "4997  0.168672     0.454545             0.209091  \n",
              "4998  0.154338     0.472727             0.022727  \n",
              "4999  0.167264     0.400000             0.545455  \n",
              "\n",
              "[5000 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eabc63fd-b809-443f-9dce-fdeb81389492\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>HbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.661824</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.273483</td>\n",
              "      <td>0.181818</td>\n",
              "      <td>0.209091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.273547</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.196314</td>\n",
              "      <td>0.563636</td>\n",
              "      <td>0.227273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.461423</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.148707</td>\n",
              "      <td>0.490909</td>\n",
              "      <td>0.209091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.361222</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.260942</td>\n",
              "      <td>0.272727</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.373747</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.230868</td>\n",
              "      <td>0.563636</td>\n",
              "      <td>0.090909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4995</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.286072</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.155490</td>\n",
              "      <td>0.563636</td>\n",
              "      <td>0.545455</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4996</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.636774</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.213719</td>\n",
              "      <td>0.090909</td>\n",
              "      <td>0.340909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4997</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.987475</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.168672</td>\n",
              "      <td>0.454545</td>\n",
              "      <td>0.209091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4998</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.298597</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.154338</td>\n",
              "      <td>0.472727</td>\n",
              "      <td>0.022727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4999</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.386273</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.4</td>\n",
              "      <td>0.167264</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>0.545455</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5000 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eabc63fd-b809-443f-9dce-fdeb81389492')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eabc63fd-b809-443f-9dce-fdeb81389492 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eabc63fd-b809-443f-9dce-fdeb81389492');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-34c9f3a1-f2f9-4d96-8a43-2ca40feb1963\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-34c9f3a1-f2f9-4d96-8a43-2ca40feb1963')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-34c9f3a1-f2f9-4d96-8a43-2ca40feb1963 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_dc3dc02b-933b-48b1-b98f-abc849a4f72f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_copy')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_dc3dc02b-933b-48b1-b98f-abc849a4f72f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_copy');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_copy",
              "summary": "{\n  \"name\": \"df_copy\",\n  \"rows\": 5000,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49128557103019066,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.0,\n          0.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2822828941804277,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          0.007014028056112223,\n          0.4113226452905811,\n          0.8622244488977955\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25618111904110075,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1926589304774075,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8072499960428753,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          2.2,\n          2.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08744488130320614,\n        \"min\": 0.0,\n        \"max\": 1.0000000000000002,\n        \"num_unique_values\": 1939,\n        \"samples\": [\n          0.11236242641412847,\n          0.22894804197594065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1961015518081781,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.18181818181818188,\n          0.5636363636363636\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18228151146359997,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.2090909090909091,\n          0.22727272727272718\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_names = X.columns\n",
        "X = StandardScaler().fit_transform(X)\n",
        "X = pd.DataFrame(X, columns=x_names)\n",
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zs10SZyaOlwF",
        "outputId": "67747184-83a3-44c8-be77-4ccd48995bd9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        gender       age  hypertension  heart_disease  smoking_history  \\\n",
              "0     1.216115  0.534851     -0.275614      -0.200374        -0.835166   \n",
              "1    -0.819565 -0.840774     -0.275614      -0.200374        -0.835166   \n",
              "2    -0.819565 -0.175149     -0.275614      -0.200374        -0.835166   \n",
              "3    -0.819565 -0.530149     -0.275614      -0.200374         0.403732   \n",
              "4     1.216115 -0.485774     -0.275614      -0.200374         2.881527   \n",
              "...        ...       ...           ...            ...              ...   \n",
              "4995 -0.819565 -0.796399     -0.275614      -0.200374        -0.835166   \n",
              "4996 -0.819565  0.446101     -0.275614      -0.200374         1.147070   \n",
              "4997  1.216115  1.688601     -0.275614      -0.200374        -0.091827   \n",
              "4998  1.216115 -0.752024     -0.275614      -0.200374        -0.835166   \n",
              "4999 -0.819565 -0.441399     -0.275614      -0.200374         0.899291   \n",
              "\n",
              "           bmi  HbA1c_level  blood_glucose_level  \n",
              "0     0.683720    -0.950085            -0.294803  \n",
              "1    -0.198857     0.997153            -0.195048  \n",
              "2    -0.743333     0.626250            -0.294803  \n",
              "3     0.540283    -0.486457            -1.441995  \n",
              "4     0.196327     0.997153            -0.943216  \n",
              "...        ...          ...                  ...  \n",
              "4995 -0.665760     0.997153             1.550679  \n",
              "4996  0.000198    -1.413713             0.428426  \n",
              "4997 -0.515004     0.440799            -0.294803  \n",
              "4998 -0.678933     0.533525            -1.317300  \n",
              "4999 -0.531105     0.162622             1.550679  \n",
              "\n",
              "[5000 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-008e5395-7ccc-4408-bae7-0c748c4c81f0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>HbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.216115</td>\n",
              "      <td>0.534851</td>\n",
              "      <td>-0.275614</td>\n",
              "      <td>-0.200374</td>\n",
              "      <td>-0.835166</td>\n",
              "      <td>0.683720</td>\n",
              "      <td>-0.950085</td>\n",
              "      <td>-0.294803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.819565</td>\n",
              "      <td>-0.840774</td>\n",
              "      <td>-0.275614</td>\n",
              "      <td>-0.200374</td>\n",
              "      <td>-0.835166</td>\n",
              "      <td>-0.198857</td>\n",
              "      <td>0.997153</td>\n",
              "      <td>-0.195048</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.819565</td>\n",
              "      <td>-0.175149</td>\n",
              "      <td>-0.275614</td>\n",
              "      <td>-0.200374</td>\n",
              "      <td>-0.835166</td>\n",
              "      <td>-0.743333</td>\n",
              "      <td>0.626250</td>\n",
              "      <td>-0.294803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.819565</td>\n",
              "      <td>-0.530149</td>\n",
              "      <td>-0.275614</td>\n",
              "      <td>-0.200374</td>\n",
              "      <td>0.403732</td>\n",
              "      <td>0.540283</td>\n",
              "      <td>-0.486457</td>\n",
              "      <td>-1.441995</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.216115</td>\n",
              "      <td>-0.485774</td>\n",
              "      <td>-0.275614</td>\n",
              "      <td>-0.200374</td>\n",
              "      <td>2.881527</td>\n",
              "      <td>0.196327</td>\n",
              "      <td>0.997153</td>\n",
              "      <td>-0.943216</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4995</th>\n",
              "      <td>-0.819565</td>\n",
              "      <td>-0.796399</td>\n",
              "      <td>-0.275614</td>\n",
              "      <td>-0.200374</td>\n",
              "      <td>-0.835166</td>\n",
              "      <td>-0.665760</td>\n",
              "      <td>0.997153</td>\n",
              "      <td>1.550679</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4996</th>\n",
              "      <td>-0.819565</td>\n",
              "      <td>0.446101</td>\n",
              "      <td>-0.275614</td>\n",
              "      <td>-0.200374</td>\n",
              "      <td>1.147070</td>\n",
              "      <td>0.000198</td>\n",
              "      <td>-1.413713</td>\n",
              "      <td>0.428426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4997</th>\n",
              "      <td>1.216115</td>\n",
              "      <td>1.688601</td>\n",
              "      <td>-0.275614</td>\n",
              "      <td>-0.200374</td>\n",
              "      <td>-0.091827</td>\n",
              "      <td>-0.515004</td>\n",
              "      <td>0.440799</td>\n",
              "      <td>-0.294803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4998</th>\n",
              "      <td>1.216115</td>\n",
              "      <td>-0.752024</td>\n",
              "      <td>-0.275614</td>\n",
              "      <td>-0.200374</td>\n",
              "      <td>-0.835166</td>\n",
              "      <td>-0.678933</td>\n",
              "      <td>0.533525</td>\n",
              "      <td>-1.317300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4999</th>\n",
              "      <td>-0.819565</td>\n",
              "      <td>-0.441399</td>\n",
              "      <td>-0.275614</td>\n",
              "      <td>-0.200374</td>\n",
              "      <td>0.899291</td>\n",
              "      <td>-0.531105</td>\n",
              "      <td>0.162622</td>\n",
              "      <td>1.550679</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5000 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-008e5395-7ccc-4408-bae7-0c748c4c81f0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-008e5395-7ccc-4408-bae7-0c748c4c81f0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-008e5395-7ccc-4408-bae7-0c748c4c81f0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b530c523-2c21-4ce9-94f2-bd0eb821d043\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b530c523-2c21-4ce9-94f2-bd0eb821d043')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b530c523-2c21-4ce9-94f2-bd0eb821d043 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f8969c89-ab3b-42d4-8be4-5f04f85fcf0d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f8969c89-ab3b-42d4-8be4-5f04f85fcf0d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 5000,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0001000150025003,\n        \"min\": -0.8195646071910863,\n        \"max\": 3.251794593956883,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.2161149933828983,\n          -0.8195646071910863,\n          3.251794593956883\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0001000150025003,\n        \"min\": -1.8099237430843664,\n        \"max\": 1.7329760769920965,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          -1.7850737443463554,\n          -0.3526488170909916,\n          1.244851101781161\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0001000150025003,\n        \"min\": -0.2756138365054475,\n        \"max\": 3.6282648675377187,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3.6282648675377187,\n          -0.2756138365054475\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0001000150025003,\n        \"min\": -0.20037410403678882,\n        \"max\": 4.990664860646859,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4.990664860646859,\n          -0.20037410403678882\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0001000150025003,\n        \"min\": -0.8351655935810969,\n        \"max\": 2.881526954842461,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.6515114257883264,\n          1.3948499354730375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0001000150025003,\n        \"min\": -2.4440880091842874,\n        \"max\": 8.992830883012005,\n        \"num_unique_values\": 1939,\n        \"samples\": [\n          -1.1590080517555261,\n          0.17437217742169736\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0001000150025003,\n        \"min\": -1.8773413095077445,\n        \"max\": 3.222567415236946,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          -0.9500851777359823,\n          0.9971526989847173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0001000150025006,\n        \"min\": -1.4419949197148347,\n        \"max\": 4.044573668467032,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          -0.2948033058222625,\n          -0.1950475133098655\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Generación del archivo submission"
      ],
      "metadata": {
        "id": "_jR9zyzpgxuC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "El mejor modelo que obtuvimos fue MLP con hiperparámetros con defecto. No es de sorprender, ya que este modelo es bueno para problemas de clasificación de clases desbalanceadas."
      ],
      "metadata": {
        "id": "lMynVQKFLhvu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clf = MLPClassifier(**grid_nn.best_params_, random_state=42)\n",
        "clf.fit(x_train[\n",
        "['age', 'hypertension', 'heart_disease', 'bmi', 'HbA1c_level', 'blood_glucose_level']], y_train)\n",
        "y = clf.predict(X[\n",
        "['age', 'hypertension', 'heart_disease', 'bmi', 'HbA1c_level', 'blood_glucose_level']])"
      ],
      "metadata": {
        "id": "uf8s7idWMe7f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "submission = pd.DataFrame(list(zip(patientId, y)), columns=[\"patient\", \"diabetes\"])\n",
        "submission.to_csv(\"sample_submission.csv\", header=True, index=False)"
      ],
      "metadata": {
        "id": "4kAVXYSCM5JA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "submission"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "N8j9S-p-NFi9",
        "outputId": "63d0503e-ae06-48b2-aa1d-f01e15b76a03"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      patient  diabetes\n",
              "0       49267         0\n",
              "1       82280         0\n",
              "2       33216         0\n",
              "3       94551         0\n",
              "4       43760         0\n",
              "...       ...       ...\n",
              "4995    88540         0\n",
              "4996    26701         0\n",
              "4997    47271         0\n",
              "4998    97941         0\n",
              "4999    47305         0\n",
              "\n",
              "[5000 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-97d9a205-deae-40c2-b0ca-b08dc5b4f65e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>patient</th>\n",
              "      <th>diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>49267</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>82280</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33216</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>94551</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43760</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4995</th>\n",
              "      <td>88540</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4996</th>\n",
              "      <td>26701</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4997</th>\n",
              "      <td>47271</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4998</th>\n",
              "      <td>97941</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4999</th>\n",
              "      <td>47305</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5000 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97d9a205-deae-40c2-b0ca-b08dc5b4f65e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-97d9a205-deae-40c2-b0ca-b08dc5b4f65e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-97d9a205-deae-40c2-b0ca-b08dc5b4f65e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-137288cd-37c9-49ff-9227-c9f5d15a58d6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-137288cd-37c9-49ff-9227-c9f5d15a58d6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-137288cd-37c9-49ff-9227-c9f5d15a58d6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d7eb4bda-fde5-412e-8dbb-1200225207a0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('submission')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d7eb4bda-fde5-412e-8dbb-1200225207a0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('submission');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "submission",
              "summary": "{\n  \"name\": \"submission\",\n  \"rows\": 5000,\n  \"fields\": [\n    {\n      \"column\": \"patient\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28855,\n        \"min\": 7,\n        \"max\": 99970,\n        \"num_unique_values\": 5000,\n        \"samples\": [\n          45258,\n          34022,\n          37615\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "submission.diabetes.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "JIOWsE9T-bwW",
        "outputId": "17f8b71a-9a47-4637-b733-346fbad396a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "diabetes\n",
              "0    4714\n",
              "1     286\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>diabetes</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>286</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download(\"sample_submission.csv\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "EbPz4rlVRfoo",
        "outputId": "c76a486b-615e-4708-ebdf-e82e564c4e11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_15f337b5-00c3-4727-a09b-2643f86f9349\", \"sample_submission.csv\", 39433)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Conclusiones"
      ],
      "metadata": {
        "id": "qD23PsWLt43x"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Debido a que notamos una diferencia considerable en los resultados obtenidos en las submissions antes y después del cierre de la competencia, decidimos incluir el análisis de cada modelo al final del trabajo, en forma de conclusiones posteriores."
      ],
      "metadata": {
        "id": "nAQQIUYdt7M6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Antes del cierre de la competencia, la submission que mejor desempeño presentó fue una con MLP classifier con hiperparámetros por defecto, utilizando todas las features del Dataset. Finalmente, esta no resultó ser la submission con mejor puntaje."
      ],
      "metadata": {
        "id": "FCYam2OJuGHm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Previo a elegir un modelo, realizamos una búsqueda para intentar determinar que clasificadores son mejores para problemas de clases desbalanceadas. Encontramos que, generalmente, Random Forest y Gradient Booster funcionan bien para este tipo de problemas. Finalmente, los puntajes finales de nuestras submission parecen estar en concordancia con esto. Las tres submissions con mejor desempeño (Accuracy 97,342%) fueron:\n",
        "\n",
        "1. GradientBoostingClassifier con hiperparámetros ``{'loss': 'log_loss',\n",
        " 'max_features': 'log2',\n",
        " 'min_samples_leaf': 2,\n",
        "  'max_depth': 2,\n",
        " 'min_samples_split': 5,\n",
        " 'n_estimators': 200}`` y utilizando las features ``['age','hypertension','heart_disease','bmi','HbA1c_level','blood_glucose_level']``\n",
        "\n",
        "\n",
        "2.   GradientBoosting con los mismos hiperparámetros mencionados en el item previo utilizando todas las features.\n",
        "\n",
        "\n",
        "3. RandomForest con hiperparámetros ``{'criterion': 'gini',\n",
        " 'max_depth': 20,\n",
        " 'max_features': 'sqrt',\n",
        " 'min_samples_leaf': 5,\n",
        " 'n_estimators': 100}`` utilizando todas las features.\n",
        "\n"
      ],
      "metadata": {
        "id": "xDeXUM8ouSGq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Como comentario, es interesante notar que para RandomForest pudimos realizar una búsqueda de hiperparámetros con GridSearch bastante exhaustiva (probando 288 combinaciones de hiperparámetros), lo cual demoró alrededor de dos horas. Esto no fue posible para MLP, ya que probando con solo 12 combinaciones se demoró alrededor de dos horas (obteniendo además, los hiperparámetros por defecto como mejor combinación). GradientBoosting tiene una demora intermedia en este aspecto. Probamos alrededor de 72 combinaciones de hiperparámetros."
      ],
      "metadata": {
        "id": "3pwCvobswZ1G"
      }
    }
  ]
}