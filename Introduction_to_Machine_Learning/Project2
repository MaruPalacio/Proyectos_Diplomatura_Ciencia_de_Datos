{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MaruPalacio/Proyectos_Diplomatura_Ciencia_de_Datos/blob/main/Introduction_to_Machine_Learning/Project2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0DO7HtMzsskQ"
      },
      "source": [
        "# Laboratorio 2: Armado de un esquema de aprendizaje automático\n",
        "\n",
        "En el laboratorio final se espera que puedan poner en práctica los conocimientos adquiridos en el curso, trabajando con un conjunto de datos de clasificación.\n",
        "\n",
        "El objetivo es que se introduzcan en el desarrollo de un esquema para hacer tareas de aprendizaje automático: selección de un modelo, ajuste de hiperparámetros y evaluación.\n",
        "\n",
        "El conjunto de datos a utilizar está en `./data/loan_data.csv`. Si abren el archivo verán que al principio (las líneas que empiezan con `#`) describen el conjunto de datos y sus atributos (incluyendo el atributo de etiqueta o clase).\n",
        "\n",
        "Se espera que hagan uso de las herramientas vistas en el curso. Se espera que hagan uso especialmente de las herramientas brindadas por `scikit-learn`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Irzn2SX0sskW"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import scipy\n",
        "from scipy.stats import pointbiserialr\n",
        "# TODO: Agregar las librerías que hagan falta\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "\n",
        "from sklearn.metrics import (\n",
        "    accuracy_score,\n",
        "    recall_score,\n",
        "    precision_score,\n",
        "    f1_score,\n",
        "    confusion_matrix,\n",
        "    classification_report,\n",
        "    ConfusionMatrixDisplay,\n",
        "    )\n",
        "\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "from sklearn.tree import DecisionTreeClassifier"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oFhCfP5TsskY"
      },
      "source": [
        "## Carga de datos y división en entrenamiento y evaluación\n",
        "\n",
        "La celda siguiente se encarga de la carga de datos (haciendo uso de pandas). Estos serán los que se trabajarán en el resto del laboratorio."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wjVMwNs5sskY"
      },
      "outputs": [],
      "source": [
        "#dataset = pd.read_csv(\"./data/loan_data.csv\", comment=\"#\")\n",
        "dataset = pd.read_csv(\"https://raw.githubusercontent.com/DiploDatos/IntroduccionAprendizajeAutomatico/master/data/loan_data.csv\", comment=\"#\")\n",
        "\n",
        "\n",
        "# División entre instancias y etiquetas\n",
        "X, y = dataset.iloc[:, 1:], dataset.TARGET\n",
        "\n",
        "# división entre entrenamiento y evaluación\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape, X_test.shape, y_train.shape, y_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DGS0Rb0a16dQ",
        "outputId": "386a7dc1-8b1d-46d9-f2f4-5594d34bc52b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((1483, 10), (371, 10), (1483,), (371,))"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "kqxKDRpJ2NP8",
        "outputId": "d06e3457-1a76-4976-f572-d7b371f3419c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       LOAN   MORTDUE     VALUE   YOJ  DEROG  DELINQ       CLAGE  NINQ  CLNO  \\\n",
              "0      4700   88026.0  115506.0   6.0    0.0     0.0  182.248332   0.0  27.0   \n",
              "1     19300   39926.0  101208.0   4.0    0.0     0.0  140.051638   0.0  14.0   \n",
              "2      5700   71556.0   79538.0   2.0    0.0     0.0   92.643085   0.0  15.0   \n",
              "3     13000   44875.0   57713.0   0.0    1.0     0.0  184.990324   1.0  12.0   \n",
              "4     19300   72752.0  106084.0  11.0    0.0     0.0  193.707100   1.0  13.0   \n",
              "...     ...       ...       ...   ...    ...     ...         ...   ...   ...   \n",
              "1849  53400  228236.0  305514.0   6.0    0.0     0.0   11.148069   0.0   2.0   \n",
              "1850  53600  235895.0  299772.0   5.0    0.0     0.0  112.748282   7.0  22.0   \n",
              "1851  53600  208197.0  297280.0   4.0    1.0     1.0  160.485251   2.0  29.0   \n",
              "1852  65500  205156.0  290239.0   2.0    0.0     0.0   98.808206   1.0  21.0   \n",
              "1853  77400   87651.0  224630.0   9.0    0.0     2.0   73.469630   3.0  13.0   \n",
              "\n",
              "         DEBTINC  \n",
              "0      29.209023  \n",
              "1      31.545694  \n",
              "2      41.210012  \n",
              "3      28.602076  \n",
              "4      30.686106  \n",
              "...          ...  \n",
              "1849   34.558417  \n",
              "1850   44.945929  \n",
              "1851   41.646731  \n",
              "1852  144.189001  \n",
              "1853   40.929793  \n",
              "\n",
              "[1854 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2dcd08ae-90d9-4785-bbbd-a69363c96af5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>LOAN</th>\n",
              "      <th>MORTDUE</th>\n",
              "      <th>VALUE</th>\n",
              "      <th>YOJ</th>\n",
              "      <th>DEROG</th>\n",
              "      <th>DELINQ</th>\n",
              "      <th>CLAGE</th>\n",
              "      <th>NINQ</th>\n",
              "      <th>CLNO</th>\n",
              "      <th>DEBTINC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4700</td>\n",
              "      <td>88026.0</td>\n",
              "      <td>115506.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>182.248332</td>\n",
              "      <td>0.0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>29.209023</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19300</td>\n",
              "      <td>39926.0</td>\n",
              "      <td>101208.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>140.051638</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>31.545694</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5700</td>\n",
              "      <td>71556.0</td>\n",
              "      <td>79538.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>92.643085</td>\n",
              "      <td>0.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>41.210012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>13000</td>\n",
              "      <td>44875.0</td>\n",
              "      <td>57713.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>184.990324</td>\n",
              "      <td>1.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>28.602076</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>19300</td>\n",
              "      <td>72752.0</td>\n",
              "      <td>106084.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>193.707100</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>30.686106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1849</th>\n",
              "      <td>53400</td>\n",
              "      <td>228236.0</td>\n",
              "      <td>305514.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.148069</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>34.558417</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1850</th>\n",
              "      <td>53600</td>\n",
              "      <td>235895.0</td>\n",
              "      <td>299772.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>112.748282</td>\n",
              "      <td>7.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>44.945929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1851</th>\n",
              "      <td>53600</td>\n",
              "      <td>208197.0</td>\n",
              "      <td>297280.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>160.485251</td>\n",
              "      <td>2.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>41.646731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1852</th>\n",
              "      <td>65500</td>\n",
              "      <td>205156.0</td>\n",
              "      <td>290239.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>98.808206</td>\n",
              "      <td>1.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>144.189001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1853</th>\n",
              "      <td>77400</td>\n",
              "      <td>87651.0</td>\n",
              "      <td>224630.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>73.469630</td>\n",
              "      <td>3.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>40.929793</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1854 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2dcd08ae-90d9-4785-bbbd-a69363c96af5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2dcd08ae-90d9-4785-bbbd-a69363c96af5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2dcd08ae-90d9-4785-bbbd-a69363c96af5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-32b3bbac-59fa-4b5a-bce0-d79446fd1087\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-32b3bbac-59fa-4b5a-bce0-d79446fd1087')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-32b3bbac-59fa-4b5a-bce0-d79446fd1087 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_30197c5d-f3b8-40ef-9191-f16cf87a37b8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_30197c5d-f3b8-40ef-9191-f16cf87a37b8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 1854,\n  \"fields\": [\n    {\n      \"column\": \"LOAN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11000,\n        \"min\": 1700,\n        \"max\": 89800,\n        \"num_unique_values\": 397,\n        \"samples\": [\n          7000,\n          31800,\n          13800\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MORTDUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46227.02658491425,\n        \"min\": 5627.0,\n        \"max\": 399412.0,\n        \"num_unique_values\": 1843,\n        \"samples\": [\n          25972.0,\n          35448.0,\n          87875.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VALUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56039.68506642442,\n        \"min\": 21144.0,\n        \"max\": 512650.0,\n        \"num_unique_values\": 1846,\n        \"samples\": [\n          35910.0,\n          94849.0,\n          174905.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YOJ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.552676673864392,\n        \"min\": 0.0,\n        \"max\": 41.0,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          41.0,\n          15.0,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEROG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7048822155153706,\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          5.0,\n          0.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DELINQ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9284522101815268,\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5.0,\n          1.0,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CLAGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84.83830777196329,\n        \"min\": 0.4867114508,\n        \"max\": 1168.2335609000002,\n        \"num_unique_values\": 1854,\n        \"samples\": [\n          205.8658949,\n          204.10541489,\n          129.11372481\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NINQ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6645554823023199,\n        \"min\": 0.0,\n        \"max\": 13.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          11.0,\n          7.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CLNO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.510840306977666,\n        \"min\": 0.0,\n        \"max\": 65.0,\n        \"num_unique_values\": 57,\n        \"samples\": [\n          27.0,\n          16.0,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEBTINC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.308794025658523,\n        \"min\": 0.8381175254000001,\n        \"max\": 144.18900129,\n        \"num_unique_values\": 1854,\n        \"samples\": [\n          41.654211317,\n          43.33840720600001,\n          36.349974603\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "S2G1CIuZ2Rna",
        "outputId": "59a714d4-4671-47fb-f98f-3ea99a211a9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       0\n",
              "1       0\n",
              "2       0\n",
              "3       0\n",
              "4       0\n",
              "       ..\n",
              "1849    1\n",
              "1850    1\n",
              "1851    1\n",
              "1852    1\n",
              "1853    1\n",
              "Name: TARGET, Length: 1854, dtype: int64"
            ],
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TARGET</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>81</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>82</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>83</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>84</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>92</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>93</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>101</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>104</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>110</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>111</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>113</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>114</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>117</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>119</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>122</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>123</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>129</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>130</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>131</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>132</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>133</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>135</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>136</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>137</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>138</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>142</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>144</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>150</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>151</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>152</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>154</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>155</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>156</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>157</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>158</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>159</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>160</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>161</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>162</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>163</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>164</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>165</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>166</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>167</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>168</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>169</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>172</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>173</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>174</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>180</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>181</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>182</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>183</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>184</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>185</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>187</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>189</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>190</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>191</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>192</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>193</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>199</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>201</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>202</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>203</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>204</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>205</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>206</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>207</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>208</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>209</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>210</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>211</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>212</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>213</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>214</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>215</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>216</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>217</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>218</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>219</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>221</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>222</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>223</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>224</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>225</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>226</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>227</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>228</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>229</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>230</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>231</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>232</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>233</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>234</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>235</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>236</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>237</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>238</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>239</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>240</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>241</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>242</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>243</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>244</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>245</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>247</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>248</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>249</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>252</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>253</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>254</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>255</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>256</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>257</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>258</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>259</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>261</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>262</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>263</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>264</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>265</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>266</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>267</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>268</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>269</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>271</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>272</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>273</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>274</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>275</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>276</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>277</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>278</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>279</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>280</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>281</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>282</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>283</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>284</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>285</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>286</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>287</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>288</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>289</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>290</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>291</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>292</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>293</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>294</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>295</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>296</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>297</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>298</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>299</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>300</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>301</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>302</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>303</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>304</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>306</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>308</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>309</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>310</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>311</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>312</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>313</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>314</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>315</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>316</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>317</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>318</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>319</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>320</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>321</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>322</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>323</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>324</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>325</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>326</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>327</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>328</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>329</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>331</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>332</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>335</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>337</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>338</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>339</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>340</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>341</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>342</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>344</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>345</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>349</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>350</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>351</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>352</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>353</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>354</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>355</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>356</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>357</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>358</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>359</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>360</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>361</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>364</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>365</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>366</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>367</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>368</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>369</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>371</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>375</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>376</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>377</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>378</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>379</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>380</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>381</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>382</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>383</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>384</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>385</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>386</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>387</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>388</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>389</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>390</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>391</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>392</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>393</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>394</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>399</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>400</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>401</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>402</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>403</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>405</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>406</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>407</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>408</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>409</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>410</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>411</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>412</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>414</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>415</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>416</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>417</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>418</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>419</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>420</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>421</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>422</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>423</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>424</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>425</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>426</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>427</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>428</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>429</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>430</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>431</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>432</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>433</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>434</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>435</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>436</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>437</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>438</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>439</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>440</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>441</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>442</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>443</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>444</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>445</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>446</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>447</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>448</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>449</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>450</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>451</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>452</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>453</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>454</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>455</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>456</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>457</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>458</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>459</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>460</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>461</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>462</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>463</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>464</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>465</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>466</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>467</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>468</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>469</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>470</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>471</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>472</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>473</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>474</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>475</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>476</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>477</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>478</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>479</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>480</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>481</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>482</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>483</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>484</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>485</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>486</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>487</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>488</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>489</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>490</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>491</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>492</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>493</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>494</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>495</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>496</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>497</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>498</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>500</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>501</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>502</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>503</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>505</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>506</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>507</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>508</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>509</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>510</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>511</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>512</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>513</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>514</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>515</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>516</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>517</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>518</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>519</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>520</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>521</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>522</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>523</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>524</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>525</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>526</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>527</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>528</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>529</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>530</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>531</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>532</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>533</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>534</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>535</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>536</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>538</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>539</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>540</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>542</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>543</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>544</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>545</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>546</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>547</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>548</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>549</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>550</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>551</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>552</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>553</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>554</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>555</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>556</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>557</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>558</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>559</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>560</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>561</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>562</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>563</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>564</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>565</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>566</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>567</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>568</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>569</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>570</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>571</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>572</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>573</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>574</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>575</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>576</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>577</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>578</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>579</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>580</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>581</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>582</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>583</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>584</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>585</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>586</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>587</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>588</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>589</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>591</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>592</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>593</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>594</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>595</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>596</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>597</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>600</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>601</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>602</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>603</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>604</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>605</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>606</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>607</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>608</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>609</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>610</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>611</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>612</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>613</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>614</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>615</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>616</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>617</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>618</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>619</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>620</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>621</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>622</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>623</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>624</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>625</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>626</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>627</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>628</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>629</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>630</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>631</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>632</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>633</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>634</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>635</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>636</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>637</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>638</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>639</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>640</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>641</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>642</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>643</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>644</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>645</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>646</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>647</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>648</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>649</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>650</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>651</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>652</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>653</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>654</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>655</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>656</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>657</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>658</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>659</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>660</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>661</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>662</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>663</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>664</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>665</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>666</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>667</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>668</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>669</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>670</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>671</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>672</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>673</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>674</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>675</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>676</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>677</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>679</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>680</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>681</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>682</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>683</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>684</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>685</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>686</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>687</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>688</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>689</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>690</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>691</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>692</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>693</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>694</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>695</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>696</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>697</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>698</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>699</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>700</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>701</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>702</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>703</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>704</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>705</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>706</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>707</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>708</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>709</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>710</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>711</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>712</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>713</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>714</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>715</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>716</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>717</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>718</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>719</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>720</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>721</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>722</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>723</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>724</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>725</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>726</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>727</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>728</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>729</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>730</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>731</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>732</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>733</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>734</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>735</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>736</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>737</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>738</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>739</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>740</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>741</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>742</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>743</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>744</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>745</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>746</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>747</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>748</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>750</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>751</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>752</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>753</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>754</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>755</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>756</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>757</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>758</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>759</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>760</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>761</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>762</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>763</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>764</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>765</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>766</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>767</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>768</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>769</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>770</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>771</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>772</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>773</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>774</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>775</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>776</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>777</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>778</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>779</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>780</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>781</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>782</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>783</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>784</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>785</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>786</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>787</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>788</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>789</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>790</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>791</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>792</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>793</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>794</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>795</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>796</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>797</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>798</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>800</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>801</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>802</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>803</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>804</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>805</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>806</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>807</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>808</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>809</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>810</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>811</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>812</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>813</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>814</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>815</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>816</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>817</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>818</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>819</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>820</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>821</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>822</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>823</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>824</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>825</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>826</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>827</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>828</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>829</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>830</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>831</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>832</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>833</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>834</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>835</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>836</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>837</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>838</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>839</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>840</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>841</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>842</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>843</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>844</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>845</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>846</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>847</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>848</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>849</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>850</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>851</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>852</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>853</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>854</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>855</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>856</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>857</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>858</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>859</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>860</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>861</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>862</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>863</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>864</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>865</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>866</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>867</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>868</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>869</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>870</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>871</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>872</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>873</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>874</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>875</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>876</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>877</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>878</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>879</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>880</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>881</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>882</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>883</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>884</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>885</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>891</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>892</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>893</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>894</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>895</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>896</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>897</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>898</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>899</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>900</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>901</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>902</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>903</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>904</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>905</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>906</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>907</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>908</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>909</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>910</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>911</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>912</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>913</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>914</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>915</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>916</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>917</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>918</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>919</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>920</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>921</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>922</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>923</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>924</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>925</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>926</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>927</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>928</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>929</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>930</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>931</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>932</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>933</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>934</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>935</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>936</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>937</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>938</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>939</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>940</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>941</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>942</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>943</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>944</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>945</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>946</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>947</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>948</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>949</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>950</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>951</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>952</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>953</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>954</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>955</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>956</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>957</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>958</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>960</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>961</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>962</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>963</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>964</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>965</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>966</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>967</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>968</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>969</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>970</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>971</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>972</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>973</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>974</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>975</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>976</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>977</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>978</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>979</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>980</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>981</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>982</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>983</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>984</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>985</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>986</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>987</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>988</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>989</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>990</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>991</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>992</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1000</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1001</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1002</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1003</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1004</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1005</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1006</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1007</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1008</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1009</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1010</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1011</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1012</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1013</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1014</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1015</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1016</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1018</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1019</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1020</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1021</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1022</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1023</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1024</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1025</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1026</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1027</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1028</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1029</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1030</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1031</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1032</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1033</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1034</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1035</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1036</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1037</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1038</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1039</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1040</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1041</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1042</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1043</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1044</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1045</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1046</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1047</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1048</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1049</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1050</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1051</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1052</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1053</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1054</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1055</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1056</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1057</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1058</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1059</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1060</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1061</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1062</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1063</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1064</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1065</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1066</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1067</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1068</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1069</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1070</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1071</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1072</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1073</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1074</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1075</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1076</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1077</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1078</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1079</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1080</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1081</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1082</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1083</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1084</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1085</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1086</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1087</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1088</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1089</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1090</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1091</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1092</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1093</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1094</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1095</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1096</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1097</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1098</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1099</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1100</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1101</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1102</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1103</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1104</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1105</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1106</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1107</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1108</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1109</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1110</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1111</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1112</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1113</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1114</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1115</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1116</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1117</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1118</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1120</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1121</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1122</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1123</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1124</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1125</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1126</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1127</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1128</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1129</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1130</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1131</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1132</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1133</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1134</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1135</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1136</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1137</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1138</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1144</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1145</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1146</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1147</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1148</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1150</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1151</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1152</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1153</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1154</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1155</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1156</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1157</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1158</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1159</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1160</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1161</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1162</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1163</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1164</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1165</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1166</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1167</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1168</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1169</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1170</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1171</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1172</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1173</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1174</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1175</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1176</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1177</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1178</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1179</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1180</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1181</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1182</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1183</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1184</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1190</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1191</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1192</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1193</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1194</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1195</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1196</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1197</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1198</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1199</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1200</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1201</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1202</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1203</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1204</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1205</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1206</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1207</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1208</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1209</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1210</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1211</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1212</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1213</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1214</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1215</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1216</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1217</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1218</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1219</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1221</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1222</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1223</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1224</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1225</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1226</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1227</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1228</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1229</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1230</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1231</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1232</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1233</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1234</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1235</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1236</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1237</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1238</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1239</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1240</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1241</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1242</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1243</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1244</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1245</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1246</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1247</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1248</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1249</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1250</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1251</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1252</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1253</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1254</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1255</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1256</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1257</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1258</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1259</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1260</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1261</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1262</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1263</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1264</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1265</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1266</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1267</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1268</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1269</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1270</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1271</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1272</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1273</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1274</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1275</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1276</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1277</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1278</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1279</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1280</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1281</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1282</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1283</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1284</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1285</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1286</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1287</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1288</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1289</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1290</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1291</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1292</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1293</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1294</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1295</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1296</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1297</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1298</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1299</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1300</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1301</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1302</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1303</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1304</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1305</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1306</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1307</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1308</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1309</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1310</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1311</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1312</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1313</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1314</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1315</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1316</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1317</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1318</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1319</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1320</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1321</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1322</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1323</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1324</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1325</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1326</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1327</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1328</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1329</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1330</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1331</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1332</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1333</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1334</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1335</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1336</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1337</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1338</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1339</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1340</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1341</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1342</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1343</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1344</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1345</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1346</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1347</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1348</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1349</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1350</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1351</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1352</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1353</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1354</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1355</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1356</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1357</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1358</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1359</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1360</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1361</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1362</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1363</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1364</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1365</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1366</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1367</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1368</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1369</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1370</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1371</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1372</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1373</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1374</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1375</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1376</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1377</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1378</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1379</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1380</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1381</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1382</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1383</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1384</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1385</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1386</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1387</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1388</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1389</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1390</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1391</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1392</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1393</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1394</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1395</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1396</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1397</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1398</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1399</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1400</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1401</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1402</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1403</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1404</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1405</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1406</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1407</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1408</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1409</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1410</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1411</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1412</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1413</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1414</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1415</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1416</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1417</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1418</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1419</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1420</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1421</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1422</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1423</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1424</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1425</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1426</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1427</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1428</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1429</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1430</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1431</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1432</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1433</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1434</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1435</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1436</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1437</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1438</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1439</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1440</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1441</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1442</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1443</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1444</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1445</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1446</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1447</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1448</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1449</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1450</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1451</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1452</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1453</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1454</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1455</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1456</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1457</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1458</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1459</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1460</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1461</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1462</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1463</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1464</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1465</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1466</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1467</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1468</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1469</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1470</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1471</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1472</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1473</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1474</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1475</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1476</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1477</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1478</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1479</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1480</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1481</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1482</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1483</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1484</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1485</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1486</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1487</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1488</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1489</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1490</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1491</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1492</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1493</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1494</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1500</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1501</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1502</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1503</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1504</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1505</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1506</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1507</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1508</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1509</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1510</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1511</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1512</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1513</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1514</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1515</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1516</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1517</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1518</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1519</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1520</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1521</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1522</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1523</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1524</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1525</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1526</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1527</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1528</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1529</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1530</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1531</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1532</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1533</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1534</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1535</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1536</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1537</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1538</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1539</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1540</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1541</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1542</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1543</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1544</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1545</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1546</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1547</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1548</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1549</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1550</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1551</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1552</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1553</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1554</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1555</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1556</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1557</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1558</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1559</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1560</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1561</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1562</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1563</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1564</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1565</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1566</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1567</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1568</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1569</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1570</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1571</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1572</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1573</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1574</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1575</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1576</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1577</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1578</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1579</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1580</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1581</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1582</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1583</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1584</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1585</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1586</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1587</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1588</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1589</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1590</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1591</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1592</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1593</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1594</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1595</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1596</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1597</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1598</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1599</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1600</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1601</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1602</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1603</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1604</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1605</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1606</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1607</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1608</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1609</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1610</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1611</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1612</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1613</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1614</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1615</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1616</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1617</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1618</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1619</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1620</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1621</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1622</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1623</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1624</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1625</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1626</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1627</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1628</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1629</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1630</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1631</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1632</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1633</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1634</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1635</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1636</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1637</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1638</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1639</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1640</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1641</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1642</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1643</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1644</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1645</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1646</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1647</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1648</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1649</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1650</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1651</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1652</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1653</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1654</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1655</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1656</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1657</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1658</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1659</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1660</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1661</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1662</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1663</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1664</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1665</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1666</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1667</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1668</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1669</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1670</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1671</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1672</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1673</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1674</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1675</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1676</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1677</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1678</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1679</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1680</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1681</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1682</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1683</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1684</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1685</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1686</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1687</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1688</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1689</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1690</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1691</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1692</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1693</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1694</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1695</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1696</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1697</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1698</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1699</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1700</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1701</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1702</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1703</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1704</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1705</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1706</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1707</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1708</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1709</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1710</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1711</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1712</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1713</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1714</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1715</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1716</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1717</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1718</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1719</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1720</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1721</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1722</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1723</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1724</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1725</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1726</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1727</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1728</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1729</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1730</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1731</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1732</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1733</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1734</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1735</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1736</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1737</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1738</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1739</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1740</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1741</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1742</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1743</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1744</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1745</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1746</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1747</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1748</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1749</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1750</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1751</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1752</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1753</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1754</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1755</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1756</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1757</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1758</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1759</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1760</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1761</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1762</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1763</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1764</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1765</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1766</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1767</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1768</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1769</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1770</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1771</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1772</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1773</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1774</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1775</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1776</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1777</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1778</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1779</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1780</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1781</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1782</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1783</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1784</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1785</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1786</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1787</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1788</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1789</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1790</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1791</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1792</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1793</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1794</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1795</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1796</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1797</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1798</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1799</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1800</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1801</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1802</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1803</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1804</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1805</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1806</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1807</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1808</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1809</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1810</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1811</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1812</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1813</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1814</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1815</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1816</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1817</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1818</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1819</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1820</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1821</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1822</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1823</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1824</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1825</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1826</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1827</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1828</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1829</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1830</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1831</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1832</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1833</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1834</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1835</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1836</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1837</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1838</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1839</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1840</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1841</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1842</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1843</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1844</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1845</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1846</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1847</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1848</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1849</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1850</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1851</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1852</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1853</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Notar que `X` e `y` son pandas dataframe y series respectivamente, por si se necesita trabajar con solo arreglos.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "LcUXW0BI2QFK"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cOwesfcqsskY"
      },
      "source": [
        "\n",
        "Documentación:\n",
        "\n",
        "- https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fhI-cxnisskZ"
      },
      "source": [
        "## Ejercicio 1: Descripción de los Datos y la Tarea\n",
        "\n",
        "Responder las siguientes preguntas:\n",
        "\n",
        "1. ¿De qué se trata el conjunto de datos?\n",
        "2. ¿Cuál es la variable objetivo que hay que predecir? ¿Qué significado tiene?\n",
        "3. ¿Qué información (atributos) hay disponible para hacer la predicción?\n",
        "4. ¿Qué atributos imagina ud. que son los más determinantes para la predicción?\n",
        "\n",
        "**No hace falta escribir código para responder estas preguntas.**"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "hxfsKCZxvn9i"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 1. ¿De qué se trata el conjunto de datos?\n",
        "El conjunto de datos nos muestra informacion crediticia de 5960 préstamos inmobiliarios recientes, con el cual el departamento de crédito del consumidor de un banco quiere automatizar el proceso de toma de decisiones para la aprobación de ciertos créditos inmobiliarios. Para este fin, buscan desarrollar un modelo de clasificacion utilizando la informacion recolectada.\n",
        "\n",
        "Nota: Apesar de ser 5960 prestamos , en el dataset presentamos 1854 registros informativos.\n",
        "\n",
        "#### 2. ¿Cuál es la variable objetivo que hay que predecir? ¿Qué significado tiene?\n",
        "La variable objetivo que hay que predecir es `TARGET`. Esta variable es binaria, donde 0 indica que el prestatario no incumplió con el pago y 1 indica que el prestatario sí incumplió con el pago. El objetivo es, por tanto, predecir si un prestatario incumplirá o no con su pago.\n",
        "\n",
        "#### 3. ¿Qué información (atributos) hay disponible para hacer la predicción?\n",
        "Los atributos disponibles en el conjunto de datos para hacer la predicción son:\n",
        "\n",
        "- `LOAN`: Monto del préstamo solicitado.\n",
        "- `MORTDUE`: Monto de la hipoteca adeudada existente.\n",
        "- `VALUE`: Valor actual de la propiedad.\n",
        "- `YOJ`: Años en el trabajo actual.\n",
        "- `DEROG`: Número de informes derogatorios (comentarios negativos en el historial de crédito).\n",
        "- `DELINQ`: Número de líneas de crédito con pagos atrasados.\n",
        "- `CLAGE`: Edad de la mas longeva línea de crédito(en meses)\n",
        "- `NINQ`: Número de consultas recientes de crédito.\n",
        "- `CLNO`: Número de líneas de crédito.\n",
        "- `DEBTINC`: Relación deuda/ingreso.\n",
        "\n",
        "#### 4. ¿Qué atributos imagina ud. que son los más determinantes para la predicción?\n",
        "Aunque todos los atributos pueden tener algún grado de influencia, algunos de los más determinantes probablemente sean:\n",
        "\n",
        "- `DEBTINC` (Relación deuda/ingreso): Un alto nivel de deuda en comparación con el ingreso puede indicar un mayor riesgo de incumplimiento.\n",
        "- `DEROG` (Número de informes derogatorios): Historial de crédito negativo puede ser un fuerte indicador de riesgo.\n",
        "- `DELINQ` (Número de líneas de crédito con pagos atrasados): Los pagos atrasados en otras líneas de crédito pueden sugerir un mayor riesgo de incumplimiento en el nuevo préstamo.\n",
        "- `MORTDUE` y `VALUE`: La relación entre la hipoteca adeudada y el valor de la propiedad puede influir en la capacidad de pago.\n",
        "- `CLAGE`: La edad de las líneas de crédito puede dar una idea de la experiencia del prestatario con el manejo del crédito.\n",
        "\n",
        "Estos atributos proporcionan una visión integral del perfil financiero y del comportamiento de crédito del prestatario, los cuales son cruciales para predecir el riesgo de incumplimiento."
      ],
      "metadata": {
        "id": "MM-fnE3uvoy_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Analisis Exploratorio del Dataset"
      ],
      "metadata": {
        "id": "k-172Tku1ans"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Realicemos un analisis previo del dataset."
      ],
      "metadata": {
        "id": "c1-my3n53kMF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cols = X.columns\n",
        "print(cols)\n",
        "print(len(cols))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Xe2jP723x6n",
        "outputId": "d4bf2a33-acfc-4145-9ddc-292687abeb6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['LOAN', 'MORTDUE', 'VALUE', 'YOJ', 'DEROG', 'DELINQ', 'CLAGE', 'NINQ',\n",
            "       'CLNO', 'DEBTINC'],\n",
            "      dtype='object')\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fhMdUbcaWqsp",
        "outputId": "1c850268-2571-4bf9-e5fe-1f6f93a457f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1854 entries, 0 to 1853\n",
            "Data columns (total 10 columns):\n",
            " #   Column   Non-Null Count  Dtype  \n",
            "---  ------   --------------  -----  \n",
            " 0   LOAN     1854 non-null   int64  \n",
            " 1   MORTDUE  1854 non-null   float64\n",
            " 2   VALUE    1854 non-null   float64\n",
            " 3   YOJ      1854 non-null   float64\n",
            " 4   DEROG    1854 non-null   float64\n",
            " 5   DELINQ   1854 non-null   float64\n",
            " 6   CLAGE    1854 non-null   float64\n",
            " 7   NINQ     1854 non-null   float64\n",
            " 8   CLNO     1854 non-null   float64\n",
            " 9   DEBTINC  1854 non-null   float64\n",
            "dtypes: float64(9), int64(1)\n",
            "memory usage: 145.0 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 397
        },
        "id": "B92z1VriX6KY",
        "outputId": "b7421b7a-0363-4ffa-d194-c8d75c83aff6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LOAN       0\n",
              "MORTDUE    0\n",
              "VALUE      0\n",
              "YOJ        0\n",
              "DEROG      0\n",
              "DELINQ     0\n",
              "CLAGE      0\n",
              "NINQ       0\n",
              "CLNO       0\n",
              "DEBTINC    0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>LOAN</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MORTDUE</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VALUE</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>YOJ</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEROG</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DELINQ</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CLAGE</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NINQ</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CLNO</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEBTINC</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Parece que el dataset fue recortado, ya que el dataset original presentaba 5960 registros y el que tenemos es de 1854 registros sin valores NaN. Talvez tambien tendra los extremos recortados."
      ],
      "metadata": {
        "id": "Z-9EiIe1Fys2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "CHNXKTpBYhq9",
        "outputId": "b5b088a5-cc6f-4228-91f4-fcac0781d592"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               LOAN        MORTDUE          VALUE          YOJ        DEROG  \\\n",
              "count   1854.000000    1854.000000    1854.000000  1854.000000  1854.000000   \n",
              "mean   19111.758360   76316.051780  107321.088457     8.900216     0.187702   \n",
              "std    11000.345961   46227.026585   56039.685066     7.552677     0.704882   \n",
              "min     1700.000000    5627.000000   21144.000000     0.000000     0.000000   \n",
              "25%    12000.000000   48984.750000   70787.250000     3.000000     0.000000   \n",
              "50%    17000.000000   67201.000000   94198.000000     7.000000     0.000000   \n",
              "75%    23900.000000   93731.500000  122976.250000    13.000000     0.000000   \n",
              "max    89800.000000  399412.000000  512650.000000    41.000000    10.000000   \n",
              "\n",
              "            DELINQ        CLAGE         NINQ         CLNO      DEBTINC  \n",
              "count  1854.000000  1854.000000  1854.000000  1854.000000  1854.000000  \n",
              "mean      0.319849   180.300783     1.128910    21.857066    34.573408  \n",
              "std       0.928452    84.838308     1.664555     9.510840     9.308794  \n",
              "min       0.000000     0.486711     0.000000     0.000000     0.838118  \n",
              "25%       0.000000   116.970718     0.000000    16.000000    29.427210  \n",
              "50%       0.000000   174.967815     1.000000    21.000000    35.363407  \n",
              "75%       0.000000   232.261800     2.000000    27.000000    39.357987  \n",
              "max      10.000000  1168.233561    13.000000    65.000000   144.189001  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bb65c676-4eb5-4c04-82f7-e2c9a5f27b02\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>LOAN</th>\n",
              "      <th>MORTDUE</th>\n",
              "      <th>VALUE</th>\n",
              "      <th>YOJ</th>\n",
              "      <th>DEROG</th>\n",
              "      <th>DELINQ</th>\n",
              "      <th>CLAGE</th>\n",
              "      <th>NINQ</th>\n",
              "      <th>CLNO</th>\n",
              "      <th>DEBTINC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1854.000000</td>\n",
              "      <td>1854.000000</td>\n",
              "      <td>1854.000000</td>\n",
              "      <td>1854.000000</td>\n",
              "      <td>1854.000000</td>\n",
              "      <td>1854.000000</td>\n",
              "      <td>1854.000000</td>\n",
              "      <td>1854.000000</td>\n",
              "      <td>1854.000000</td>\n",
              "      <td>1854.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>19111.758360</td>\n",
              "      <td>76316.051780</td>\n",
              "      <td>107321.088457</td>\n",
              "      <td>8.900216</td>\n",
              "      <td>0.187702</td>\n",
              "      <td>0.319849</td>\n",
              "      <td>180.300783</td>\n",
              "      <td>1.128910</td>\n",
              "      <td>21.857066</td>\n",
              "      <td>34.573408</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>11000.345961</td>\n",
              "      <td>46227.026585</td>\n",
              "      <td>56039.685066</td>\n",
              "      <td>7.552677</td>\n",
              "      <td>0.704882</td>\n",
              "      <td>0.928452</td>\n",
              "      <td>84.838308</td>\n",
              "      <td>1.664555</td>\n",
              "      <td>9.510840</td>\n",
              "      <td>9.308794</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1700.000000</td>\n",
              "      <td>5627.000000</td>\n",
              "      <td>21144.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.486711</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.838118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>12000.000000</td>\n",
              "      <td>48984.750000</td>\n",
              "      <td>70787.250000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>116.970718</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>29.427210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>17000.000000</td>\n",
              "      <td>67201.000000</td>\n",
              "      <td>94198.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>174.967815</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>35.363407</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>23900.000000</td>\n",
              "      <td>93731.500000</td>\n",
              "      <td>122976.250000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>232.261800</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>39.357987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>89800.000000</td>\n",
              "      <td>399412.000000</td>\n",
              "      <td>512650.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1168.233561</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>65.000000</td>\n",
              "      <td>144.189001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb65c676-4eb5-4c04-82f7-e2c9a5f27b02')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bb65c676-4eb5-4c04-82f7-e2c9a5f27b02 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bb65c676-4eb5-4c04-82f7-e2c9a5f27b02');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-32bfca13-517b-4148-a636-83b98424e99c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-32bfca13-517b-4148-a636-83b98424e99c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-32bfca13-517b-4148-a636-83b98424e99c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"LOAN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28467.32184377706,\n        \"min\": 1700.0,\n        \"max\": 89800.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19111.75836030205,\n          17000.0,\n          1854.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MORTDUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128116.45380024379,\n        \"min\": 1854.0,\n        \"max\": 399412.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          76316.05177993528,\n          67201.0,\n          1854.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VALUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 162639.9427351231,\n        \"min\": 1854.0,\n        \"max\": 512650.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          107321.08845738943,\n          94198.0,\n          1854.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YOJ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 651.5472527145978,\n        \"min\": 0.0,\n        \"max\": 1854.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          8.900215749730313,\n          7.0,\n          1854.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEROG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 654.9469431220693,\n        \"min\": 0.0,\n        \"max\": 1854.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.18770226537216828,\n          10.0,\n          0.7048822155153706\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DELINQ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 654.9289013966663,\n        \"min\": 0.0,\n        \"max\": 1854.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.319848975188781,\n          10.0,\n          0.9284522101815268\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CLAGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 667.9989669162704,\n        \"min\": 0.4867114508,\n        \"max\": 1854.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          180.30078270290622,\n          174.96781503,\n          1854.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NINQ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 654.5526961676585,\n        \"min\": 0.0,\n        \"max\": 1854.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1854.0,\n          1.12891046386192,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CLNO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.668944287657,\n        \"min\": 0.0,\n        \"max\": 1854.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          21.857065803667744,\n          21.0,\n          1854.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEBTINC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 642.1862780853536,\n        \"min\": 0.8381175254000001,\n        \"max\": 1854.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          34.57340818545302,\n          35.3634074135,\n          1854.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Para realizar una analisis descriptivo en relacion de la `TARGET`consultemos cada descripcion para cada subconjunto, prestatarios que no incumplieron con el pago (0) y prestatarios que sí incumplieron con el pago (1)"
      ],
      "metadata": {
        "id": "sKitaJjV2P2B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[dataset['TARGET'] == 0].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "JW5wBR6Hq9_2",
        "outputId": "eb986465-a7d8-4239-c963-1717af81549a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       TARGET          LOAN        MORTDUE          VALUE          YOJ  \\\n",
              "count  1545.0   1545.000000    1545.000000    1545.000000  1545.000000   \n",
              "mean      0.0  19319.546926   76798.117799  108209.451133     9.166990   \n",
              "std       0.0  11034.283295   45233.452333   54332.513121     7.706186   \n",
              "min       0.0   2400.000000    5627.000000   26140.000000     0.000000   \n",
              "25%       0.0  12200.000000   49484.000000   72189.000000     3.000000   \n",
              "50%       0.0  17100.000000   68056.000000   95329.000000     7.000000   \n",
              "75%       0.0  24200.000000   94727.000000  123582.000000    14.000000   \n",
              "max       0.0  89800.000000  371003.000000  471827.000000    36.000000   \n",
              "\n",
              "             DEROG       DELINQ        CLAGE        NINQ         CLNO  \\\n",
              "count  1545.000000  1545.000000  1545.000000  1545.00000  1545.000000   \n",
              "mean      0.099029     0.187702   186.318629     1.02589    21.750162   \n",
              "std       0.373896     0.556152    81.899099     1.50710     8.965881   \n",
              "min       0.000000     0.000000     0.486711     0.00000     3.000000   \n",
              "25%       0.000000     0.000000   121.298029     0.00000    16.000000   \n",
              "50%       0.000000     0.000000   182.171372     1.00000    21.000000   \n",
              "75%       0.000000     0.000000   238.702683     2.00000    27.000000   \n",
              "max       3.000000     4.000000   639.058172    11.00000    56.000000   \n",
              "\n",
              "           DEBTINC  \n",
              "count  1545.000000  \n",
              "mean     33.463484  \n",
              "std       6.586076  \n",
              "min       4.029951  \n",
              "25%      29.038236  \n",
              "50%      34.682537  \n",
              "75%      38.729711  \n",
              "max      45.569843  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8f30f63a-edd0-47cb-ab30-9f6489a3a139\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TARGET</th>\n",
              "      <th>LOAN</th>\n",
              "      <th>MORTDUE</th>\n",
              "      <th>VALUE</th>\n",
              "      <th>YOJ</th>\n",
              "      <th>DEROG</th>\n",
              "      <th>DELINQ</th>\n",
              "      <th>CLAGE</th>\n",
              "      <th>NINQ</th>\n",
              "      <th>CLNO</th>\n",
              "      <th>DEBTINC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1545.0</td>\n",
              "      <td>1545.000000</td>\n",
              "      <td>1545.000000</td>\n",
              "      <td>1545.000000</td>\n",
              "      <td>1545.000000</td>\n",
              "      <td>1545.000000</td>\n",
              "      <td>1545.000000</td>\n",
              "      <td>1545.000000</td>\n",
              "      <td>1545.00000</td>\n",
              "      <td>1545.000000</td>\n",
              "      <td>1545.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.0</td>\n",
              "      <td>19319.546926</td>\n",
              "      <td>76798.117799</td>\n",
              "      <td>108209.451133</td>\n",
              "      <td>9.166990</td>\n",
              "      <td>0.099029</td>\n",
              "      <td>0.187702</td>\n",
              "      <td>186.318629</td>\n",
              "      <td>1.02589</td>\n",
              "      <td>21.750162</td>\n",
              "      <td>33.463484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.0</td>\n",
              "      <td>11034.283295</td>\n",
              "      <td>45233.452333</td>\n",
              "      <td>54332.513121</td>\n",
              "      <td>7.706186</td>\n",
              "      <td>0.373896</td>\n",
              "      <td>0.556152</td>\n",
              "      <td>81.899099</td>\n",
              "      <td>1.50710</td>\n",
              "      <td>8.965881</td>\n",
              "      <td>6.586076</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.0</td>\n",
              "      <td>2400.000000</td>\n",
              "      <td>5627.000000</td>\n",
              "      <td>26140.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.486711</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.029951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.0</td>\n",
              "      <td>12200.000000</td>\n",
              "      <td>49484.000000</td>\n",
              "      <td>72189.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>121.298029</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>29.038236</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.0</td>\n",
              "      <td>17100.000000</td>\n",
              "      <td>68056.000000</td>\n",
              "      <td>95329.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>182.171372</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>34.682537</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.0</td>\n",
              "      <td>24200.000000</td>\n",
              "      <td>94727.000000</td>\n",
              "      <td>123582.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>238.702683</td>\n",
              "      <td>2.00000</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>38.729711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.0</td>\n",
              "      <td>89800.000000</td>\n",
              "      <td>371003.000000</td>\n",
              "      <td>471827.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>639.058172</td>\n",
              "      <td>11.00000</td>\n",
              "      <td>56.000000</td>\n",
              "      <td>45.569843</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f30f63a-edd0-47cb-ab30-9f6489a3a139')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8f30f63a-edd0-47cb-ab30-9f6489a3a139 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8f30f63a-edd0-47cb-ab30-9f6489a3a139');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d40486cf-b1d6-4878-ae9f-911d878e5d38\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d40486cf-b1d6-4878-ae9f-911d878e5d38')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d40486cf-b1d6-4878-ae9f-911d878e5d38 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset[dataset['TARGET'] == 0]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"TARGET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 546.239988466608,\n        \"min\": 0.0,\n        \"max\": 1545.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1545.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LOAN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28413.802642599152,\n        \"min\": 1545.0,\n        \"max\": 89800.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19319.546925566345,\n          17100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MORTDUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118455.81374765273,\n        \"min\": 1545.0,\n        \"max\": 371003.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          76798.11779935275,\n          68056.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VALUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 148312.54767737485,\n        \"min\": 1545.0,\n        \"max\": 471827.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          108209.45113268608,\n          95329.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YOJ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 542.469135904975,\n        \"min\": 0.0,\n        \"max\": 1545.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.166990291262136,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEROG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 546.0655506952137,\n        \"min\": 0.0,\n        \"max\": 1545.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.09902912621359224,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DELINQ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 546.0021053013011,\n        \"min\": 0.0,\n        \"max\": 1545.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.18770226537216828,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CLAGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 509.97437479746344,\n        \"min\": 0.4867114508,\n        \"max\": 1545.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          186.31862894283742,\n          182.17137213\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NINQ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 545.4167690869276,\n        \"min\": 0.0,\n        \"max\": 1545.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1545.0,\n          1.0258899676375404\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CLNO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 538.7081017572993,\n        \"min\": 3.0,\n        \"max\": 1545.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          21.750161812297733,\n          21.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEBTINC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 536.7411772444688,\n        \"min\": 4.029951372,\n        \"max\": 1545.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          33.4634839796088,\n          34.68253701\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[dataset['TARGET'] == 1].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "1KSRopPg-tLi",
        "outputId": "5315ad4c-1e31-4dbe-d0b7-ae02ae256351"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       TARGET          LOAN        MORTDUE          VALUE         YOJ  \\\n",
              "count   309.0    309.000000     309.000000     309.000000  309.000000   \n",
              "mean      1.0  18072.815534   73905.721683  102879.275081    7.566343   \n",
              "std       0.0  10786.672821   50915.870641   63807.983127    6.583601   \n",
              "min       1.0   1700.000000    5900.000000   21144.000000    0.000000   \n",
              "25%       1.0  10600.000000   45351.000000   66802.000000    3.000000   \n",
              "50%       1.0  16200.000000   62264.000000   86172.000000    6.000000   \n",
              "75%       1.0  22400.000000   87979.000000  122021.000000   11.000000   \n",
              "max       1.0  77400.000000  399412.000000  512650.000000   41.000000   \n",
              "\n",
              "            DEROG      DELINQ        CLAGE        NINQ        CLNO     DEBTINC  \n",
              "count  309.000000  309.000000   309.000000  309.000000  309.000000  309.000000  \n",
              "mean     0.631068    0.980583   150.211552    1.644013   22.391586   40.123029  \n",
              "std      1.432396    1.763522    92.669791    2.227952   11.869367   16.334177  \n",
              "min      0.000000    0.000000     8.055265    0.000000    0.000000    0.838118  \n",
              "25%      0.000000    0.000000    94.782231    0.000000   14.000000   32.908824  \n",
              "50%      0.000000    0.000000   132.160270    1.000000   21.000000   38.263601  \n",
              "75%      1.000000    1.000000   188.337422    2.000000   28.000000   43.874079  \n",
              "max     10.000000   10.000000  1168.233561   13.000000   65.000000  144.189001  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6ac50547-3700-4fb4-8005-14ae2de0083f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TARGET</th>\n",
              "      <th>LOAN</th>\n",
              "      <th>MORTDUE</th>\n",
              "      <th>VALUE</th>\n",
              "      <th>YOJ</th>\n",
              "      <th>DEROG</th>\n",
              "      <th>DELINQ</th>\n",
              "      <th>CLAGE</th>\n",
              "      <th>NINQ</th>\n",
              "      <th>CLNO</th>\n",
              "      <th>DEBTINC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>309.0</td>\n",
              "      <td>309.000000</td>\n",
              "      <td>309.000000</td>\n",
              "      <td>309.000000</td>\n",
              "      <td>309.000000</td>\n",
              "      <td>309.000000</td>\n",
              "      <td>309.000000</td>\n",
              "      <td>309.000000</td>\n",
              "      <td>309.000000</td>\n",
              "      <td>309.000000</td>\n",
              "      <td>309.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.0</td>\n",
              "      <td>18072.815534</td>\n",
              "      <td>73905.721683</td>\n",
              "      <td>102879.275081</td>\n",
              "      <td>7.566343</td>\n",
              "      <td>0.631068</td>\n",
              "      <td>0.980583</td>\n",
              "      <td>150.211552</td>\n",
              "      <td>1.644013</td>\n",
              "      <td>22.391586</td>\n",
              "      <td>40.123029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.0</td>\n",
              "      <td>10786.672821</td>\n",
              "      <td>50915.870641</td>\n",
              "      <td>63807.983127</td>\n",
              "      <td>6.583601</td>\n",
              "      <td>1.432396</td>\n",
              "      <td>1.763522</td>\n",
              "      <td>92.669791</td>\n",
              "      <td>2.227952</td>\n",
              "      <td>11.869367</td>\n",
              "      <td>16.334177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1700.000000</td>\n",
              "      <td>5900.000000</td>\n",
              "      <td>21144.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8.055265</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.838118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.0</td>\n",
              "      <td>10600.000000</td>\n",
              "      <td>45351.000000</td>\n",
              "      <td>66802.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>94.782231</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>32.908824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.0</td>\n",
              "      <td>16200.000000</td>\n",
              "      <td>62264.000000</td>\n",
              "      <td>86172.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>132.160270</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>38.263601</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.0</td>\n",
              "      <td>22400.000000</td>\n",
              "      <td>87979.000000</td>\n",
              "      <td>122021.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>188.337422</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>43.874079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.0</td>\n",
              "      <td>77400.000000</td>\n",
              "      <td>399412.000000</td>\n",
              "      <td>512650.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1168.233561</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>65.000000</td>\n",
              "      <td>144.189001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ac50547-3700-4fb4-8005-14ae2de0083f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6ac50547-3700-4fb4-8005-14ae2de0083f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6ac50547-3700-4fb4-8005-14ae2de0083f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-58af4002-f372-4fa7-bafa-245c5478eebb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58af4002-f372-4fa7-bafa-245c5478eebb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-58af4002-f372-4fa7-bafa-245c5478eebb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset[dataset['TARGET'] == 1]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"TARGET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.94551390488733,\n        \"min\": 0.0,\n        \"max\": 309.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          309.0,\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LOAN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24534.94257400227,\n        \"min\": 309.0,\n        \"max\": 77400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          18072.81553398058,\n          16200.0,\n          309.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MORTDUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128397.82734557088,\n        \"min\": 309.0,\n        \"max\": 399412.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          73905.7216828479,\n          62264.0,\n          309.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VALUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 162862.9691887952,\n        \"min\": 309.0,\n        \"max\": 512650.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          102879.27508090615,\n          86172.0,\n          309.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YOJ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.22227095841433,\n        \"min\": 0.0,\n        \"max\": 309.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.566343042071197,\n          6.0,\n          309.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEROG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.6401929279382,\n        \"min\": 0.0,\n        \"max\": 309.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          309.0,\n          0.6310679611650486,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DELINQ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.60518396821966,\n        \"min\": 0.0,\n        \"max\": 309.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          309.0,\n          0.9805825242718447,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CLAGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 373.9920638022333,\n        \"min\": 8.055265076900001,\n        \"max\": 1168.2335609000002,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          150.21155150325015,\n          132.16026989,\n          309.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NINQ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.32693265551677,\n        \"min\": 0.0,\n        \"max\": 309.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          309.0,\n          1.6440129449838188,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CLNO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.82329104567084,\n        \"min\": 0.0,\n        \"max\": 309.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          22.3915857605178,\n          21.0,\n          309.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEBTINC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.61562102944819,\n        \"min\": 0.8381175254000001,\n        \"max\": 309.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          40.12302921467411,\n          38.263600731,\n          309.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "fig, axes = plt.subplots(2, 5, figsize=(25, 10))  # Cuadrícula de 2x5 de subplots\n",
        "for feature, ax in zip(X.columns, axes.flat):\n",
        "    sns.scatterplot(data=X, x=feature, y=y, hue=y, palette='viridis', ax=ax, alpha=0.2, edgecolor=\"k\")\n",
        "    ax.set_title(feature)\n",
        "    ax.set_ylabel('Target')\n",
        "plt.subplots_adjust(wspace=0.2, hspace=0.5)       # Ajustar el espacio entre subplots.\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 684
        },
        "id": "es_nmC9k-Eb-",
        "outputId": "fb0296bd-3b34-422a-d423-e49ee32c39f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2500x1000 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes = plt.subplots(2, 5, figsize=(25, 10))\n",
        "for feature, ax in zip(X.columns, axes.flat):\n",
        "    ax.hist(X[feature], bins=30, color='dodgerblue', edgecolor='black')\n",
        "    ax.set_title(feature)\n",
        "plt.subplots_adjust(wspace=0.2, hspace=0.5)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 671
        },
        "id": "DZARq6nZaL3A",
        "outputId": "c7344acb-5d18-48f2-8759-3d0a999d0474"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2500x1000 with 10 Axes>"
            ],
            "image/png": "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sR3z9vZWZWWlrFbrBQkTq9WqiooKeXt7O7QeAIALDRkyRH379tUrr7yihx9+WK+88oqsVqttWvdLfY74sbrf9rrlS36srKyM338A6MQiIyOVk5Mjk8mk8PDwBmMae8YBAHRcDb07aonevXvb3nPddttt6tKli377299q9OjRuuGGGyRJ11xzjbp27WrrRxpSWVmpvLy8C8757LPPLoi95ZZbJEldu5LyhOMxtTtwCW6++Wb5+/srIyPjgq+q6rz88suSfug0JOnAgQP65ptvtHz5cm3ZssVue/HFF1VWVnbRNdDrRqXn5OTozTffdHibAAD27rjjDrm7u+vw4cMNTusu/fc3vu43/8dqamqUkZGhK664QjfddNNF73fvvffq6quv1qJFixy+jMef//xnSbKteyhJERERqq6ubnDd9JMnT6qmpuai6yICABwnPj5en332mY4dO6aMjAz17t1bQ4cOlXTpzxE/VvfbnpeX12D5F198we8/AHRiTT3jlJSU6M0331Tfvn1bnWwBALieht4dXYpHHnlEPXv21KJFi2zHunfvrtGjR+vgwYP65z//2eB5r732miorK239Uffu3TVq1CgdOHBA//rXvxxSN6A5SKQDl8DHx0cPPvig8vLy9Mgjj1xQ/s4772jjxo2KiYnR8OHDJf13OsYFCxbol7/8pd02e/Zs9e7dW5s3b77ofRMSEnTNNddo2bJlbdIuAMB/9ejRQ+vWrdPSpUs1adKkBmNuvPFGRUdHa8OGDdq+ffsF5Y888oi++OILPfTQQ+rWrdtF79e1a1c98MADys3NdegHU3v37tWKFSvUq1cv2+hGSYqNjZUk/e53v7vgnLVr19rFAADaVt3v85IlS5STk2P3e+2I54j6hgwZouDgYP3xj39UZWWlXdm2bdv0r3/9i99/AOjEfvnLX6pfv3568skn9fHHH9uV1dbWau7cufruu+/06KOPOqmGAABHa+zd0aXw9/fXvffeq927dysnJ8d2vG4AyYwZMy6YJev06dN66KGHFBISonvvvdd2fMmSJaqpqVFCQkKDU7w7ekAKIDG1O9Bsf/rTn7Rr164Ljs+bN09/+9vf9NRTTykrK0txcXHq1q2bPvjgA6WnpysyMlKbNm2S9MN0JK+//rpuvfXWRqdJ/MUvfqHVq1ersLCw0TVsu3TpokceeUQzZ850XAMBAI1KTExsMubll1/W2LFjNXnyZE2bNk0jRoxQZWWl3njjDe3fv1933nmnFixY0Kz7zZgxQ0uWLNFTTz3VqmU8du7cqc8//1zV1dUqKCjQ3r17lZmZqYiICL311lt2fdDgwYP1v//7v1q9erW+/PJL3XrrrZKkzMxM7dixQ//7v/+rQYMGXXCP999/XxUVFRccHzhwoAYOHNjiOgMApF69eunGG2+0fUhV9/Kqtc8RVVVVeuyxxy6IDQgI0K9//Ws988wzSkxM1NChQ3XnnXcqMDBQf/vb3/SnP/1JAwcO1Jw5cy4494svvlB6evoFxw0Gg60PAQB0fJ6envrrX/+qsWPH6uabb9bMmTN1ww03qKioSBkZGfrkk0/0wAMPaOrUqc6uKgCgFVry7kiS/vrXvza4jNStt94qg8Fw0Xv93//9n1atWqUnn3xSr776qqQf1lx/5plnlJKSooEDB2rGjBkKCQnR559/rj/84Q+qra3Vjh07dMUVV9iuM2LECP3ud7/TvHnz1Lt3b8XHx6tv3746f/68vvjiC23evFmenp4yGo0O+BsC/sMK4KI2bNhgldTo9vXXX1tramqsGzZssN50001WX19fq7e3t7V///7WZcuWWUtLS23Xev31162SrC+99FKj99u/f79VknX16tVWq9VqTUxMtHbv3v2CuKqqKuvVV19tlWRNSkpyfMMBoJOq+90/evToReMiIiKsEydOtDv2/fffW5cuXWrt37+/tVu3btaePXtab7rpJuvGjRuttbW1F1zjYr/hS5cutUqy7tu3z+54//79rbfccstF6163eXp6Wo1Go/XWW2+1rl692lpSUtLgeTU1NdbVq1dbBw0aZPX29rZ6e3tbBw0aZF2zZo21pqbGLnbfvn0X7RcfffTRhv/CAADNsnbtWqsk689//nPbsdY+RzT2W3311Vfbztu5c6d19OjRVl9fX6uHh4e1V69e1pSUFOt33313wT0u9vvfWN8EAHB9t9xyi7V///4NlhUWFlpTUlKs11xzjdXLy8vq7+9vjY6Otr711lsXxP7jH/+wSrI+++yzbV1lAEArtfTd0aOPPnrR54C691anT5+2SrI+/fTTDd53xowZ1i5dulhPnjxpd/zgwYPWyZMnW4OCgqweHh7W8PBw6+zZs61fffVVo23429/+Zp0+fbo1PDzc6unpae3evbt1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AAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0AAAAAAAAAAAAAAAcUEgHAAAAAAAAAAAAAMABhXQAAAAAAAAAAAAAABxQSAcAAAAAAAAAAAAAwAGFdAAAAAAAAAAAAAAAHFBIBwAAAAAAAAAAAADAAYV0uLVVq1bJw8PDnPz8/BQaGqqYmBgtXrxYp0+fdoqfPXu2U/xvJ5vNJkn64Ycf5OHhoRdffPGS+2/ZsqVuv/12p2UXt/XnP/+5zHz37dtXou3zzz/XXXfdJYvFIl9fX7Vs2VKPPvqojh8/XtHDAgC4CkePHtUjjzyiVq1ayc/PT/7+/rr55pv1yiuv6Ny5c5JKP/9fyubNm+Xh4aHQ0FAVFxeXGWe32zV//nz16NFDAQEB8vX1VYsWLXTffffp/fffd4rdvn37Jce0devWXdkBAAC4zMW///38/PTTTz+VaO/Tp486dOhgznN9AQC4yFXXJQ8++KA8PDzUqVMnGYZRot3Dw0MTJ04ssfznn3/WtGnT1KZNG/n5+SkoKEgxMTHatGmTazoIAChTZdc9HCd/f3916dJFf/nLX1RUVFTq/suaWrZs6bT/7OxsM6crHX/sdrvmzJmjzp07q1GjRqpfv746dOig6dOn68SJE646xHAjXtWdAFATzJ07VxERESooKJDNZtP27ds1efJkvfTSS3r33XfVqVMnp/hly5apUaNGJbYTGBjospxeeOEFTZgwQQ0aNLhs7JIlS/T444+rVatWmjRpkpo3b660tDT99a9/1f/93//pgw8+UM+ePV2WGwCgdO+//77uuece+fr6avTo0erQoYMuXLigzz77TNOmTdOhQ4e0YsWKCm937dq1atmypX744Qdt27ZN0dHRJWKOHDmimJgY/fjjj7rrrrs0evRoNWrUSMePH9fmzZt1++23680339SoUaOc1nvsscd0ww03lNie1WqtcJ4AgMqRn5+vBQsWaMmSJVe8Da4vAMB9VMZ1yYEDB/T2229r+PDhl41NT09Xv3799J///EcPPfSQevTooZycHK1du1ZDhgzR//7v/+qFF1640u4BAMqpsuoe999/vwYNGiRJys3N1ebNmzVp0iT9+OOPeuGFF9S7d2/9/e9/d1rnf/7nf3TjjTdq/Pjx5rLS9vVbFRl/vv/+e0VHRysjI0P33HOPxo8fLx8fH+3fv19vvPGGNmzYoG+//fay2wEcUUgHJA0cOFA9evQw5+Pj47Vt2zbdfvvtuuOOO5SWlqb69eub7XfffbeaNWtWafl06dJFqampWr58uaZOnXrJ2M8//1yTJ09Wr169tGXLFqcvxiZMmKCbb75Zw4cP16FDh1xa6AcAODt27JhGjBihFi1aaNu2bWrevLnZFhcXpyNHjpS4K7w8zpw5o3feeUcJCQlauXKl1q5dW6KQXlhYqLvuukuZmZnasWOHbr75Zqf2Z555Rh999JH5y2BHt9xyi+6+++4K5wUAqDpdunTR66+/rvj4eIWGhl7R+lxfAIB7qIzrkvr16yssLExz587VsGHD5OHhUWZsQUGB7r77bv3yyy/auXOnoqKizLYpU6YoNjZWL774onr06KH77ruv4h0EAJRbZdU9unXrppEjR5rzf/zjHxUVFaXExES98MILatWqlVq1auW0zqOPPqpWrVo5rXc5FRl/CgsLNWzYMGVmZmr79u3q1auXU/v8+fP1/PPPl3vfwEU82h0ow2233aaZM2fqxx9/1Jo1a6p03zfffLNuu+02LVy40HzcVlnmzZsnDw8PrV69usTdJddee60WLlyoEydOXNEdkACA8lu4cKHy8vL0xhtvOH1ZdVHr1q31+OOPV3i7GzZs0Llz53TPPfdoxIgRevvtt3X+/HmnmPXr1+vgwYOaOXNmiSL6Rf3799fAgQMrvH8AQPX705/+pKKiIi1YsOCK1uf6AgDcR2Vcl3h6emrGjBnav3+/NmzYcMnYf/3rXzp48KCeeuoppyK6JNWrV0+vvfaaAgMDNXv27ArlAABwjcqoe3h4eMhiscjLy7X37lZ0/Pn666/19NNPlyiiS5K/v7/mz5/v0vzgHiikA5dw8fG3H330kdPyU6dOKTs722nKyclx6b5nz56tzMxMLVu2rMyYs2fPauvWrbrlllsUERFRasx9990nX19fvffeey7NDwDg7L333lOrVq100003uXS7a9euVd++fRUSEqIRI0bo9OnTJc7pF+cr8qvei06fPl1iTMvOzi71/VMAgOoRERGh0aNH6/XXX7/i9/pxfQEA7qGyrkseeOABXXfddZo7d+4lrxUujg+jR48utT0gIEBDhw7VN998oyNHjrg0RwBA+Vxt3ePs2bNm+/fff6+lS5dqy5YtGjNmjMtzLe/48+6770pSiVcaAleLQjpwCddcc40CAgJ09OhRp+Vt2rTR7373O6fJ1e8IvOWWW9S3b1+98MILZd418t1336mwsFCdO3cuczu+vr5q06aNDh8+7NL8AAD/Zbfb9dNPP6ljx44u3W5WVpY+/vhjjRgxQpIUHh4uq9WqtWvXOsV98803CgwM1O9//3un5WfOnHG6+LHb7SX28fDDD5cY0373u98pMzPTpX0BAFydp59+WoWFhVf8OEKuLwCg7qus6xLp17vJZ8yYoa+//lobN24sM+7w4cMKCAhQixYtyoy5OM6kpaW5Ok0AQDlcbd3jmWeeMduvvfZaTZw4UePGjdOcOXNcnmt5x5+0tDQFBAQoLCzM5TnAvfGOdOAyGjVqpNOnTzst+9e//iV/f3+nZQ0bNnT5vmfPnq1bb71Vy5cv15QpU0q0X8yrcePGl9xO48aNS/QBAOA6FwvUlzsfV9S6devk6emp4cOHm8vuv/9+PfHEE/rll1/UpEkTc/+NGjUqsf7TTz+tV155xZwfPHiwNm3a5BQza9Ys3XLLLSXWDQoKclU3AAAu0KpVK40aNUorVqzQU089Verjei+H6wsAqNsq67rkotjYWD377LOaO3eu7rzzzlLfVXv69OlyjSOSSv2hLwCgalxN3WP8+PG65557JP16Lt+2bZuWLVsmX19fvfzyyy7PtTzjj91ur7TxD+6NQjpwGXl5eQoODnZa1rt3bzVr1qzS9927d2/17dtXCxcu1KOPPlqi/eLAcLkvsU6fPl2iDwAA17l4keHqosKaNWt044036ueff9bPP/8sSeratasuXLig9evXa/z48ZJ+HQ8utjv64x//qNtvv11S2Y9979ixo6Kjo12aNwCgcsyYMUN///vftWDBAqcfSpUX1xcAULdV1nXJRRfvChwzZow2btyou+66q0RM48aNlZ2dfcntlPeHWwCAynM1dY/rrrvO6bukYcOGycPDQ4sWLdLDDz/s8iejlGf88ff31/fff+/S/QISj3YHLunf//63cnNz1bp162rL4ZlnnpHNZtNrr71Wou26666Tl5eX9u/fX+b6+fn5Sk9PV6tWrSozTQBwa/7+/goNDdXBgwddts3vvvtOe/fu1WeffabrrrvOnHr16iVJTo93b9u2rXJycvTTTz85beP6669XdHS0oqOj5efn57LcAADVo1WrVho5cqRWrFihkydPXtE2uL4AgLqrMq5Lfis2NlatW7cu8121kZGRys3NVUZGRpnbuDjOtGvXrtLyBACUrTLqHv369ZMk7dy502XbdHS58adt27bKzc3V8ePHK2X/cF8U0oFL+Pvf/y5JiomJqbYcbr31VvXp00fPP/98iXcZNmjQQP369dPOnTv1448/lrr+W2+9pfz8fPNRKwCAynH77bfr6NGjSk5Odsn21q5dK29vb61bt07r1693mh5//HF9+umn5pdTF+86/+270wEAdc+MGTOu6l3pXF8AQN3m6uuS37p4V2BqaqreeeedUvcvSW+++Wap69vtdr3zzjtq27Zttd64AgDurDLqHoWFhZJ+vdO9Mlxu/BkyZIikX5/uCLgShXSgDNu2bdO8efMUERGh2NjYas1l9uzZstlsWrFiRYm2GTNmyDAMPfjggyW+CDt27JiefPJJhYWFadSoUVWVLgC4pSeffFINGzbU//zP/ygzM7NE+9GjRyv0GN61a9fqlltu0X333ae7777baZo2bZok6R//+Ick6d5771W7du00b9487d69u9TtlfZrXQBA7XPttddq5MiReu2112Sz2a5oG1xfAEDd5errktKMHDlSrVu31pw5c0q03X333WrXrp0WLFigffv2ObUVFxdrwoQJ+uWXX/TMM89cVQ4AgCtTWXWP9957T5LUuXNnl23zty43/nTs2FHz588v9cdkp0+f1tNPP11puaHu4h3pgKQPPvhA33zzjQoLC5WZmalt27YpKSlJLVq00Lvvvlvicbj//Oc/1ahRoxLb+cMf/iCLxWLOb926VefPny8Rd+edd6pDhw7lzu/WW2/Vrbfeqh07dpRo69Wrl15++WVNnjxZnTp10oMPPqjmzZvrm2++0euvvy5PT09t3LhRgYGB5d4fAKDirr32WiUmJuq+++5TZGSkRo8erQ4dOujChQvatWuX1q9frwcffNCMP3LkiJ599tkS2+natauaNWumI0eOaOLEiaXu6/e//726deumtWvXavr06fL29taGDRsUExOjXr16adiwYbrlllvUsGFD/fTTT3r33XeVkZGhwYMHl9jWp59+WupY1alTJ3Xq1OnKDwgAoNI8/fTT+vvf/6709HS1b9++wutzfQEAdZcrr0tKu36Qfr0r8Omnn9ZDDz1Uos3Hx0f//Oc/1a9fP/Xq1UsPPfSQevTooZycHCUmJurLL7/UE088oREjRriszwCA0lVW3ePLL7807/w+ffq0tm7dqn/961+66aab1L9//0rrz6XGH29vb7399tuKjo5W7969de+99+rmm2+Wt7e3Dh06pMTERDVp0kTz58+vtPxQN1FIByTNmjVL0q9/7AcFBaljx45atGiRHnroITVu3LhE/IQJE0rdzieffOI0oGzZskVbtmwpEdeyZcsKFdKlX+8a6du3b6ltjz32mLp166YXX3xRixYt0s8//yzDMBQcHKyvv/5aISEhFdoXAODK3HHHHdq/f79eeOEFvfPOO1q2bJl8fX3VqVMn/fnPf9a4cePM2PT0dM2cObPENsaOHasGDRpI+u9jqUozZMgQzZ49W/v371enTp10/fXXKzU1VYsXL9aGDRv0wQcf6MKFC7JYLIqKitIzzzxjPmbR0eLFi0vd/jPPPEMhHQBqqNatW2vkyJFavXr1FW+D6wsAqLtcdV1SViFd+vWuwGeffVZHjx4t0RYZGamvv/5aCxYs0LvvvquVK1eqfv366tGjh959991LXucAAFynsuoe//jHP8ynJHp5eSk8PFzTpk3TrFmz5OlZuQ/CvtT407p1a6Wm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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Distinguimos variables discretas, `'DEROG','DELINQ','NINQ` y variables continuas `'LOAN','MORTDUE','VALUE','YOJ','CLAGE','CLNO','DEBTINC'`"
      ],
      "metadata": {
        "id": "4e_IRUsg2hMt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "value_counts = y.value_counts()\n",
        "percentages = value_counts / value_counts.sum() * 100\n",
        "\n",
        "# Bar Plot\n",
        "ax = value_counts.plot(kind='bar', color='dodgerblue', edgecolor='black')\n",
        "plt.xlabel('Valores Target')\n",
        "plt.ylabel('Frequencia')\n",
        "plt.title('Grafico de Barra de los Valores del Target')\n",
        "\n",
        "# Agregamos las etiquetas de porcentaje a cada barra\n",
        "for i, (count, percentage) in enumerate(zip(value_counts, percentages)):\n",
        "    ax.text(i, count + 0.01 * max(value_counts), f'{percentage:.1f}%', ha='center')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "P77JQ6UzIA95",
        "outputId": "4dffa5d3-19de-4a93-aef9-c74da2eb087d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "La distribucion de los datos objetivo muestra que los registros de prestamos con pagos incumplidos es el 16.7% del total de prestamos."
      ],
      "metadata": {
        "id": "p28hTtgVHF1t"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Análisis de correlaciones**"
      ],
      "metadata": {
        "id": "zB0Ucl4C3tDx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "corr_matrix = dataset.corr()\n",
        "plt.figure(figsize=(12,8))\n",
        "plt.title(\"Mapa de calor, correlaciones\")\n",
        "sns.heatmap(corr_matrix, annot=True,cmap='Blues', vmin=-1, vmax =1)\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "id": "8RwqZYS0hiD2",
        "outputId": "248afa31-0f15-498d-89f9-7d81e3b23eef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Sort the correlations for the 'BAD' column in descending order\n",
        "top_corr = corr_matrix['TARGET'].sort_values(ascending=False)[1:20].to_frame()\n",
        "top_corr"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "id": "WaQgWdNhkfUL",
        "outputId": "3dc2f7cf-4653-4525-fe69-3bbd9b279693"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           TARGET\n",
              "DELINQ   0.318346\n",
              "DEROG    0.281370\n",
              "DEBTINC  0.266687\n",
              "NINQ     0.138429\n",
              "CLNO     0.025141\n",
              "MORTDUE -0.023325\n",
              "VALUE   -0.035457\n",
              "LOAN    -0.042249\n",
              "YOJ     -0.079003\n",
              "CLAGE   -0.158654"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e6af028d-435e-4d00-87bf-3861de2c68df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TARGET</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>DELINQ</th>\n",
              "      <td>0.318346</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEROG</th>\n",
              "      <td>0.281370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEBTINC</th>\n",
              "      <td>0.266687</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NINQ</th>\n",
              "      <td>0.138429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CLNO</th>\n",
              "      <td>0.025141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MORTDUE</th>\n",
              "      <td>-0.023325</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VALUE</th>\n",
              "      <td>-0.035457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LOAN</th>\n",
              "      <td>-0.042249</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>YOJ</th>\n",
              "      <td>-0.079003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CLAGE</th>\n",
              "      <td>-0.158654</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6af028d-435e-4d00-87bf-3861de2c68df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e6af028d-435e-4d00-87bf-3861de2c68df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e6af028d-435e-4d00-87bf-3861de2c68df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7df2e473-f365-4ab9-ad23-60c02e71f133\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7df2e473-f365-4ab9-ad23-60c02e71f133')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7df2e473-f365-4ab9-ad23-60c02e71f133 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_1584fae5-1633-43ff-812a-38b95eeed2f0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('top_corr')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1584fae5-1633-43ff-812a-38b95eeed2f0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('top_corr');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top_corr",
              "summary": "{\n  \"name\": \"top_corr\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"TARGET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16952255550614245,\n        \"min\": -0.15865408077746954,\n        \"max\": 0.31834567763440796,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          -0.07900337533469569,\n          0.2813699332436643,\n          -0.02332452011074475\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tenemos correlaciones positivas y negativas, pero ambas con un grado de correlacion **débil**, pero podemos separas estas variables entre las que tienen correlaciones positivas y las negativas con la variable objetivo. La baja correlación puede ser explicada por el hecho de que una de nuestras variables es binaria. Una posibilidad sería explorar otras correlaciones que tengan en cuenta los tipos de variables que tenemos."
      ],
      "metadata": {
        "id": "19N3DF-w1hG6"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A58DukGYsskZ"
      },
      "source": [
        "## Ejercicio 2: Predicción con Modelos Lineales\n",
        "\n",
        "En este ejercicio se entrenarán modelos lineales de clasificación para predecir la variable objetivo.\n",
        "\n",
        "Para ello, deberán utilizar la clase SGDClassifier de scikit-learn.\n",
        "\n",
        "Documentación:\n",
        "- https://scikit-learn.org/stable/modules/sgd.html\n",
        "- https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cOkcdbjrsskZ"
      },
      "source": [
        "### Ejercicio 2.1: SGDClassifier con hiperparámetros por defecto\n",
        "\n",
        "Entrenar y evaluar el clasificador SGDClassifier usando los valores por omisión de scikit-learn para todos los parámetros. Únicamente **fijar la semilla aleatoria** para hacer repetible el experimento.\n",
        "\n",
        "Evaluar sobre el conjunto de **entrenamiento** y sobre el conjunto de **prueba**, reportando:\n",
        "- Accuracy\n",
        "- Precision\n",
        "- Recall\n",
        "- F1\n",
        "- matriz de confusión"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "qCLsMNi6y-oC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Para este problema, lo que nos gustaría es evitar clasificar como \"no incumplió en pagos\" a un prestatario que si incumplió. Esto es, queremos evitar clasificar como $0$ a casos que deberían ser $1$. Por lo tanto, debemos enfocarnos en minimizar los *falsos negativos*.\n",
        "\n",
        "\n",
        "Para esto, la métrica que nos interesa optimizar es el Recall, ya que $Recall = \\frac{TP}{TP+ FN}$. Esto significa que el Recall es $1$ si no hay falsos negativos, mientras que tiende a $0$ al aumentar el número de falsos negativos."
      ],
      "metadata": {
        "id": "e-5Qo_BtfsrS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Escalar las características\n",
        "scaler = StandardScaler() # Normalizamos las características usando StandardScaler.\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "qJmlXlA9haUp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Entrenar el modelo SGDClassifier con hiperparámetros por defecto\n",
        "sgd_clf = SGDClassifier(random_state=0) # Usar SGDClassifier con los parámetros por defecto.\n",
        "sgd_clf.fit(X_train_scaled, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "ZCtO6CrAhhZd",
        "outputId": "c0825484-6e95-44b0-a2ca-59120ac6760b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SGDClassifier(random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(random_state=0)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicciones\n",
        "y_train_pred = sgd_clf.predict(X_train_scaled)\n",
        "y_test_pred = sgd_clf.predict(X_test_scaled)"
      ],
      "metadata": {
        "id": "M5rmO6V6hts-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "results = {} #guardamos informacion de los resultados"
      ],
      "metadata": {
        "id": "h4k5_CVSdelY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluación en el conjunto de entrenamiento\n",
        "target_names = ['0','1']\n",
        "accuracy = accuracy_score(y_train, y_train_pred)\n",
        "print(\"Accuracy =\",accuracy)\n",
        "print(classification_report(y_train, y_train_pred , target_names =target_names))\n",
        "ConfusionMatrixDisplay.from_predictions(\n",
        "    y_train, y_train_pred , display_labels=target_names, xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.title(\"Evaluación del Conjunto de Entrenamiento\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 688
        },
        "id": "QkBMNFgLPy5O",
        "outputId": "8ab9fb59-787e-4e0c-b51f-b2668df6c284"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy = 0.8732299393122049\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.97      0.93      1232\n",
            "           1       0.71      0.42      0.53       251\n",
            "\n",
            "    accuracy                           0.87      1483\n",
            "   macro avg       0.80      0.69      0.73      1483\n",
            "weighted avg       0.86      0.87      0.86      1483\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluación en el conjunto de prueba\n",
        "target_names = ['0','1']\n",
        "accuracy = accuracy_score(y_test, y_test_pred )\n",
        "print(\"Accuracy =\",accuracy)\n",
        "print(classification_report(y_test, y_test_pred , target_names =target_names))\n",
        "ConfusionMatrixDisplay.from_predictions(\n",
        "    y_test, y_test_pred , display_labels=target_names, xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.title(\"Evaluación del Conjunto de Prueba\")\n",
        "plt.show()\n",
        "\n",
        "results['SGDClassifier con hiperparámetros por defecto'] = [accuracy_score(y_test, y_test_pred),\n",
        "                                                            precision_score(y_test, y_test_pred),\n",
        "                                                            recall_score(y_test, y_test_pred),\n",
        "                                                            f1_score(y_test, y_test_pred)]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 685
        },
        "id": "9HagThi6AJQt",
        "outputId": "997d408b-d8fd-43d4-eadc-b1bf098d6bae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy = 0.8679245283018868\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.96      0.92       313\n",
            "           1       0.65      0.34      0.45        58\n",
            "\n",
            "    accuracy                           0.87       371\n",
            "   macro avg       0.77      0.65      0.69       371\n",
            "weighted avg       0.85      0.87      0.85       371\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Este modelo puede proporcionarnos un baseline de resultados, principalmente para hacer comparaciones entre el mismo modelo y sus ajustes de parámetros.\n",
        "\n",
        "Su exactitud es del $86.79\\%$, pero su desempeño en la predicción del label 1, es decir, los deudores con incumplimiento de pago, es pobre, ya que tiene una precisión de $0.65$, un recall de $0.34$ y un F1 de $0.45$, perdiendo así mucha información de este subconjunto de datos."
      ],
      "metadata": {
        "id": "cHhEzqCgV59r"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fS87Tbarsska"
      },
      "source": [
        "### Ejercicio 2.2: Ajuste de Hiperparámetros\n",
        "\n",
        "Seleccionar valores para los hiperparámetros principales del SGDClassifier. Como mínimo, probar diferentes funciones de loss, tasas de entrenamiento y tasas de regularización.\n",
        "\n",
        "Para ello, usar grid-search y 5-fold cross-validation sobre el conjunto de entrenamiento para explorar muchas combinaciones posibles de valores.\n",
        "\n",
        "Reportar accuracy promedio y varianza para todas las configuraciones.\n",
        "\n",
        "Para la mejor configuración encontrada, evaluar sobre el conjunto de **entrenamiento** y sobre el conjunto de **prueba**, reportando:\n",
        "- Accuracy\n",
        "- Precision\n",
        "- Recall\n",
        "- F1\n",
        "- matriz de confusión\n",
        "\n",
        "Documentación:\n",
        "- https://scikit-learn.org/stable/modules/grid_search.html\n",
        "- https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "ocylNaTISGtu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Definir los hiperparámetros a explorar\n",
        "param_grid = {\n",
        "    'loss': ['hinge', 'log', 'perceptron'],\n",
        "    'alpha': [0.0001, 0.001, 0.01, 0.1],\n",
        "    'eta0': [0.001,0.01, 0.1, 1],\n",
        "    'learning_rate': ['constant', 'optimal', 'invscaling', 'adaptive'],\n",
        "    'penalty': ['l2', 'l1', 'elasticnet']\n",
        "}"
      ],
      "metadata": {
        "id": "cmrQqccLlPCe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Configurar GridSearchCV con validación cruzada de 5 folds\n",
        "grid_search = GridSearchCV(SGDClassifier(random_state=0), param_grid, cv=5, scoring='accuracy', n_jobs=-1)"
      ],
      "metadata": {
        "id": "Ej4FivBylQfG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Entrenar el modelo\n",
        "grid_search.fit(X_train_scaled, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "SUJr9Z3llnoH",
        "outputId": "788690e2-6cfc-4d6f-a89f-90e1df603c17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:425: FitFailedWarning: \n",
            "960 fits failed out of a total of 2880.\n",
            "The score on these train-test partitions for these parameters will be set to nan.\n",
            "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
            "\n",
            "Below are more details about the failures:\n",
            "--------------------------------------------------------------------------------\n",
            "543 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 729, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1145, in wrapper\n",
            "    estimator._validate_params()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 638, in _validate_params\n",
            "    validate_parameter_constraints(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\", line 96, in validate_parameter_constraints\n",
            "    raise InvalidParameterError(\n",
            "sklearn.utils._param_validation.InvalidParameterError: The 'loss' parameter of SGDClassifier must be a str among {'squared_hinge', 'huber', 'epsilon_insensitive', 'hinge', 'squared_epsilon_insensitive', 'modified_huber', 'perceptron', 'squared_error', 'log_loss'}. Got 'log' instead.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "417 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 729, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1145, in wrapper\n",
            "    estimator._validate_params()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 638, in _validate_params\n",
            "    validate_parameter_constraints(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\", line 96, in validate_parameter_constraints\n",
            "    raise InvalidParameterError(\n",
            "sklearn.utils._param_validation.InvalidParameterError: The 'loss' parameter of SGDClassifier must be a str among {'squared_error', 'epsilon_insensitive', 'log_loss', 'modified_huber', 'squared_hinge', 'hinge', 'perceptron', 'huber', 'squared_epsilon_insensitive'}. Got 'log' instead.\n",
            "\n",
            "  warnings.warn(some_fits_failed_message, FitFailedWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:979: UserWarning: One or more of the test scores are non-finite: [0.86378424 0.86378424 0.86378424        nan        nan        nan\n",
            " 0.80919328 0.84760442 0.82270452 0.84357312 0.85097598 0.83817909\n",
            "        nan        nan        nan 0.7787219  0.80105788 0.81732642\n",
            " 0.85839476 0.85839476 0.85839476        nan        nan        nan\n",
            " 0.81931704 0.83279188 0.8260738  0.86445764 0.86513332 0.86445764\n",
            "        nan        nan        nan 0.80312813 0.80920466 0.8253731\n",
            " 0.86918509 0.86716262 0.86784057        nan        nan        nan\n",
            " 0.81050141 0.82331195 0.81188916 0.84357312 0.85097598 0.83817909\n",
            "        nan        nan        nan 0.7787219  0.80105788 0.81732642\n",
            " 0.85906816 0.85839476 0.85906816        nan        nan        nan\n",
            " 0.78894576 0.81455774 0.81726044 0.86918509 0.86918509 0.86986077\n",
            "        nan        nan        nan 0.77949313 0.83346073 0.73083538\n",
            " 0.84692192 0.85098963 0.8516653         nan        nan        nan\n",
            " 0.80110565 0.81395259 0.76460324 0.84357312 0.85097598 0.83817909\n",
            "        nan        nan        nan 0.7787219  0.80105788 0.81732642\n",
            " 0.87053417 0.87053417 0.87053417        nan        nan        nan\n",
            " 0.80645873 0.82871508 0.8004368  0.86986077 0.86918509 0.86918509\n",
            "        nan        nan        nan 0.78760351 0.81595687 0.8038311\n",
            " 0.79772272 0.81929884 0.80851306        nan        nan        nan\n",
            " 0.82873555 0.80652016 0.81794067 0.84357312 0.85097598 0.83817909\n",
            "        nan        nan        nan 0.7787219  0.80105788 0.81732642\n",
            " 0.86986077 0.86918737 0.86851169        nan        nan        nan\n",
            " 0.80313723 0.79367549 0.81388661 0.86918509 0.87053417 0.86985849\n",
            "        nan        nan        nan 0.81521522 0.82062972 0.83411821\n",
            " 0.86243516 0.86108836 0.86445991        nan        nan        nan\n",
            " 0.83011193 0.78349258 0.82269087 0.86514924 0.86378651 0.86445991\n",
            "        nan        nan        nan 0.7969879  0.78414096 0.63636136\n",
            " 0.85839476 0.85772136 0.85839476        nan        nan        nan\n",
            " 0.80920466 0.78820866 0.81930339 0.86513332 0.86378424 0.86513332\n",
            "        nan        nan        nan 0.80115115 0.77008827 0.81997224\n",
            " 0.8705319  0.86716262 0.86514242        nan        nan        nan\n",
            " 0.80776913 0.79767267 0.78090363 0.86514924 0.86378651 0.86445991\n",
            "        nan        nan        nan 0.7969879  0.78414096 0.63636136\n",
            " 0.85839476 0.85839476 0.85839476        nan        nan        nan\n",
            " 0.81387979 0.78685959 0.81790199 0.87053417 0.8705319  0.86918509\n",
            "        nan        nan        nan 0.80102375 0.81323596 0.80509601\n",
            " 0.84425789 0.86178224 0.85771453        nan        nan        nan\n",
            " 0.81927609 0.84492674 0.820632   0.86514924 0.86378651 0.86445991\n",
            "        nan        nan        nan 0.7969879  0.78414096 0.63636136\n",
            " 0.87053417 0.86985849 0.87053417        nan        nan        nan\n",
            " 0.79702202 0.80645646 0.81388661 0.86986077 0.8705319  0.87053417\n",
            "        nan        nan        nan 0.80850396 0.75919101 0.81930339\n",
            " 0.83885021 0.82331877 0.81051506        nan        nan        nan\n",
            " 0.79232187 0.81528119 0.77608063 0.86514924 0.86378651 0.86445991\n",
            "        nan        nan        nan 0.7969879  0.78414096 0.63636136\n",
            " 0.86716262 0.86648694 0.86783374        nan        nan        nan\n",
            " 0.81927609 0.79375512 0.83212303 0.87053417 0.87120757 0.87120757\n",
            "        nan        nan        nan 0.84291109 0.78900946 0.79302257\n",
            " 0.85974156 0.85434753 0.86108836        nan        nan        nan\n",
            " 0.83276913 0.77401265 0.78892984 0.86918509 0.86175949 0.86851169\n",
            "        nan        nan        nan 0.84219674 0.85032988 0.83344708\n",
            " 0.85772136 0.85907043 0.85772136        nan        nan        nan\n",
            " 0.8253822  0.75846301 0.79359359 0.86243516 0.85434753 0.86243516\n",
            "        nan        nan        nan 0.76945582 0.78832014 0.77473382\n",
            " 0.86580899 0.86109291 0.86311539        nan        nan        nan\n",
            " 0.82805988 0.77141005 0.79233779 0.86918509 0.86175949 0.86851169\n",
            "        nan        nan        nan 0.84219674 0.85032988 0.83344708\n",
            " 0.85839476 0.85502321 0.85771908        nan        nan        nan\n",
            " 0.81256029 0.75846301 0.82259987 0.87053417 0.85906361 0.86985849\n",
            "        nan        nan        nan 0.78691191 0.81991992 0.82264992\n",
            " 0.84154837 0.84962007 0.85639958        nan        nan        nan\n",
            " 0.79838247 0.7727432  0.83552189 0.86918509 0.86175949 0.86851169\n",
            "        nan        nan        nan 0.84219674 0.85032988 0.83344708\n",
            " 0.86918509 0.85906361 0.86580899        nan        nan        nan\n",
            " 0.81048094 0.75390618 0.82331877 0.87053417 0.86041269 0.86850714\n",
            "        nan        nan        nan 0.76131586 0.83952361 0.76266039\n",
            " 0.78557876 0.81051279 0.82671308        nan        nan        nan\n",
            " 0.76337019 0.76467149 0.76734234 0.86918509 0.86175949 0.86851169\n",
            "        nan        nan        nan 0.84219674 0.85032988 0.83344708\n",
            " 0.86445991 0.86177086 0.86514242        nan        nan        nan\n",
            " 0.81929202 0.78226863 0.79633042 0.87120985 0.86108836 0.86783374\n",
            "        nan        nan        nan 0.80244335 0.78892301 0.81458959\n",
            " 0.85165393 0.83074893 0.84895577        nan        nan        nan\n",
            " 0.81122486 0.79767267 0.78074893 0.85165393 0.83074893 0.84895805\n",
            "        nan        nan        nan 0.79436027 0.5546137  0.83476431\n",
            " 0.85704796 0.85030485 0.85772363        nan        nan        nan\n",
            " 0.83077851 0.83209573 0.78274638 0.85098053 0.83074893 0.84895577\n",
            "        nan        nan        nan 0.79843025 0.81391391 0.79704705\n",
            " 0.8536764  0.83074893 0.85165393        nan        nan        nan\n",
            " 0.81933069 0.80915916 0.77146465 0.85165393 0.83074893 0.84895805\n",
            "        nan        nan        nan 0.79436027 0.5546137  0.83476431\n",
            " 0.85569888 0.83817226 0.85502093        nan        nan        nan\n",
            " 0.81252844 0.83209573 0.76252616 0.85165393 0.83074893 0.84963145\n",
            "        nan        nan        nan 0.77333697 0.83074893 0.73278961\n",
            " 0.83546956 0.83277141 0.83883884        nan        nan        nan\n",
            " 0.76337019 0.80175175 0.73638866 0.85165393 0.83074893 0.84895805\n",
            "        nan        nan        nan 0.79436027 0.5546137  0.83476431\n",
            " 0.85232733 0.83074893 0.84828237        nan        nan        nan\n",
            " 0.799727   0.83074893 0.76871644 0.85165393 0.83074893 0.84963145\n",
            "        nan        nan        nan 0.81192329 0.43457093 0.82875375\n",
            " 0.77277505 0.81589544 0.83279188        nan        nan        nan\n",
            " 0.71957412 0.81185276 0.79232187 0.85165393 0.83074893 0.84895805\n",
            "        nan        nan        nan 0.79436027 0.5546137  0.83476431\n",
            " 0.8536764  0.83074893 0.85030485        nan        nan        nan\n",
            " 0.8037674  0.83074893 0.78686869 0.85098053 0.83074893 0.84963145\n",
            "        nan        nan        nan 0.80919328 0.6983165  0.79229002]\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=SGDClassifier(random_state=0), n_jobs=-1,\n",
              "             param_grid={'alpha': [0.0001, 0.001, 0.01, 0.1],\n",
              "                         'eta0': [0.001, 0.01, 0.1, 1],\n",
              "                         'learning_rate': ['constant', 'optimal', 'invscaling',\n",
              "                                           'adaptive'],\n",
              "                         'loss': ['hinge', 'log', 'perceptron'],\n",
              "                         'penalty': ['l2', 'l1', 'elasticnet']},\n",
              "             scoring='accuracy')"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=SGDClassifier(random_state=0), n_jobs=-1,\n",
              "             param_grid={&#x27;alpha&#x27;: [0.0001, 0.001, 0.01, 0.1],\n",
              "                         &#x27;eta0&#x27;: [0.001, 0.01, 0.1, 1],\n",
              "                         &#x27;learning_rate&#x27;: [&#x27;constant&#x27;, &#x27;optimal&#x27;, &#x27;invscaling&#x27;,\n",
              "                                           &#x27;adaptive&#x27;],\n",
              "                         &#x27;loss&#x27;: [&#x27;hinge&#x27;, &#x27;log&#x27;, &#x27;perceptron&#x27;],\n",
              "                         &#x27;penalty&#x27;: [&#x27;l2&#x27;, &#x27;l1&#x27;, &#x27;elasticnet&#x27;]},\n",
              "             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=SGDClassifier(random_state=0), n_jobs=-1,\n",
              "             param_grid={&#x27;alpha&#x27;: [0.0001, 0.001, 0.01, 0.1],\n",
              "                         &#x27;eta0&#x27;: [0.001, 0.01, 0.1, 1],\n",
              "                         &#x27;learning_rate&#x27;: [&#x27;constant&#x27;, &#x27;optimal&#x27;, &#x27;invscaling&#x27;,\n",
              "                                           &#x27;adaptive&#x27;],\n",
              "                         &#x27;loss&#x27;: [&#x27;hinge&#x27;, &#x27;log&#x27;, &#x27;perceptron&#x27;],\n",
              "                         &#x27;penalty&#x27;: [&#x27;l2&#x27;, &#x27;l1&#x27;, &#x27;elasticnet&#x27;]},\n",
              "             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(random_state=0)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultados de la mejor configuración\n",
        "print(\"Mejores hiperparámetros:\", grid_search.best_params_)\n",
        "print(\"Mejor accuracy promedio:\", grid_search.best_score_)\n",
        "# Accuracy promedio y varianza para todas las configuraciones\n",
        "grid_info_df = pd.DataFrame(grid_search.cv_results_)\n",
        "grid_info_df = grid_info_df[['param_alpha','param_eta0','param_learning_rate','param_loss','param_penalty','mean_test_score','std_test_score']]\n",
        "\n",
        "grid_info_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "YmxrQRoTlwCn",
        "outputId": "ffab5fba-3c08-4b5f-fe93-255b65e0663d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mejores hiperparámetros: {'alpha': 0.01, 'eta0': 1, 'learning_rate': 'adaptive', 'loss': 'hinge', 'penalty': 'l2'}\n",
            "Mejor accuracy promedio: 0.8712098462098462\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    param_alpha param_eta0 param_learning_rate  param_loss param_penalty  \\\n",
              "0        0.0001      0.001            constant       hinge            l2   \n",
              "1        0.0001      0.001            constant       hinge            l1   \n",
              "2        0.0001      0.001            constant       hinge    elasticnet   \n",
              "3        0.0001      0.001            constant         log            l2   \n",
              "4        0.0001      0.001            constant         log            l1   \n",
              "..          ...        ...                 ...         ...           ...   \n",
              "571         0.1          1            adaptive         log            l1   \n",
              "572         0.1          1            adaptive         log    elasticnet   \n",
              "573         0.1          1            adaptive  perceptron            l2   \n",
              "574         0.1          1            adaptive  perceptron            l1   \n",
              "575         0.1          1            adaptive  perceptron    elasticnet   \n",
              "\n",
              "     mean_test_score  std_test_score  \n",
              "0           0.863784        0.005994  \n",
              "1           0.863784        0.005994  \n",
              "2           0.863784        0.005994  \n",
              "3                NaN             NaN  \n",
              "4                NaN             NaN  \n",
              "..               ...             ...  \n",
              "571              NaN             NaN  \n",
              "572              NaN             NaN  \n",
              "573         0.809193        0.032775  \n",
              "574         0.698316        0.264702  \n",
              "575         0.792290        0.058457  \n",
              "\n",
              "[576 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3b3021b0-8622-41ff-a623-5ae371b354b7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>param_alpha</th>\n",
              "      <th>param_eta0</th>\n",
              "      <th>param_learning_rate</th>\n",
              "      <th>param_loss</th>\n",
              "      <th>param_penalty</th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>std_test_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0001</td>\n",
              "      <td>0.001</td>\n",
              "      <td>constant</td>\n",
              "      <td>hinge</td>\n",
              "      <td>l2</td>\n",
              "      <td>0.863784</td>\n",
              "      <td>0.005994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0001</td>\n",
              "      <td>0.001</td>\n",
              "      <td>constant</td>\n",
              "      <td>hinge</td>\n",
              "      <td>l1</td>\n",
              "      <td>0.863784</td>\n",
              "      <td>0.005994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0001</td>\n",
              "      <td>0.001</td>\n",
              "      <td>constant</td>\n",
              "      <td>hinge</td>\n",
              "      <td>elasticnet</td>\n",
              "      <td>0.863784</td>\n",
              "      <td>0.005994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0001</td>\n",
              "      <td>0.001</td>\n",
              "      <td>constant</td>\n",
              "      <td>log</td>\n",
              "      <td>l2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0001</td>\n",
              "      <td>0.001</td>\n",
              "      <td>constant</td>\n",
              "      <td>log</td>\n",
              "      <td>l1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>571</th>\n",
              "      <td>0.1</td>\n",
              "      <td>1</td>\n",
              "      <td>adaptive</td>\n",
              "      <td>log</td>\n",
              "      <td>l1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>572</th>\n",
              "      <td>0.1</td>\n",
              "      <td>1</td>\n",
              "      <td>adaptive</td>\n",
              "      <td>log</td>\n",
              "      <td>elasticnet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>573</th>\n",
              "      <td>0.1</td>\n",
              "      <td>1</td>\n",
              "      <td>adaptive</td>\n",
              "      <td>perceptron</td>\n",
              "      <td>l2</td>\n",
              "      <td>0.809193</td>\n",
              "      <td>0.032775</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>574</th>\n",
              "      <td>0.1</td>\n",
              "      <td>1</td>\n",
              "      <td>adaptive</td>\n",
              "      <td>perceptron</td>\n",
              "      <td>l1</td>\n",
              "      <td>0.698316</td>\n",
              "      <td>0.264702</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>575</th>\n",
              "      <td>0.1</td>\n",
              "      <td>1</td>\n",
              "      <td>adaptive</td>\n",
              "      <td>perceptron</td>\n",
              "      <td>elasticnet</td>\n",
              "      <td>0.792290</td>\n",
              "      <td>0.058457</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>576 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3b3021b0-8622-41ff-a623-5ae371b354b7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3b3021b0-8622-41ff-a623-5ae371b354b7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3b3021b0-8622-41ff-a623-5ae371b354b7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-98aa1d03-d210-4a85-ab05-30eef39b706c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-98aa1d03-d210-4a85-ab05-30eef39b706c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-98aa1d03-d210-4a85-ab05-30eef39b706c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_de53a015-80b2-4d00-b839-b62aa85f5b2c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('grid_info_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_de53a015-80b2-4d00-b839-b62aa85f5b2c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('grid_info_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "grid_info_df",
              "summary": "{\n  \"name\": \"grid_info_df\",\n  \"rows\": 576,\n  \"fields\": [\n    {\n      \"column\": \"param_alpha\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.0001,\n        \"max\": 0.1,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.001,\n          0.1,\n          0.0001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_eta0\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.001,\n        \"max\": 1,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.01,\n          1,\n          0.001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_learning_rate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"optimal\",\n          \"adaptive\",\n          \"constant\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_loss\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"hinge\",\n          \"log\",\n          \"perceptron\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_penalty\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"l2\",\n          \"l1\",\n          \"elasticnet\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05163996030530163,\n        \"min\": 0.4345709345709346,\n        \"max\": 0.8712098462098462,\n        \"num_unique_values\": 227,\n        \"samples\": [\n          0.8173264173264174,\n          0.7869119119119119,\n          0.8651333151333152\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0478644509046857,\n        \"min\": 0.001259011828864193,\n        \"max\": 0.32421517191430954,\n        \"num_unique_values\": 255,\n        \"samples\": [\n          0.008850689855702986,\n          0.01609537179099872,\n          0.030395257780654973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicciones\n",
        "y_train_pred = grid_search.predict(X_train_scaled)\n",
        "y_test_pred = grid_search.predict(X_test_scaled)"
      ],
      "metadata": {
        "id": "CSAOmEpQSjTd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluación en el conjunto de entrenamiento\n",
        "target_names = ['0','1']\n",
        "accuracy = accuracy_score(y_train, y_train_pred)\n",
        "print(\"Accuracy =\",accuracy)\n",
        "print(classification_report(y_train, y_train_pred , target_names =target_names))\n",
        "ConfusionMatrixDisplay.from_predictions(\n",
        "    y_train, y_train_pred , display_labels=target_names, xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.title(\"Evaluación del Conjunto de Entrenamiento\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 688
        },
        "outputId": "fe598cd5-98f1-4d1c-83f0-9dbddd102de7",
        "id": "qozD5sElTI8d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy = 0.8732299393122049\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      1.00      0.93      1232\n",
            "           1       0.92      0.27      0.42       251\n",
            "\n",
            "    accuracy                           0.87      1483\n",
            "   macro avg       0.90      0.64      0.68      1483\n",
            "weighted avg       0.88      0.87      0.84      1483\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluación en el conjunto de prueba\n",
        "target_names = ['0','1']\n",
        "accuracy = accuracy_score(y_test, y_test_pred )\n",
        "print(\"Accuracy =\",accuracy)\n",
        "print(classification_report(y_test, y_test_pred , target_names =target_names))\n",
        "ConfusionMatrixDisplay.from_predictions(\n",
        "    y_test, y_test_pred , display_labels=target_names, xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.title(\"Evaluación del Conjunto de Prueba\")\n",
        "plt.show()\n",
        "\n",
        "results['SGDClassifier con Ajuste de Hiperparámetros'] = [accuracy_score(y_test, y_test_pred),\n",
        "                                                          precision_score(y_test, y_test_pred),\n",
        "                                                          recall_score(y_test, y_test_pred),\n",
        "                                                          f1_score(y_test, y_test_pred)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 688
        },
        "outputId": "22fcdfcd-8763-47b9-ecf5-474c73d31aaf",
        "id": "1G-FA8f2TMPO"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy = 0.8840970350404312\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      1.00      0.94       313\n",
            "           1       0.94      0.28      0.43        58\n",
            "\n",
            "    accuracy                           0.88       371\n",
            "   macro avg       0.91      0.64      0.68       371\n",
            "weighted avg       0.89      0.88      0.86       371\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Usando el análisis de hiperparámetros para el modelo anterior, vemos que logramos una mejora en algunas métricas, pero a costa de otras, como el recall, la cual estamos tomando como métrica a maximizar.\n",
        "\n",
        "Su accuracy aumentó, llegando a $88.41\\%$, mientras que para la predicción del label 1 sigue siendo pobre, con una precision de $0.94$, recall de $0.28$ y F1 de $0.43$, confundiendo principalmente valores reales $1$ con predicciones $0$."
      ],
      "metadata": {
        "id": "LMSdN0cNc-2V"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IEOPxfGUsska"
      },
      "source": [
        "## Ejercicio 3: Árboles de Decisión\n",
        "\n",
        "En este ejercicio se entrenarán árboles de decisión para predecir la variable objetivo.\n",
        "\n",
        "Para ello, deberán utilizar la clase DecisionTreeClassifier de scikit-learn.\n",
        "\n",
        "Documentación:\n",
        "- https://scikit-learn.org/stable/modules/tree.html\n",
        "  - https://scikit-learn.org/stable/modules/tree.html#tips-on-practical-use\n",
        "- https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html\n",
        "- https://scikit-learn.org/stable/auto_examples/tree/plot_unveil_tree_structure.html"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b1reVnawsska"
      },
      "source": [
        "### Ejercicio 3.1: DecisionTreeClassifier con hiperparámetros por defecto\n",
        "\n",
        "Entrenar y evaluar el clasificador DecisionTreeClassifier usando los valores por omisión de scikit-learn para todos los parámetros. Únicamente **fijar la semilla aleatoria** para hacer repetible el experimento.\n",
        "\n",
        "Evaluar sobre el conjunto de **entrenamiento** y sobre el conjunto de **evaluación**, reportando:\n",
        "- Accuracy\n",
        "- Precision\n",
        "- Recall\n",
        "- F1\n",
        "- matriz de confusión\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "CPn0RJrOZimS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Entrenar el modelo DecisionTreeClassifier con hiperparámetros por defecto y semilla aleatoria\n",
        "tree_clf = DecisionTreeClassifier(random_state=0)\n",
        "tree_clf.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "nNznkaTTFymZ",
        "outputId": "896e9632-10b4-4091-d990-08f036cc3872"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=0)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicciones\n",
        "y_train_pred = tree_clf.predict(X_train)\n",
        "y_test_pred = tree_clf.predict(X_test)"
      ],
      "metadata": {
        "id": "SG1HDbyyF1ro"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluación en el conjunto de entrenamiento\n",
        "target_names = ['0','1']\n",
        "accuracy = accuracy_score(y_train, y_train_pred)\n",
        "print(\"Accuracy =\",accuracy)\n",
        "print(classification_report(y_train, y_train_pred , target_names =target_names))\n",
        "ConfusionMatrixDisplay.from_predictions(\n",
        "    y_train, y_train_pred , display_labels=target_names, xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.title(\"Evaluación del Conjunto de Entrenamiento\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 688
        },
        "outputId": "13aad018-66ce-4529-a6f6-7ffb1c83937f",
        "id": "afo4LQs9ZyHV"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy = 1.0\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00      1232\n",
            "           1       1.00      1.00      1.00       251\n",
            "\n",
            "    accuracy                           1.00      1483\n",
            "   macro avg       1.00      1.00      1.00      1483\n",
            "weighted avg       1.00      1.00      1.00      1483\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluación en el conjunto de prueba\n",
        "target_names = ['0','1']\n",
        "accuracy = accuracy_score(y_test, y_test_pred )\n",
        "print(\"Accuracy =\",accuracy)\n",
        "print(classification_report(y_test, y_test_pred , target_names =target_names))\n",
        "ConfusionMatrixDisplay.from_predictions(\n",
        "    y_test, y_test_pred , display_labels=target_names, xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.title(\"Evaluación del Conjunto de Prueba\")\n",
        "plt.show()\n",
        "\n",
        "results['DecisionTreeClassifier con hiperparámetros por defecto'] = [accuracy_score(y_test, y_test_pred),\n",
        "                                                                     precision_score(y_test, y_test_pred),\n",
        "                                                                     recall_score(y_test, y_test_pred),\n",
        "                                                                     f1_score(y_test, y_test_pred)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 688
        },
        "outputId": "ab6ab928-664c-4fcf-8c73-5d1a4ff24e4d",
        "id": "xPydLOytc8E4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy = 0.8814016172506739\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.93      0.93       313\n",
            "           1       0.62      0.64      0.63        58\n",
            "\n",
            "    accuracy                           0.88       371\n",
            "   macro avg       0.77      0.78      0.78       371\n",
            "weighted avg       0.88      0.88      0.88       371\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiwAAAHsCAYAAADxd/bAAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABGFElEQVR4nO3deXgUVdr38V8nkE4C6UCAJERDWIIssjmgGEZZBFkfkMVHEVRQlhdJRFYVHUUQyYziwOCwuBJ0xGUUGWEQRVbRAIKCgsgjYV8SxJiEBLN2vX8w6aFJAmmopKvl+7muui666vSpuzvd5M59zqmyGYZhCAAAwML8vB0AAADApZCwAAAAyyNhAQAAlkfCAgAALI+EBQAAWB4JCwAAsDwSFgAAYHkkLAAAwPJIWPC7tmzZMs2ePVtFRUXeDgUAcAVIWOAxm82mZ555xtthaPjw4apfv36Zx7/66isNHTpUzZs3l7+/f4XHs2HDBtlsNm3YsMHj5yYlJclms+nQoUOmx2UmX4nTU1b5TFekZ555RjabTadPn/Z2KMBlIWHxUcW/OMratmzZ4u0QveqXX37R4MGDNW/ePPXu3dvb4Zhu586duvfeexUdHS273a6wsDB169ZNixcv/l1UkxYsWKCkpCRvh3HZ6tev7/Z9DA8P16233qqPPvrI26EBPquKtwPAlZkxY4YaNGhQYn9sbKwXoqlcr776qpxOZ6nHvv32W82cOVP3339/JUdV8V577TWNGTNGERERuu+++9S4cWOdOXNGa9eu1YgRI3Ty5Ek98cQTFXLu++67T4MHD5bdbq+Q/ostWLBAtWvX1vDhwyv0PBWpTZs2mjRpkiTpxIkTevnllzVw4EAtXLhQY8aM8XJ0gO8hYfFxvXr1Urt27bwdhldUrVq1zGPdunWrxEgqz5YtWzRmzBjFxcVp1apVCgkJcR0bP368tm/frt27d1fY+f39/StleO334JprrtG9997renz//fcrNjZWc+bMKTNhKSwslNPpVEBAQGWFCfgMhoR+xwoKChQWFqYHHnigxLGsrCwFBgZq8uTJkqT8/Hw9/fTTatu2rUJDQ1WtWjXdeuutWr9+/SXPU9ZckuIx8/MtXrxYt912m8LDw2W329W8eXMtXLiw1H4/+eQTderUSSEhIXI4HLrxxhu1dOnSi543JydHkyZNcg2VNGnSRLNnz9aFNyW32WxKSEjQ8uXL1aJFC9ntdl1//fVavXr1JV+vJB07dkz9+/dXtWrVFB4ergkTJigvL6/Utlu3blXPnj0VGhqq4OBgderUSV9++WW5znOh6dOny2az6e2333ZLVoq1a9fOrSph9vtR2hyWsuZ/1K9f3y2W4ud++eWXmjhxourUqaNq1appwIAB+vnnn92et2fPHm3cuNE1pNK5c2fX8QMHDuh///d/FRYWpuDgYN18883697//Xa73Ly8vTxMmTFCdOnUUEhKifv366dixY6W2PX78uB588EFFRES43o833nijXOcpTWRkpJo1a6aDBw9Kkg4dOiSbzabZs2dr7ty5atSokex2u3744Ycy5wqVNU/Kk8/Y6dOnddddd8nhcKhWrVp65JFHlJub69bGk+8pUFmosPi4zMzMEpPobDabatWqpapVq2rAgAFatmyZXn75Zbe/2pYvX668vDwNHjxY0rkE5rXXXtM999yjUaNG6cyZM3r99dfVo0cPbdu2TW3atDEl3oULF+r6669Xv379VKVKFa1YsUJjx46V0+lUfHy8q11SUpIefPBBXX/99Zo6dapq1Kihb7/9VqtXr9aQIUNK7dswDPXr10/r16/XiBEj1KZNG3366aeaMmWKjh8/rjlz5ri137x5s5YtW6axY8cqJCRE8+bN06BBg3TkyBHVqlWrzNfw22+/qWvXrjpy5IjGjRunqKgovfXWW1q3bl2JtuvWrVOvXr3Utm1bTZs2TX5+fq5fBl988YVuuummcr93Z8+e1dq1a9WxY0fVq1fvku0r6/3w1MMPP6yaNWtq2rRpOnTokObOnauEhAS99957kqS5c+fq4YcfVvXq1fXkk09KkiIiIiRJaWlp6tChg86ePatx48apVq1aWrJkifr166cPPvhAAwYMuOi5R44cqX/84x8aMmSIOnTooHXr1qlPnz4l2qWlpenmm292JXJ16tTRJ598ohEjRigrK0vjx4/3+HUXFBTo6NGjJd7LxYsXKzc3V6NHj3bNR/KEp5+xu+66S/Xr11diYqK2bNmiefPm6ddff9Wbb77palPe7ylQqQz4pMWLFxuSSt3sdrur3aeffmpIMlasWOH2/N69exsNGzZ0PS4sLDTy8vLc2vz6669GRESE8eCDD7rtl2RMmzbN9XjYsGFGTExMiRinTZtmXPgRO3v2bIl2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pgEDBqhPnz46ePCgFi1apObNm5f6H+H5Bg8erMcee0wDBgzQuHHjdPbsWS1cuFDXXXed2+TE7t27KyAgQH379tX/+3//T9nZ2Xr11VcVHh7u9te4w+HQnDlzNHLkSN14440aMmSIatasqV27duns2bOuX8gX6tu3r7p06aInn3xShw4dUuvWrfXZZ5/pX//6l8aPH19i7sLlGjVqlP7+97/r/vvv144dO1S3bl299dZbCg4Odmvn5+en1157Tb169dL111+vBx54QNdcc42OHz+u9evXy+FwaMWKFR6du0OHDpo/f77Gjh2rpk2bul3pdsOGDfr44481c+bMSn0/Ro4cqTFjxmjQoEG6/fbbtWvXLn366aeqXbv2ZffZtm1bLVy4UDNnzlRsbKzCw8N122236fHHH9c777yjXr16ady4cQoLC9OSJUt08OBBffjhh/LzK/tvsDZt2uiee+7RggULlJmZqQ4dOmjt2rXav39/ibZ//vOftX79erVv316jRo1S8+bNlZ6erm+++Uaff/650tPTL/u1lcf111+vm2++WVOnTlV6errCwsL07rvvqrCw0K3d5XzGDh48qH79+qlnz55KTk52LfMuHiIu7/cUqHReWZuEK3axZc2SjMWLF7u1dzqdRnR0dKnLXIuPz5o1y4iJiTHsdrtxww03GCtXrix1ybJKWcb62WefGS1atDACAgKMJk2aGP/4xz9KXdb88ccfG61atTICAwON+vXrG3/5y1+MN954o9QlnB9//LHRoUMHIygoyHA4HMZNN91kvPPOO67jpcV25swZY8KECUZUVJRRtWpVo3HjxsYLL7zgtuSz+DXEx8eXeB8uXIpblsOHDxv9+vUzgoODjdq1axuPPPKIsXr1arclp8W+/fZbY+DAgUatWrUMu91uxMTEGHfddZexdu1aV5vyLGs+344dO4whQ4a4XmfNmjWNrl27GkuWLHFb2mv2+1FanEVFRcZjjz1m1K5d2wgODjZ69Ohh7N+/v8znfv31127nuHCprmEYRmpqqtGnTx8jJCTEkOS2xDklJcW48847jRo1ahiBgYHGTTfdZKxcubJc79tvv/1mjBs3zqhVq5ZRrVo1o2/fvsbRo0dL/UynpaUZ8fHxRnR0tFG1alUjMjLS6Nq1q/HKK69c8jwxMTFGnz59LtqmeFnzCy+8UOrxlJQUo1u3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sADlNHz4cNlsNtlsNgUEBCg2NlYzZsxQYWFhhZ972bJlevbZZ8vVtjxJBgD4Gi4cB3igZ8+eWrx4sfLy8rRq1SrFx8eratWqmjp1aom2+fn5CggIMOW8YWFhpvQDAL6KCgvgAbvdrsjISMXExOihhx5St27dXDewKx7Gee655xQVFaUmTZpIko4ePaq77rpLNWrUUFhYmO644w4dOnTI1WdRUZEmTpyoGjVqqFatWnr00UdLXN30wiGhvLw8PfbYY4qOjpbdbldsbKxef/11HTp0SF26dJEk1axZUzabTcOHD5ckOZ1OJSYmqkGDBgoKClLr1q31wQcfuJ1n1apVuu666xQUFKQuXbq4xVlejz32mK677joFBwerYcOGeuqpp1RQUFCi3csvv6zo6GgFBwfrrrvuUmZmptvx1157Tc2aNVNgYKCaNm2qBQsWeBwLgN8PEhbgCgQFBSk/P9/1eO3atdq3b5/WrFmjlStXqqCgQD169FBISIi++OILffnll6pevbp69uzpet6LL76opKQkvfHGG9q8ebPS09P10UcfXfS8999/v9555x3NmzdPe/fu1csvv6zq1asrOjpaH374oSRp3759OnnypP72t79JkhITE/Xmm29q0aJF2rNnjyZMmKB7771XGzdulHQusRo4cKD69u2rnTt3auTIkXr88cc9fk9CQkKUlJSkH374QX/729/06quvas6cOW5t9u/fr/fff18rVqzQ6tWr9e2332rs2LGu42+//baefvppPffcc9q7d69mzZqlp556SkuWLPE4HgC/EwaAchk2bJhxxx13GIZhGE6n01izZo1ht9uNyZMnu45HREQYeXl5rue89dZbRpMmTQyn0+nal5eXZwQFBRmffvqpYRiGUbduXeP55593HS8oKDCuvfZa17kMwzA6depkPPLII4ZhGMa+ffsMScaaNWtKjXP9+vWGJOPXX3917cvNzTWCg4ONr776yq3tiBEjjHvuuccwDMOYOnWq0bx5c7fjjz32WIm+LiTJ+Oijj8o8/sILLxht27Z1PZ42bZrh7+9vHDt2zLXvk08+Mfz8/IyTJ08ahmEYjRo1MpYuXerWz7PPPmvExcUZhmEYBw8eNCQZ3377bZnnBfD7whwWwAMrV65U9erVVVBQIKfTqSFDhuiZZ55xHW/ZsqXbvJVdu3Zp//79CgkJcesnNzdXKSkpyszM1MmTJ9W+fXvXsSpVqqhdu3Zl3vRu586d8vf39+j+Mvv379fZs2d1++23u+3Pz8/XDTfcIEnau3evWxySFBcXV+5zFHvvvfc0b948paSkKDs7W4WFhXI4HG5t6tWrp2uuucbtPE6nU/v27VNISIhSUlI0YsQIjRo1ytWmsLBQoaGhHscD4PeBhAXwQJcuXbRw4UIFBAQoKipKVaq4f4WqVavm9jg7O1tt27bV22+/XaKvOnXqXFYMQUFBHj8nOztbkvTvf//bLVGQzs3LMUtycrKGDh2q6dOnq0ePHgoNDdW7776rF1980eNYX3311RIJlL+/v2mxAvAtJCyAB6pVq6bY2Nhyt//DH/6g9957T+Hh4SWqDMXq1q2rrVu3qmPHjpLOVRJ27NihP/zhD6W2b9mypZxOpzZu3Khu3bqVOF5c4SkqKnLta968uex2u44cOVJmZaZZs2auCcTFtmzZcukXeZ6vvvpKMTExevLJJ137Dh8+XKLdkSNHdOLECUVFRbnO4+fnpyZNmigiIkJRUVE6cOCAhg4d6tH5Afx+MekWqEBDhw5V7dq1dccdd+iLL77QwYMHtWHDBo0bN07Hjh2TJD3yyCP685//rOXLl+vHH3/U2LFjL3oNlfr162vYsGF68MEHtXz5clef77//viQpJiZGNptNK1eu1M8//6zs7GyFhIRo8uTJmjBhgpYsWaKUlBR98803eumll1wTWceMGaOffvpJU6ZM0b59+7R06VIlJSV59HobN26sI0eO6N1331VKSormzZtX6gTiwMBADRs2TLt27dIXX3yhcePG6a677lJkZKQkafr06UpMTNS8efP0f//3f/r++++1ePFi/fWvf/UoHgC/HyQsQAUKDg7Wpk2bVK9ePQ0cOFDNmjXTiBEjlJub66q4TJo0Sffdd5+GDRumuLg4hYSEaMCAARftd+HChbrzzjs1duxYNW3aVKNGjVJOTo4k6ZprrtH06dP1+OOPKyIiQgkJCZKkZ599Vk899ZQSExPVrFkz9ezZU//+97/VoEEDSefmlXz44Ydavny5WrdurUWLFmnWrFkevd5+/fppwoQJSkhIUJs2bfTVV1/pqaeeKtEuNjZWAwcOVO/evdW9e3e1atXKbdnyyJEj9dprr2nx4sVq2bKlOnXqpKSkJFesAK4+NqOsmX0AAAAWQYUFAABYHgkLAACwPBIWAABgeSQsAADA8khYAACA5ZGwAAAAyyNhAQAAlkfCAgAALI+EBQAAWB4JCwAAsDwSFgAAYHn/H9Yqx8oiHzU0AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En este caso, el modelo base se desempeña de una manera más estable, teniendo una menor accuracy que el anterior pero mejorando la estabilidad de la predicción del label 1.\n",
        "\n",
        "Tenemos una accuracy de $88.14\\%$ y la predicción del label $1$ con una precision de $0.62$, recall de $0.64$ y F1 de $0.63$."
      ],
      "metadata": {
        "id": "a83b-lsegquA"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OIbHraGqsska"
      },
      "source": [
        "### Ejercicio 3.2: Ajuste de Hiperparámetros\n",
        "\n",
        "Seleccionar valores para los hiperparámetros principales del DecisionTreeClassifier. Como mínimo, probar diferentes criterios de partición (criterion), profundidad máxima del árbol (max_depth), y cantidad mínima de samples por hoja (min_samples_leaf).\n",
        "\n",
        "Para ello, usar grid-search y 5-fold cross-validation sobre el conjunto de entrenamiento para explorar muchas combinaciones posibles de valores.\n",
        "\n",
        "Reportar accuracy promedio y varianza para todas las configuraciones.\n",
        "\n",
        "Para la mejor configuración encontrada, evaluar sobre el conjunto de **entrenamiento** y sobre el conjunto de **evaluación**, reportando:\n",
        "- Accuracy\n",
        "- Precision\n",
        "- Recall\n",
        "- F1\n",
        "- matriz de confusión\n",
        "\n",
        "\n",
        "Documentación:\n",
        "- https://scikit-learn.org/stable/modules/grid_search.html\n",
        "- https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "g1cncOHVdF46"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Definir los hiperparámetros a explorar\n",
        "param_grid = {\n",
        "    'criterion': ['gini', 'entropy'],\n",
        "    'max_depth': [None, 10, 20, 30, 40, 50],\n",
        "    'min_samples_leaf': [1, 2, 4, 6, 8, 10]\n",
        "}"
      ],
      "metadata": {
        "id": "FGWL68MLbilB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Configurar GridSearchCV con validación cruzada de 5 folds\n",
        "grid_search = GridSearchCV(DecisionTreeClassifier(random_state=0), param_grid, cv=5, scoring='accuracy', n_jobs=-1)"
      ],
      "metadata": {
        "id": "rX_6fwCZIUd6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Entrenar el modelo\n",
        "grid_search.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "vjOJuAm9IX2D",
        "outputId": "1b7400f6-70d3-46ee-ace5-435aee9fa925"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=0), n_jobs=-1,\n",
              "             param_grid={'criterion': ['gini', 'entropy'],\n",
              "                         'max_depth': [None, 10, 20, 30, 40, 50],\n",
              "                         'min_samples_leaf': [1, 2, 4, 6, 8, 10]},\n",
              "             scoring='accuracy')"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {color: black;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=0), n_jobs=-1,\n",
              "             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n",
              "                         &#x27;max_depth&#x27;: [None, 10, 20, 30, 40, 50],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4, 6, 8, 10]},\n",
              "             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=0), n_jobs=-1,\n",
              "             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n",
              "                         &#x27;max_depth&#x27;: [None, 10, 20, 30, 40, 50],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4, 6, 8, 10]},\n",
              "             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=0)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultados de la mejor configuración\n",
        "print(\"Mejores hiperparámetros:\", grid_search.best_params_)\n",
        "print(\"Mejor accuracy promedio:\", grid_search.best_score_)\n",
        "# Accuracy promedio y varianza para todas las configuraciones\n",
        "# Accuracy promedio y varianza para todas las configuraciones\n",
        "grid_info_df = pd.DataFrame(grid_search.cv_results_)\n",
        "grid_info_df = grid_info_df[['param_criterion','param_max_depth','param_min_samples_leaf','mean_test_score','std_test_score']]\n",
        "\n",
        "grid_info_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "fSda5KbDIbbY",
        "outputId": "b8036ef0-9c2e-448e-fbcf-2d77680a9df1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mejores hiperparámetros: {'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 2}\n",
            "Mejor accuracy promedio: 0.8826781326781328\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   param_criterion param_max_depth param_min_samples_leaf  mean_test_score  \\\n",
              "0             gini            None                      1         0.850314   \n",
              "1             gini            None                      2         0.865820   \n",
              "2             gini            None                      4         0.869199   \n",
              "3             gini            None                      6         0.873244   \n",
              "4             gini            None                      8         0.865807   \n",
              "..             ...             ...                    ...              ...   \n",
              "67         entropy              50                      2         0.867843   \n",
              "68         entropy              50                      4         0.857724   \n",
              "69         entropy              50                      6         0.838857   \n",
              "70         entropy              50                      8         0.848287   \n",
              "71         entropy              50                     10         0.863122   \n",
              "\n",
              "    std_test_score  \n",
              "0         0.019304  \n",
              "1         0.021003  \n",
              "2         0.024568  \n",
              "3         0.031676  \n",
              "4         0.019950  \n",
              "..             ...  \n",
              "67        0.020972  \n",
              "68        0.007746  \n",
              "69        0.028032  \n",
              "70        0.011399  \n",
              "71        0.004854  \n",
              "\n",
              "[72 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d677ad6c-a9fe-452d-a996-e3ee5e06f0ea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>param_criterion</th>\n",
              "      <th>param_max_depth</th>\n",
              "      <th>param_min_samples_leaf</th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>std_test_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>gini</td>\n",
              "      <td>None</td>\n",
              "      <td>1</td>\n",
              "      <td>0.850314</td>\n",
              "      <td>0.019304</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>gini</td>\n",
              "      <td>None</td>\n",
              "      <td>2</td>\n",
              "      <td>0.865820</td>\n",
              "      <td>0.021003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>gini</td>\n",
              "      <td>None</td>\n",
              "      <td>4</td>\n",
              "      <td>0.869199</td>\n",
              "      <td>0.024568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>gini</td>\n",
              "      <td>None</td>\n",
              "      <td>6</td>\n",
              "      <td>0.873244</td>\n",
              "      <td>0.031676</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>gini</td>\n",
              "      <td>None</td>\n",
              "      <td>8</td>\n",
              "      <td>0.865807</td>\n",
              "      <td>0.019950</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>entropy</td>\n",
              "      <td>50</td>\n",
              "      <td>2</td>\n",
              "      <td>0.867843</td>\n",
              "      <td>0.020972</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68</th>\n",
              "      <td>entropy</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>0.857724</td>\n",
              "      <td>0.007746</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>entropy</td>\n",
              "      <td>50</td>\n",
              "      <td>6</td>\n",
              "      <td>0.838857</td>\n",
              "      <td>0.028032</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>entropy</td>\n",
              "      <td>50</td>\n",
              "      <td>8</td>\n",
              "      <td>0.848287</td>\n",
              "      <td>0.011399</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>entropy</td>\n",
              "      <td>50</td>\n",
              "      <td>10</td>\n",
              "      <td>0.863122</td>\n",
              "      <td>0.004854</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>72 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d677ad6c-a9fe-452d-a996-e3ee5e06f0ea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d677ad6c-a9fe-452d-a996-e3ee5e06f0ea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d677ad6c-a9fe-452d-a996-e3ee5e06f0ea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0fd6fd2f-167c-4db5-9e98-9208cd490a14\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0fd6fd2f-167c-4db5-9e98-9208cd490a14')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0fd6fd2f-167c-4db5-9e98-9208cd490a14 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_00296326-0e20-4e28-96e7-0052001eebfb\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('grid_info_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_00296326-0e20-4e28-96e7-0052001eebfb button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('grid_info_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "grid_info_df",
              "summary": "{\n  \"name\": \"grid_info_df\",\n  \"rows\": 72,\n  \"fields\": [\n    {\n      \"column\": \"param_criterion\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"entropy\",\n          \"gini\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_max_depth\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 10,\n        \"max\": 50,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          20,\n          50\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_min_samples_leaf\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.011124434753168455,\n        \"min\": 0.838857038857039,\n        \"max\": 0.8826781326781328,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          0.8813449813449814,\n          0.8577236327236328\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.007747012312788919,\n        \"min\": 0.0047966112574333334,\n        \"max\": 0.033412883054488,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          0.024713323011430626,\n          0.007745787748634475\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicciones\n",
        "y_train_pred = grid_search.predict(X_train_scaled)\n",
        "y_test_pred = grid_search.predict(X_test_scaled)"
      ],
      "metadata": {
        "id": "ikB3gb1HdUdc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "322be966-b12f-4139-c092-0f86e2c0fb49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluación en el conjunto de entrenamiento\n",
        "target_names = ['0','1']\n",
        "accuracy = accuracy_score(y_train, y_train_pred)\n",
        "print(\"Accuracy =\",accuracy)\n",
        "print(classification_report(y_train, y_train_pred , target_names =target_names))\n",
        "ConfusionMatrixDisplay.from_predictions(\n",
        "    y_train, y_train_pred , display_labels=target_names, xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.title(\"Evaluación del Conjunto de Entrenamiento\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 687
        },
        "outputId": "a99a3593-3c26-446b-e928-2da3e31354cb",
        "id": "mH_K-FdfdXDW"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy = 0.8354686446392448\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.98      0.91      1232\n",
            "           1       0.58      0.10      0.18       251\n",
            "\n",
            "    accuracy                           0.84      1483\n",
            "   macro avg       0.71      0.54      0.54      1483\n",
            "weighted avg       0.80      0.84      0.78      1483\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluación en el conjunto de prueba\n",
        "target_names = ['0','1']\n",
        "accuracy = accuracy_score(y_test, y_test_pred )\n",
        "print(\"Accuracy =\",accuracy)\n",
        "print(classification_report(y_test, y_test_pred , target_names =target_names))\n",
        "ConfusionMatrixDisplay.from_predictions(\n",
        "    y_test, y_test_pred , display_labels=target_names, xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.title(\"Evaluación del Conjunto de Prueba\")\n",
        "plt.show()\n",
        "\n",
        "results['DecisionTreeClassifier con Ajuste de Hiperparámetros'] = [accuracy_score(y_test, y_test_pred),\n",
        "                                                                  precision_score(y_test, y_test_pred),\n",
        "                                                                  recall_score(y_test, y_test_pred),\n",
        "                                                                  f1_score(y_test, y_test_pred)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 688
        },
        "outputId": "0b68f42c-2a69-49bc-95bd-d5db4f19f4ff",
        "id": "LAZuxEs_daR3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy = 0.8409703504043127\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.97      0.91       313\n",
            "           1       0.47      0.14      0.21        58\n",
            "\n",
            "    accuracy                           0.84       371\n",
            "   macro avg       0.66      0.55      0.56       371\n",
            "weighted avg       0.80      0.84      0.80       371\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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k1atWqXbb79dffv21aFDh7R06VJFR0eX+x/huYYMGaLp06fr9ttv18SJE3X27FktWbJE1157rcPkxJ49e8rX11f9+vXTX/7yF505c0YvvviiQkNDHf4at1qtmj9/vkaNGqXrr79eQ4cOVa1atbR3716dPXvW/gv5fP369dPNN9+shx9+WIcPH1a7du308ccf69///rcmTZpUZu7CpRo9erT++c9/avjw4UpJSVG9evX06quvKiAgwKGdl5eXli1bpt69e6tVq1a65557VL9+ff3000/avHmzrFar1qxZ49S5O3furEWLFmncuHFq0aKFw5Vut2zZovfff19z5869ou/HqFGjNHbsWA0aNEi33nqr9u7dq48++kh16tS55D5jYmK0ZMkSzZ07V02bNlVoaKhuueUWPfTQQ3r99dfVu3dvTZw4USEhIVqxYoUOHTqkd999V15eFf8N1r59e915551avHixsrKy1LlzZ23cuFEHDhwo0/bJJ5/U5s2b1bFjR40ePVrR0dHKyMjQV199pU8++UQZGRmX/Noqo1WrVurUqZNmzJihjIwMhYSE6I033lBRUZFDu0v5jB06dEj9+/dXr169lJycbF/mXTpEXNnvKXDFuWVtEi7bhZY1SzKWL1/u0N5msxmRkZHlLnMtPf7EE08YUVFRhp+fn3HdddcZa9euLXfJsspZxvrxxx8brVu3Nnx9fY3mzZsb//rXv8pd1vz+++8bbdu2Nfz9/Y2GDRsaf//7342XX3653CWc77//vtG5c2ejevXqhtVqNW644Qbj9ddftx8vL7acnBxj8uTJRkREhOHj42M0a9bMePrppx2WfJa+hvHjx5d5H85filuRI0eOGP379zcCAgKMOnXqGPfff7+xfv16hyWnpXbv3m0MHDjQqF27tuHn52dERUUZd9xxh7Fx40Z7m8osaz5XSkqKMXToUPvrrFWrltG9e3djxYoVDkt7Xf1+lBdncXGxMX36dKNOnTpGQECAERcXZxw4cKDC53755ZcO5zh/qa5hGEZaWprRt29fIzAw0JDksMT54MGDxuDBg43g4GDD39/fuOGGG4y1a9dW6n377bffjIkTJxq1a9c2atSoYfTr1884duxYuZ/p9PR0Y/z48UZkZKTh4+NjhIeHG927dzdeeOGFi54nKirK6Nu37wXblC5rfvrpp8s9fvDgQaNHjx6Gn5+fERYWZvz1r381NmzYcMmfsdLv4759+4zBgwcbgYGBRq1atYyEhIQylw9w5nsKXCkWwzDJTDcApvfSSy9p1KhROnbsmK655hp3hwPgKsIcFgCVdvLkSVksFqevxgoAl4s5LAAuKj09Xe+8846WLl2q2NjYMvN1AKCqUWEBcFH79+/XtGnT1LRpUyUlJbk7HABXIeawAAAA06PCAgAATI+EBQAAmJ5HT7q12Ww6ceKEAgMDL3gXXwAALpVhGMrJyVFERMQFL05YFfLy8lRQUODSPn19feXv7+/SPq8Ej05YTpw4cdH7qQAA4ApX+vpDeXl5ahRVU2mnLv02F+UJDw/XoUOHPC5p8eiEpfSGbke+aihrTUa3gMq6/do27g4B8BhFKtRnWudwE9EroaCgQGmninUoJUrWQNf8jsvOsalRzBEVFBRUKmFZsmSJlixZosOHD0squW3EY489Zr/3VF5enh544AG98cYbys/PV1xcnBYvXqywsDB7H0ePHtV9992nzZs3q2bNmoqPj1diYqKqVXMuBfHohKV0GMha08tlP0zgalDN4uPuEADP8ftaWndNPbAGuu933DXXXKMnn3xSzZo1k2EYWrFihW677Tbt3r1brVq10uTJk/XBBx/o7bffVlBQkBISEjRw4EB9/vnnkkpu2tm3b1+Fh4dr+/btOnnypIYPHy4fHx898cQTTsXi0cuas7OzFRQUpF//05iEBXBCXER7d4cAeIwio1Bb9G9lZWXJarVesfOW/o47leraCkto8yOX9VpCQkL09NNPa/Dgwapbt65WrlypwYMHS5K+//57tWzZUsnJyerUqZM+/PBD/elPf9KJEyfsVZelS5dq+vTp+vnnn+Xr61vp8/JbHgAAE7PJcOkmlSRD5275+fkXjaO4uFhvvPGGcnNzFRsbq5SUFBUWFqpHjx72Ni1atFCDBg2UnJwsSUpOTlabNm0choji4uKUnZ2t7777zqn3gYQFAICrTGRkpIKCguxbYmJihW2/+eYb1axZU35+fho7dqzee+89RUdHKy0tTb6+vgoODnZoHxYWprS0NElSWlqaQ7JSerz0mDM8eg4LAAD/62yyyebCvqSSFU/nDgn5+flV+JzmzZtrz549ysrK0jvvvKP4+Hht3brVRRFVHgkLAABXGavVWuk5LL6+vmratKkkKSYmRl9++aX+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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A pesar de que uno pensaría que el ajuste de hiperparámetros mejoraría el modelo anterior, en este caso no lo conseguimos. Las métricas que buscábamos mejorar empeoraron drásticamente.\n",
        "\n",
        "Pasamos a tener una accuracy de $88.09\\%$ y una predicción del label $1$ con una precision de $0.47$, recall de $0.14$ y F1 de $0.21$, confundiendo principalmente una gran cantidad de valores reales 1 por una predicción $0$."
      ],
      "metadata": {
        "id": "bbNP247iixTy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Comparacion de los Resultados"
      ],
      "metadata": {
        "id": "N8PWMS3gcUbg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Recordando que en este problema buscamos maximizar el recall, ademas de tener una accuracy aceptable, entonces el modelo con mejor desempeño dentro de los modelos propuestos es el `DecisionTreeClassifier con hiperparámetros por defecto` con una $Accuracy = 88.14\\% $ y un $Recall = 63.79\\%$."
      ],
      "metadata": {
        "id": "gkDSPbZ-hDG0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_results = pd.DataFrame.from_dict(results, orient='index', columns=['Accuracy', 'Precision', 'Recall', 'F1-Score'])\n",
        "\n",
        "df_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "id": "uABzwLJNcZ6o",
        "outputId": "dc1e72a4-1151-4e8d-a1fe-21b0c731c993"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                    Accuracy  Precision  \\\n",
              "SGDClassifier con hiperparámetros por defecto       0.867925   0.645161   \n",
              "SGDClassifier con Ajuste de Hiperparámetros         0.884097   0.941176   \n",
              "DecisionTreeClassifier con hiperparámetros por ...  0.881402   0.616667   \n",
              "DecisionTreeClassifier con Ajuste de Hiperparám...  0.840970   0.470588   \n",
              "\n",
              "                                                      Recall  F1-Score  \n",
              "SGDClassifier con hiperparámetros por defecto       0.344828  0.449438  \n",
              "SGDClassifier con Ajuste de Hiperparámetros         0.275862  0.426667  \n",
              "DecisionTreeClassifier con hiperparámetros por ...  0.637931  0.627119  \n",
              "DecisionTreeClassifier con Ajuste de Hiperparám...  0.137931  0.213333  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8b548857-b727-4052-bf39-59ab4a2b1318\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Recall</th>\n",
              "      <th>F1-Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>SGDClassifier con hiperparámetros por defecto</th>\n",
              "      <td>0.867925</td>\n",
              "      <td>0.645161</td>\n",
              "      <td>0.344828</td>\n",
              "      <td>0.449438</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SGDClassifier con Ajuste de Hiperparámetros</th>\n",
              "      <td>0.884097</td>\n",
              "      <td>0.941176</td>\n",
              "      <td>0.275862</td>\n",
              "      <td>0.426667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DecisionTreeClassifier con hiperparámetros por defecto</th>\n",
              "      <td>0.881402</td>\n",
              "      <td>0.616667</td>\n",
              "      <td>0.637931</td>\n",
              "      <td>0.627119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DecisionTreeClassifier con Ajuste de Hiperparámetros</th>\n",
              "      <td>0.840970</td>\n",
              "      <td>0.470588</td>\n",
              "      <td>0.137931</td>\n",
              "      <td>0.213333</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b548857-b727-4052-bf39-59ab4a2b1318')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8b548857-b727-4052-bf39-59ab4a2b1318 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8b548857-b727-4052-bf39-59ab4a2b1318');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8cc22621-3b53-4d10-948b-3ec07eecc66e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8cc22621-3b53-4d10-948b-3ec07eecc66e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8cc22621-3b53-4d10-948b-3ec07eecc66e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_63b06689-0424-420e-a147-ed4b59520c1f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_results')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_63b06689-0424-420e-a147-ed4b59520c1f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_results');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_results",
              "summary": "{\n  \"name\": \"df_results\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01973063005929717,\n        \"min\": 0.8409703504043127,\n        \"max\": 0.8840970350404312,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.8840970350404312,\n          0.8409703504043127,\n          0.8679245283018868\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19727550325574347,\n        \"min\": 0.47058823529411764,\n        \"max\": 0.9411764705882353,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9411764705882353,\n          0.47058823529411764,\n          0.6451612903225806\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21086942309146361,\n        \"min\": 0.13793103448275862,\n        \"max\": 0.6379310344827587,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.27586206896551724,\n          0.13793103448275862,\n          0.3448275862068966\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16949552135131307,\n        \"min\": 0.21333333333333335,\n        \"max\": 0.6271186440677966,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.4266666666666667,\n          0.21333333333333335,\n          0.44943820224719105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.4"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}